<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lb&#39;s blog</title>
  
  <subtitle>明天会在哪，勇敢无畏的去闯吧</subtitle>
  <link href="http://bbstudy.net/atom.xml" rel="self"/>
  
  <link href="http://bbstudy.net/"/>
  <updated>2022-09-11T09:32:49.405Z</updated>
  <id>http://bbstudy.net/</id>
  
  <author>
    <name>lb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Test</title>
    <link href="http://bbstudy.net/text/"/>
    <id>http://bbstudy.net/text/</id>
    <published>2022-09-08T12:11:06.085Z</published>
    <updated>2022-09-11T09:32:49.405Z</updated>
    
    <content type="html"><![CDATA[<p>这只是个测试文章而已~</p><span id="more"></span><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p><img src="http://lbbuket-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/avatar-2022-09-10-23-24-22.jpg/w800" alt="avatar-2022-09-10-23-24-22" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这只是个测试文章而已~&lt;/p&gt;</summary>
    
    
    
    <category term="test" scheme="http://bbstudy.net/categories/test/"/>
    
    
    <category term="gra_stu" scheme="http://bbstudy.net/tags/gra-stu/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode第307场周赛</title>
    <link href="http://bbstudy.net/weekly-contest-307/"/>
    <id>http://bbstudy.net/weekly-contest-307/</id>
    <published>2022-09-07T13:19:54.966Z</published>
    <updated>2022-09-11T12:04:57.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode第307场周赛题解"><a href="#LeetCode第307场周赛题解" class="headerlink" title="LeetCode第307场周赛题解"></a>LeetCode第307场周赛题解</h2><blockquote><p>比赛地址：<a href="https://leetcode.cn/contest/weekly-contest-307/">https://leetcode.cn/contest/weekly-contest-307/</a></p></blockquote><span id="more"></span><h3 id="一、赢得比赛需要的最少训练时长"><a href="#一、赢得比赛需要的最少训练时长" class="headerlink" title="一、赢得比赛需要的最少训练时长"></a>一、<a href="https://leetcode.cn/problems/minimum-hours-of-training-to-win-a-competition/">赢得比赛需要的最少训练时长</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>你正在参加一场比赛，给你两个 正 整数 initialEnergy 和 initialExperience 分别表示你的初始精力和初始经验。</p><p>另给你两个下标从 0 开始的整数数组 energy 和 experience，长度均为 n 。</p><p>你将会 依次 对上 n 个对手。第 i 个对手的精力和经验分别用 energy[i] 和 experience[i] 表示。当你对上对手时，需要在经验和精力上都 严格 超过对手才能击败他们，然后在可能的情况下继续对上下一个对手。</p><p>击败第 i 个对手会使你的经验 增加 experience[i]，但会将你的精力 减少  energy[i] 。</p><p>在开始比赛前，你可以训练几个小时。每训练一个小时，你可以选择将增加经验增加 1 或者 将精力增加 1 。</p><p>返回击败全部 n 个对手需要训练的 最少 小时数目。</p><p><strong>示例1：</strong></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">输入：initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]输出：8解释：在 6 小时训练后，你可以将精力提高到 11 ，并且再训练 2 个小时将经验提高到 5 。按以下顺序与对手比赛：<span class="token list punctuation">-</span> 你的精力与经验都超过第 0 个对手，所以获胜。  精力变为：11 - 1 = 10 ，经验变为：5 + 2 = 7 。<span class="token list punctuation">-</span> 你的精力与经验都超过第 1 个对手，所以获胜。  精力变为：10 - 4 = 6 ，经验变为：7 + 6 = 13 。<span class="token list punctuation">-</span> 你的精力与经验都超过第 2 个对手，所以获胜。  精力变为：6 - 3 = 3 ，经验变为：13 + 3 = 16 。<span class="token list punctuation">-</span> 你的精力与经验都超过第 3 个对手，所以获胜。  精力变为：3 - 2 = 1 ，经验变为：16 + 1 = 17 。在比赛前进行了 8 小时训练，所以返回 8 。可以证明不存在更小的答案。</code></pre><p><strong>示例2：</strong></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">输入：initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3]输出：0解释：你不需要额外的精力和经验就可以赢得比赛，所以返回 0 。</code></pre><p><strong>提示：</strong></p><ul><li>$n == energy.length == experience.length$</li><li>$1 &lt;= n &lt;= 100$</li><li>$1 &lt;= initialEnergy, initialExperience, energy[i], experience[i] &lt;= 100$</li></ul><h4 id="题解：模拟"><a href="#题解：模拟" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>由于需要依次打败n个对手，且每次打败的条件为：经验和精力均大于对手。于是遍历n个对手，如果当前精力或经验小于对手时则不断训练以增加经验和精力。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minNumberOfHours</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>num1<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">||</span>num2<span class="token operator">&lt;=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>ans<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num1<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>num1<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num2<span class="token operator">&lt;=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>num2<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            num1<span class="token operator">-=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>num2<span class="token operator">+=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="二、6166-最大回文数字"><a href="#二、6166-最大回文数字" class="headerlink" title="二、6166. 最大回文数字"></a>二、<a href="https://leetcode.cn/problems/largest-palindromic-number/">6166. 最大回文数字</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给你一个仅由数字（0 - 9）组成的字符串 num 。</p><p>请你找出能够使用 num 中数字形成的 最大回文 整数，并以字符串形式返回。该整数不含 前导零 。</p><p>注意：</p><ul><li>你 无需 使用 num 中的所有数字，但你必须使用 至少 一个数字。</li><li>数字可以重新排序。</li></ul><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：num &#x3D; &quot;444947137&quot;输出：&quot;7449447&quot;解释：从 &quot;444947137&quot; 中选用数字 &quot;4449477&quot;，可以形成回文整数 &quot;7449447&quot; 。可以证明 &quot;7449447&quot; 是能够形成的最大回文整数。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：num &#x3D; &quot;00009&quot;输出：&quot;9&quot;解释：可以证明 &quot;9&quot; 能够形成的最大回文整数。注意返回的整数不应含前导零。</code></pre><p><strong>提示</strong></p><ul><li><code>1 &lt;= num.length &lt;= 10^5</code></li><li><code>num</code> 由数字（<code>0 - 9</code>）组成</li></ul><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>首先用哈希表存储每个数字对应的个数，然后依次从大到小构造回文串的前一半，具体为：</p><ul><li>假设当前遍历的数字为i，对应的个数为cnt[i]，则回文串前一半有$cnt[i]/2$个数字i</li><li>当遍历完所有数字后，如果还有数字空余，则选一个最大的数字作为中间的数字</li></ul><p>当前上述过程需要排除到前导0的存在。所有对于只存在0的字符串，需要特判下。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">largestPalindromic</span><span class="token punctuation">(</span>string num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cnt<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cnt<span class="token punctuation">[</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断是否为前导0</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        string ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                string <span class="token function">str</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ans<span class="token operator">+=</span>str<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                      cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        string s<span class="token operator">=</span>ans<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        ans<span class="token operator">+=</span>s<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span><span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="三、感染二叉树需要的总时间"><a href="#三、感染二叉树需要的总时间" class="headerlink" title="三、感染二叉树需要的总时间"></a>三、<a href="https://leetcode.cn/problems/amount-of-time-for-binary-tree-to-be-infected/">感染二叉树需要的总时间</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给你一棵二叉树的根节点 root ，二叉树中节点的值 互不相同 。另给你一个整数 start 。在第 0 分钟，感染 将会从值为 start 的节点开始爆发。</p><p>每分钟，如果节点满足以下全部条件，就会被感染：</p><ul><li>节点此前还没有感染。</li><li>节点与一个已感染节点相邻。</li><li>返回感染整棵树需要的分钟数。</li></ul><p><strong>示例1：</strong></p><p><img src="http://lbbuket-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/image-20220625231744-1-2022-09-11-19-51-26.png/resize80" alt="image-20220625231744-1-2022-09-11-19-51-26" loading="lazy"></p><pre class="language-none"><code class="language-none">输入：root &#x3D; [1,5,3,null,4,10,6,9,2], start &#x3D; 3输出：4解释：节点按以下过程被感染：- 第 0 分钟：节点 3- 第 1 分钟：节点 1、10、6- 第 2 分钟：节点5- 第 3 分钟：节点 4- 第 4 分钟：节点 9 和 2感染整棵树需要 4 分钟，所以返回 4 。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：root &#x3D; [1], start &#x3D; 1输出：0解释：第 0 分钟，树中唯一一个节点处于感染状态，返回 0 。</code></pre><p><strong>提示：</strong></p><ul><li>树中节点的数目在范围 <code>[1, 10^5]</code> 内</li><li><code>1 &lt;= Node.val &lt;= 10^5</code></li><li>每个节点的值 <strong>互不相同</strong></li><li>树中必定存在值为 <code>start</code> 的节点</li></ul><h4 id="题解一：DFS"><a href="#题解一：DFS" class="headerlink" title="题解一：DFS"></a>题解一：DFS</h4><p>关于起始节点只有两种情况存在：</p><ul><li>第一种情况：start节点为整棵二叉树根节点，于是感染时间即为该二叉树的高度</li><li>第二种情况：start节点为二叉树某一子节点，又分为左子树节点和右子树节点<ul><li>左子树节点：则感染时间为： 以start为根节点的树的高度 和 整棵树的右子树的最大高度+root节点到start节点的距离 两者取最大值</li><li>右子树节点：感染时间为： 以start为根节点的树的高度 和 整棵树的左子树的最大高度+root节点到start节点的距离 两者取最大值</li></ul></li></ul><p>具体见代码。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//最终结果</span>    <span class="token keyword">int</span> depth<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//起始节点的高度</span>    <span class="token keyword">int</span> <span class="token function">amountOfTime</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> level<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token operator">==</span>start<span class="token punctuation">)</span> depth<span class="token operator">=</span>level<span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//左子树的高度</span>        <span class="token keyword">bool</span> inLeft<span class="token operator">=</span> depth<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">//判断起始节点是否在左子树上</span>        <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//右子树的高度</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">==</span> start<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//第一种情况：感染start为根节点的树所需的时间</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>inLeft<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                     <span class="token comment">//第二种情况：感染root为根节点的树所需的时间</span>            ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>depth<span class="token operator">-</span>level<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>depth<span class="token operator">-</span>level<span class="token operator">+</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">//返回树高</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="题解二：建图-遍历"><a href="#题解二：建图-遍历" class="headerlink" title="题解二：建图+遍历"></a>题解二：建图+遍历</h4><p><strong>当然还可以建图（将二叉树转化为图），然后直接从start节点遍历整张图，求最长路径（dfs和bfs都可以）即可</strong></p><p><strong>C++代码</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for a binary tree node. * struct TreeNode &#123; *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125; * &#125;; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> edge<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">build_edge</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token keyword">int</span> u<span class="token operator">=</span>root<span class="token operator">-></span>val<span class="token punctuation">,</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            v<span class="token operator">=</span>root<span class="token operator">-></span>left<span class="token operator">-></span>val<span class="token punctuation">;</span>            edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            edge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            v<span class="token operator">=</span>root<span class="token operator">-></span>right<span class="token operator">-></span>val<span class="token punctuation">;</span>            edge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>            edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">build_edge</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build_edge</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">amountOfTime</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>edge<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build_edge</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span>q<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> now<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> u<span class="token operator">=</span>now<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>now<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> v<span class="token operator">=</span>edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>now<span class="token punctuation">.</span>second<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;LeetCode第307场周赛题解&quot;&gt;&lt;a href=&quot;#LeetCode第307场周赛题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第307场周赛题解&quot;&gt;&lt;/a&gt;LeetCode第307场周赛题解&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;比赛地址：&lt;a href=&quot;https://leetcode.cn/contest/weekly-contest-307/&quot;&gt;https://leetcode.cn/contest/weekly-contest-307/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="LeetCode周赛题解" scheme="http://bbstudy.net/categories/LeetCode%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode第291场周赛</title>
    <link href="http://bbstudy.net/weekly-contest-291/"/>
    <id>http://bbstudy.net/weekly-contest-291/</id>
    <published>2022-09-07T13:19:54.965Z</published>
    <updated>2022-05-01T05:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode第291场周赛题解"><a href="#LeetCode第291场周赛题解" class="headerlink" title="LeetCode第291场周赛题解"></a>LeetCode第291场周赛题解</h2><blockquote><p>比赛地址：<a href="https://leetcode-cn.com/contest/weekly-contest-291/">https://leetcode-cn.com/contest/weekly-contest-291/</a></p></blockquote><h3 id="一、移除指定数字得到的最大结果"><a href="#一、移除指定数字得到的最大结果" class="headerlink" title="一、移除指定数字得到的最大结果"></a><a href="https://leetcode-cn.com/problems/remove-digit-from-number-to-maximize-result/">一、移除指定数字得到的最大结果</a></h3><h4 id="题解：暴力"><a href="#题解：暴力" class="headerlink" title="题解：暴力"></a>题解：暴力</h4><p>比赛时想复杂了，代码又丑又长，还wa了两发…，这里便不给出比赛的思路了。</p><p>需要计算删除指定字符后，字符串表示的数字结果最大化。</p><p>直接遍历字符串，若当前字符等于需要删除的字符时，则记录若删除当前字符后，所能得到的数字，只要维护这个数字的最大值即可，具体见代码。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">removeDigit</span><span class="token punctuation">(</span>string number<span class="token punctuation">,</span> <span class="token keyword">char</span> digit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>number<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>digit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token operator">=</span>number<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">+</span>number<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">></span>ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ans<span class="token operator">=</span>res<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="二、必须拿起的最小连续卡牌数"><a href="#二、必须拿起的最小连续卡牌数" class="headerlink" title="二、必须拿起的最小连续卡牌数"></a><a href="https://leetcode-cn.com/problems/minimum-consecutive-cards-to-pick-up/">二、必须拿起的最小连续卡牌数</a></h3><h4 id="题解：哈希"><a href="#题解：哈希" class="headerlink" title="题解：哈希"></a>题解：哈希</h4><p>计算必须最小拿起的连续卡牌数，使得拿起卡牌数中有一对相同数字的卡牌。</p><p>只需要记录每个数字第一次出现的下标，若当前遍历的数字为x：</p><ul><li><p>如果前面已经出现过，则直接记录当前需要拿起的连续卡牌数量，并维护最小值。</p></li><li><p>如果前面没有出现过，则将当前数字以及下标存入到哈希表中。</p></li></ul><p>具体见代码。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimumCardPickup</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> cards<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>cards<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>cards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>i<span class="token operator">-</span>mp<span class="token punctuation">[</span>cards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            mp<span class="token punctuation">[</span>cards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="三、含最多-K-个可整除元素的子数组"><a href="#三、含最多-K-个可整除元素的子数组" class="headerlink" title="三、含最多 K 个可整除元素的子数组"></a><a href="https://leetcode-cn.com/problems/k-divisible-elements-subarrays/">三、含最多 K 个可整除元素的子数组</a></h3><h4 id="题解：哈希-1"><a href="#题解：哈希-1" class="headerlink" title="题解：哈希"></a>题解：哈希</h4><p>由于数组长度最大为200，所有子数组个数最大为：<script type="math/tex">\Sigma_1^n  i</script>（其中n为数组长度）</p><p>需要判断没有重复的子数组，可以将数字转化为字符，于是便将子数组转化为了字符串，存入到哈希表中判重。</p><p>假设当前遍历的下标为i，则直接判断以下边i开头的子数组有多少个满足题意：</p><ul><li>如果超过k个可整除的元素，则直接结束循环</li><li>如果不超过k个，则判断当前子数组是否出现过，若没出现过则结果加1，同时存到到哈希表中</li></ul><p>具体见代码。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    set<span class="token operator">&lt;</span>string<span class="token operator">></span> st<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">countDistinct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            string s<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                s<span class="token operator">+=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token char">'0'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span>k<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>ans<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="四、字符串的总引力"><a href="#四、字符串的总引力" class="headerlink" title="四、字符串的总引力"></a><a href="https://leetcode-cn.com/problems/total-appeal-of-a-string/">四、字符串的总引力</a></h3><h4 id="题解：dp"><a href="#题解：dp" class="headerlink" title="题解：dp"></a>题解：dp</h4><p>需要计算所有子字符串的引力和。字符串的引力表示为：字符串中出现不同字符的个数。</p><p>由于字符串长度最大为$1e^5$，显然按照题三一样两重循环遍历所有子字符串显然不行，考虑dp</p><p>dp[i]表示以s[i]结尾的子字符串的所有引力之和。</p><p>于是最终结果ans为所有dp[i]的和。</p><p>状态转移方程为：</p><ul><li>如果前面出现过s[i]，则：$dp[i]=dp[i-1]+(i-j-1)+1$，其中j表示s[i]在前面出现的下标，</li><li>如果没有出现过s[i]，则：$dp[i]=dp[i-1]+i+1$</li></ul><p>具体见代码。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>    ll dp<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">appealSum</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ll ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//记录每个字母出现的索引</span>        <span class="token keyword">int</span> pos<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        pos<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//没有出现过</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//前面出现过</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">-</span>pos<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//更新s[i]最新的下标</span>            pos<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            ans<span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>当然，可以对空间进行优化，对于dp数组，只需要用一个变量sum存储即可。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ve<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">appealSum</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pos<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//前面已经出现过s[i]</span>                <span class="token keyword">int</span> pre_pos<span class="token operator">=</span>pos<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                sum<span class="token operator">+=</span><span class="token punctuation">(</span>i<span class="token operator">-</span>pre_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//前面没有出现过s[i]</span>                sum<span class="token operator">+=</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//更新s[i]最新的下标</span>            pos<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token comment">//ans累加</span>            ans<span class="token operator">+=</span>sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode第291场周赛题解&quot;&gt;&lt;a href=&quot;#LeetCode第291场周赛题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第291场周赛题解&quot;&gt;&lt;/a&gt;LeetCode第291场周赛题解&lt;/h2&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="LeetCode周赛题解" scheme="http://bbstudy.net/categories/LeetCode%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode第268场周赛</title>
    <link href="http://bbstudy.net/weekly-contest-268/"/>
    <id>http://bbstudy.net/weekly-contest-268/</id>
    <published>2022-09-07T13:19:54.957Z</published>
    <updated>2021-11-21T07:35:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode第268场周赛题解"><a href="#LeetCode第268场周赛题解" class="headerlink" title="LeetCode第268场周赛题解"></a>LeetCode第268场周赛题解</h2><blockquote><p>比赛地址：<a href="https://leetcode-cn.com/contest/weekly-contest-268/">https://leetcode-cn.com/contest/weekly-contest-268/</a></p></blockquote><h3 id="一、两栋颜色不同且距离最远的房子"><a href="#一、两栋颜色不同且距离最远的房子" class="headerlink" title="一、两栋颜色不同且距离最远的房子"></a><a href="https://leetcode-cn.com/problems/two-furthest-houses-with-different-colors/">一、两栋颜色不同且距离最远的房子</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>街上有 n 栋房子整齐地排成一列，每栋房子都粉刷上了漂亮的颜色。给你一个下标从 0 开始且长度为 n 的整数数组 colors ，其中 colors[i] 表示第  i 栋房子的颜色。</p><p>返回 两栋 颜色 不同 房子之间的 最大 距离。</p><p>第 i 栋房子和第 j 栋房子之间的距离是 abs(i - j) ，其中 abs(x) 是 x 的绝对值。</p><p><strong>提示：</strong></p><ul><li>n == colors.length</li><li>2 &lt;= n &lt;= 100</li><li>0 &lt;= colors[i] &lt;= 100</li><li>生成的测试数据满足 至少 存在 2 栋颜色不同的房子</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p><img src="https://assets.leetcode.com/uploads/2021/10/31/eg1.png" alt="img" loading="lazy"></p><p>输入：colors = [1,1,1,6,1,1,1]<br>输出：3<br>解释：上图中，颜色 1 标识成蓝色，颜色 6 标识成红色。<br>两栋颜色不同且距离最远的房子是房子 0 和房子 3 。<br>房子 0 的颜色是颜色 1 ，房子 3 的颜色是颜色 6 。两栋房子之间的距离是 abs(0 - 3) = 3 。<br>注意，房子 3 和房子 6 也可以产生最佳答案。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><img src="https://assets.leetcode.com/uploads/2021/10/31/eg2.png" alt="img" loading="lazy"></p><p>输入：colors = [1,8,3,8,3]<br>输出：4<br>解释：上图中，颜色 1 标识成蓝色，颜色 8 标识成黄色，颜色 3 标识成绿色。<br>两栋颜色不同且距离最远的房子是房子 0 和房子 4 。<br>房子 0 的颜色是颜色 1 ，房子 4 的颜色是颜色 3 。两栋房子之间的距离是 abs(0 - 4) = 4 。</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：colors = [0,1]<br>输出：1<br>解释：两栋颜色不同且距离最远的房子是房子 0 和房子 1 。<br>房子 0 的颜色是颜色 0 ，房子 1 的颜色是颜色 1 。两栋房子之间的距离是 abs(0 - 1) = 1 。</p></blockquote><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>数据量才100，直接两重循环随便搞搞</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> colors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>colors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>colors<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="二、给植物浇水"><a href="#二、给植物浇水" class="headerlink" title="二、给植物浇水"></a><a href="https://leetcode-cn.com/problems/watering-plants/">二、给植物浇水</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>你打算用一个水罐给花园里的 n 株植物浇水。植物排成一行，从左到右进行标记，编号从 0 到 n - 1 。其中，第 i 株植物的位置是 x = i 。x = -1 处有一条河，你可以在那里重新灌满你的水罐。</p><p>每一株植物都需要浇特定量的水。你将会按下面描述的方式完成浇水：</p><p>按从左到右的顺序给植物浇水。<br>在给当前植物浇完水之后，如果你没有足够的水 完全 浇灌下一株植物，那么你就需要返回河边重新装满水罐。<br>你 不能 提前重新灌满水罐。<br>最初，你在河边（也就是，x = -1），在 x 轴上每移动 一个单位 都需要 一步 。</p><p>给你一个下标从 0 开始的整数数组 plants ，数组由 n 个整数组成。其中，plants[i] 为第 i 株植物需要的水量。另有一个整数 capacity 表示水罐的容量，返回浇灌所有植物需要的 步数 。</p><p><strong>提示：</strong></p><ul><li>$n == plants.length$</li><li>$1 &lt;= n &lt;= 1000$</li><li>$1 &lt;= plants[i] &lt;= 10^6$</li><li>$max(plants[i]) &lt;= capacity &lt;= 10^9$</li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p>输入：plants = [2,2,3,3], capacity = 5<br>输出：14<br>解释：从河边开始，此时水罐是装满的：</p><ul><li>走到植物 0 (1 步) ，浇水。水罐中还有 3 单位的水。</li><li>走到植物 1 (1 步) ，浇水。水罐中还有 1 单位的水。</li><li>由于不能完全浇灌植物 2 ，回到河边取水 (2 步)。</li><li>走到植物 2 (3 步) ，浇水。水罐中还有 2 单位的水。</li><li>由于不能完全浇灌植物 3 ，回到河边取水 (3 步)。</li><li>走到植物 3 (4 步) ，浇水。<br>需要的步数是 = 1 + 1 + 2 + 3 + 3 + 4 = 14 。</li></ul></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：plants = [1,1,1,4,2,3], capacity = 4<br>输出：30<br>解释：从河边开始，此时水罐是装满的：</p><ul><li>走到植物 0，1，2 (3 步) ，浇水。回到河边取水 (3 步)。</li><li>走到植物 3 (4 步) ，浇水。回到河边取水 (4 步)。</li><li>走到植物 4 (5 步) ，浇水。回到河边取水 (5 步)。</li><li>走到植物 5 (6 步) ，浇水。<br>需要的步数是 = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30 。</li></ul></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：plants = [7,7,7,7,7,7,7], capacity = 8<br>输出：49<br>解释：每次浇水都需要重新灌满水罐。<br>需要的步数是 = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49 。</p></blockquote><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>也不难，直接按照题意模拟即可。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">wateringPlants</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> plants<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>plants<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">=</span>capacity<span class="token operator">-</span>plants<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span>plants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token operator">=</span>capacity<span class="token operator">-</span>plants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>num<span class="token operator">-=</span>plants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="三、区间内查询数字的频率"><a href="#三、区间内查询数字的频率" class="headerlink" title="三、区间内查询数字的频率"></a><a href="https://leetcode-cn.com/problems/range-frequency-queries/">三、区间内查询数字的频率</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>请你设计一个数据结构，它能求出给定子数组内一个给定值的 频率 。</p><p>子数组中一个值的 频率 指的是这个子数组中这个值的出现次数。</p><p>请你实现 RangeFreqQuery 类：</p><p>RangeFreqQuery(int[] arr) 用下标从 0 开始的整数数组 arr 构造一个类的实例。<br>int query(int left, int right, int value) 返回子数组 arr[left…right] 中 value 的 频率 。<br>一个 子数组 指的是数组中一段连续的元素。arr[left…right] 指的是 nums 中包含下标 left 和 right 在内 的中间一段连续元素。</p><p><strong>提示：</strong></p><ul><li>$1 &lt;= arr.length &lt;= 10^5$</li><li>$1 &lt;= arr[i],value &lt;= 10^4$</li><li>$0&lt;= left &lt;= right &lt; arr.length$</li><li>调用 query 不超过 $10^5$ 次。</li></ul><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入：<br>[“RangeFreqQuery”, “query”, “query”]<br>[[[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]], [1, 2, 4], [0, 11, 33]]<br>输出：<br>[null, 1, 2]</p><p>解释：<br>RangeFreqQuery rangeFreqQuery = new RangeFreqQuery([12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]);<br>rangeFreqQuery.query(1, 2, 4); // 返回 1 。4 在子数组 [33, 4] 中出现 1 次。<br>rangeFreqQuery.query(0, 11, 33); // 返回 2 。33 在整个子数组中出现 2 次。</p></blockquote><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>使用map存储每个数出现的所有位置，key表示数字，value则表示所有的位置。遍历数组存储每个数字出现的位置，显然位置数组是单调递增的，于是可以直接使用二分查找当前数字从0到r有多少个 减去 从0到l-1有多少个即可。C++有自带二分函数，Java相对来讲就麻烦些。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">RangeFreqQuery</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>mp<span class="token punctuation">;</span>    <span class="token function">RangeFreqQuery</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> <span class="token operator">&amp;</span>v<span class="token operator">=</span>mp<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> r<span class="token operator">=</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> l<span class="token operator">=</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token operator">-</span>l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode第268场周赛题解&quot;&gt;&lt;a href=&quot;#LeetCode第268场周赛题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第268场周赛题解&quot;&gt;&lt;/a&gt;LeetCode第268场周赛题解&lt;/h2&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="LeetCode周赛题解" scheme="http://bbstudy.net/categories/LeetCode%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode第283场周赛</title>
    <link href="http://bbstudy.net/weekly-contest-283/"/>
    <id>http://bbstudy.net/weekly-contest-283/</id>
    <published>2022-09-07T13:19:54.957Z</published>
    <updated>2022-03-06T11:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode第283场周赛题解"><a href="#LeetCode第283场周赛题解" class="headerlink" title="LeetCode第283场周赛题解"></a>LeetCode第283场周赛题解</h2><blockquote><p>比赛地址：<a href="https://leetcode-cn.com/contest/weekly-contest-283/">https://leetcode-cn.com/contest/weekly-contest-283/</a></p></blockquote><h3 id="一、Excel-表中某个范围内的单元格"><a href="#一、Excel-表中某个范围内的单元格" class="headerlink" title="一、Excel 表中某个范围内的单元格"></a><a href="https://leetcode-cn.com/problems/cells-in-a-range-on-an-excel-sheet/">一、Excel 表中某个范围内的单元格</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>Excel 表中的一个单元格 (r, c) 会以字符串 “<col><row>“ 的形式进行表示，其中：</p><p><col> 即单元格的列号 c 。用英文字母表中的 字母 标识。<br>例如，第 1 列用 ‘A’ 表示，第 2 列用 ‘B’ 表示，第 3 列用 ‘C’ 表示，以此类推。</p><p><row> 即单元格的行号 r 。第 r 行就用 整数 r 标识。<br>给你一个格式为 “<col1><row1>:<col2><row2>“ 的字符串 s ，其中 <col1> 表示 c1 列，<row1> 表示 r1 行，<col2> 表示 c2 列，<row2> 表示 r2 行，并满足 r1 &lt;= r2 且 c1 &lt;= c2 。</p><p>找出所有满足 r1 &lt;= x &lt;= r2 且 c1 &lt;= y &lt;= c2 的单元格，并以列表形式返回。单元格应该按前面描述的格式用 字符串 表示，并以 非递减 顺序排列（先按列排，再按行排）。</p><p><strong>示例1：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/ex1drawio.png" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">输入：s &#x3D; &quot;K1:L2&quot;输出：[&quot;K1&quot;,&quot;K2&quot;,&quot;L1&quot;,&quot;L2&quot;]解释：上图显示了列表中应该出现的单元格。红色箭头指示单元格的出现顺序。</code></pre><p><strong>示例2：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/exam2drawio.png" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">输入：s &#x3D; &quot;A1:F1&quot;输出：[&quot;A1&quot;,&quot;B1&quot;,&quot;C1&quot;,&quot;D1&quot;,&quot;E1&quot;,&quot;F1&quot;]解释：上图显示了列表中应该出现的单元格。 红色箭头指示单元格的出现顺序。</code></pre><p><strong>提示：</strong></p><ul><li>s.length == 5</li><li>‘A’ &lt;= s[0] &lt;= s[3] &lt;= ‘Z’</li><li>‘1’ &lt;= s[1] &lt;= s[4] &lt;= ‘9’</li><li>s 由大写英文字母、数字、和 ‘:’ 组成</li></ul><h4 id="题解：模拟"><a href="#题解：模拟" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>直接按照题意模拟即可</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">cellsInRange</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">,</span>r<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> u<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">,</span>d<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>        string str<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>u<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>d<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                str<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>                str<span class="token operator">+=</span>i<span class="token operator">+</span><span class="token char">'A'</span><span class="token punctuation">;</span>str<span class="token operator">+=</span>j<span class="token operator">+</span><span class="token char">'0'</span><span class="token punctuation">;</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="二、向数组中追加-K-个整数"><a href="#二、向数组中追加-K-个整数" class="headerlink" title="二、向数组中追加 K 个整数"></a><a href="https://leetcode-cn.com/problems/append-k-integers-with-minimal-sum/">二、向数组中追加 K 个整数</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给你一个整数数组 nums 和一个整数 k 。请你向 nums 中追加 k 个 未 出现在 nums 中的、互不相同 的 正 整数，并使结果数组的元素和 最小 。</p><p>返回追加到 nums 中的 k 个整数之和。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [1,4,25,10,25], k &#x3D; 2输出：5解释：在该解法中，向数组中追加的两个互不相同且未出现的正整数是 2 和 3 。nums 最终元素和为 1 + 4 + 25 + 10 + 25 + 2 + 3 &#x3D; 70 ，这是所有情况中的最小值。所以追加到数组中的两个整数之和是 2 + 3 &#x3D; 5 ，所以返回 5 。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [5,6], k &#x3D; 6输出：25解释：在该解法中，向数组中追加的两个互不相同且未出现的正整数是 1 、2 、3 、4 、7 和 8 。nums 最终元素和为 5 + 6 + 1 + 2 + 3 + 4 + 7 + 8 &#x3D; 36 ，这是所有情况中的最小值。所以追加到数组中的两个整数之和是 1 + 2 + 3 + 4 + 7 + 8 &#x3D; 25 ，所以返回 25 。</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums.length &lt;= 10^5$</li><li>$1 &lt;= nums[i], k &lt;= 10^9$</li></ul><h4 id="题解：思维"><a href="#题解：思维" class="headerlink" title="题解：思维"></a>题解：思维</h4><p>不妨将题意理解为：<strong>(原来的数组元素中重复元素和始终k大的数的总和sum1+追加进去后的元素总和num)-原来的数组元素总和sum2</strong></p><ul><li>假设原来数组元素均大于k，则只要追加1到k即可</li><li>如果数组中元素存在&lt;=k的情况，则k需要动态的增加</li></ul><p>举个例子。例如示例1中，只存在1小于2，于是k+1=3。我们换种角度，假设数组原来元素中存在小于k的元素，我们不视为在原来数组中，而是在新追加的元素集合中，也就是新追加的元素集合始终为1到k的和（k如上所述随着数组元素的情况而动态改变）。同样对于示例1来说：</p><p>我们可以对最终数组元素总和理解为：(1+2+3)+(4+25+10+25)。</p><p>对于新追加元素集合，直接使用等差数列求和公式即可：$num=\frac{n*(n+1)}{2}$。</p><p>但是需要注意如果原来数组总存在多个&lt;=k的数，且彼此相同，例如：</p><pre class="language-none"><code class="language-none">nums&#x3D;[1,1,2,3,7,8],k&#x3D;2</code></pre><p>对于上述例子，我们只处理一次1，另一个1还是视为原来的数组元素总和。也就是理解为：(1+2+3+4+5)+(1+7+8)。</p><p>于是需要用集合判重，这里采用map。</p><p>当然需要额外对数组排序。</p><p>具体见代码。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">minimalKSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> m<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>k<span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>mp<span class="token punctuation">;</span>mp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    mp<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    ans<span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            sum<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>m<span class="token punctuation">)</span> ans<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ans<span class="token operator">+=</span>m<span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token operator">-</span>sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="三、根据描述创建二叉树"><a href="#三、根据描述创建二叉树" class="headerlink" title="三、根据描述创建二叉树"></a><a href="https://leetcode-cn.com/problems/create-binary-tree-from-descriptions/">三、根据描述创建二叉树</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给你一个二维整数数组 descriptions ，其中 descriptions[i] = [parenti, childi, isLefti] 表示 parenti 是 childi 在 二叉树 中的 父节点，二叉树中各节点的值 互不相同 。此外：</p><p>如果 isLefti == 1 ，那么 childi 就是 parenti 的左子节点。<br>如果 isLefti == 0 ，那么 childi 就是 parenti 的右子节点。<br>请你根据 descriptions 的描述来构造二叉树并返回其 根节点 。</p><p>测试用例会保证可以构造出 有效 的二叉树。</p><p><strong>示例1：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/example1drawio.png" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">输入：descriptions &#x3D; [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]]输出：[50,20,80,15,17,19]解释：根节点是值为 50 的节点，因为它没有父节点。结果二叉树如上图所示。</code></pre><p><strong>示例2：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/example2drawio.png" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">输入：descriptions &#x3D; [[1,2,1],[2,3,0],[3,4,1]]输出：[1,2,null,null,3,4]解释：根节点是值为 1 的节点，因为它没有父节点。 结果二叉树如上图所示。 </code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;= descriptions.length &lt;= 104</li><li>descriptions[i].length == 3</li><li>1 &lt;= parenti, childi &lt;= 105</li><li>0 &lt;= isLefti &lt;= 1</li><li>descriptions 所描述的二叉树是一棵有效二叉树</li></ul><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>通过数组par[]保存节点是否有父节点。数组TreeNode a[]保存所有的树节点。</p><p>遍历descriptions数组，假设当前遍历的元素是x，判断a数组中是否存在x[0]和x[1]，如果不存在则加入a数组中，通过x[2]判断是左孩子或右孩子。</p><p>由于节点数最多为100000，于是遍历1到100000，判断是否存在父节点不存在的情况，若当前节点父节点不存在即为根节点。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for a binary tree node. * struct TreeNode &#123; *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125; * &#125;; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> par<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    TreeNode<span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    TreeNode<span class="token operator">*</span> <span class="token function">createBinaryTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> descriptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>par<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span>descriptions<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> far<span class="token operator">=</span>a<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">?</span>a<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>a<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            TreeNode<span class="token operator">*</span> son<span class="token operator">=</span>a<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">?</span>a<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>a<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                far<span class="token operator">-></span>left<span class="token operator">=</span>son<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                far<span class="token operator">-></span>right<span class="token operator">=</span>son<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            par<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>par<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode第283场周赛题解&quot;&gt;&lt;a href=&quot;#LeetCode第283场周赛题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第283场周赛题解&quot;&gt;&lt;/a&gt;LeetCode第283场周赛题解&lt;/h2&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="LeetCode周赛题解" scheme="http://bbstudy.net/categories/LeetCode%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode第280场周赛</title>
    <link href="http://bbstudy.net/weekly-contest-280/"/>
    <id>http://bbstudy.net/weekly-contest-280/</id>
    <published>2022-09-07T13:19:54.957Z</published>
    <updated>2022-02-13T04:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode第280场周赛题解"><a href="#LeetCode第280场周赛题解" class="headerlink" title="LeetCode第280场周赛题解"></a>LeetCode第280场周赛题解</h2><blockquote><p>比赛地址：<a href="https://leetcode-cn.com/contest/weekly-contest-280/">https://leetcode-cn.com/contest/weekly-contest-280/</a></p></blockquote><h3 id="一、得到-0-的操作数"><a href="#一、得到-0-的操作数" class="headerlink" title="一、得到 0 的操作数"></a><a href="https://leetcode-cn.com/problems/count-operations-to-obtain-zero/">一、得到 0 的操作数</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给你两个 非负 整数 num1 和 num2 。</p><p>每一步 操作 中，如果 num1 &gt;= num2 ，你必须用 num1 减 num2 ；否则，你必须用 num2 减 num1 。</p><p>例如，num1 = 5 且 num2 = 4 ，应该用 num1 减 num2 ，因此，得到 num1 = 1 和 num2 = 4 。然而，如果 num1 = 4且 num2 = 5 ，一步操作后，得到 num1 = 4 和 num2 = 1 。<br>返回使 num1 = 0 或 num2 = 0 的 操作数 。</p><p><strong>示例1：</strong></p><blockquote><p>输入：num1 = 2, num2 = 3<br>输出：3<br>解释：</p><ul><li>操作 1 ：num1 = 2 ，num2 = 3 。由于 num1 &lt; num2 ，num2 减 num1 得到 num1 = 2 ，num2 = 3 - 2 = 1 。</li><li>操作 2 ：num1 = 2 ，num2 = 1 。由于 num1 &gt; num2 ，num1 减 num2 。</li><li>操作 3 ：num1 = 1 ，num2 = 1 。由于 num1 == num2 ，num1 减 num2 。<br>此时 num1 = 0 ，num2 = 1 。由于 num1 == 0 ，不需要再执行任何操作。<br>所以总操作数是 3 。</li></ul></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：num1 = 10, num2 = 10<br>输出：1<br>解释：</p><ul><li>操作 1 ：num1 = 10 ，num2 = 10 。由于 num1 == num2 ，num1 减 num2 得到 num1 = 10 - 10 = 0 。<br>此时 num1 = 0 ，num2 = 10 。由于 num1 == 0 ，不需要再执行任何操作。<br>所以总操作数是 1 。</li></ul></blockquote><p><strong>提示：</strong></p><ul><li>$0 &lt;= num1, num2 &lt;= 10^5$</li></ul><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>直接按照题意模拟即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countOperations</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num1<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>num2<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num1<span class="token operator">>=</span>num2<span class="token punctuation">)</span> num1<span class="token operator">-=</span>num2<span class="token punctuation">;</span>            <span class="token keyword">else</span> num2<span class="token operator">-=</span>num1<span class="token punctuation">;</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="二、使数组变成交替数组的最少操作数"><a href="#二、使数组变成交替数组的最少操作数" class="headerlink" title="二、使数组变成交替数组的最少操作数"></a><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-the-array-alternating/">二、使数组变成交替数组的最少操作数</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给你一个下标从 0 开始的数组 nums ，该数组由 n 个正整数组成。</p><p>如果满足下述条件，则数组 nums 是一个 交替数组 ：</p><p>nums[i - 2] == nums[i] ，其中 2 &lt;= i &lt;= n - 1 。<br>nums[i - 1] != nums[i] ，其中 1 &lt;= i &lt;= n - 1 。<br>在一步 操作 中，你可以选择下标 i 并将 nums[i] 更改 为 任一 正整数。</p><p>返回使数组变成交替数组的 最少操作数 。</p><p><strong>示例1：</strong></p><blockquote><p>输入：nums = [3,1,3,2,4,3]<br>输出：3<br>解释：<br>使数组变成交替数组的方法之一是将该数组转换为 [3,1,3,1,3,1] 。<br>在这种情况下，操作数为 3 。<br>可以证明，操作数少于 3 的情况下，无法使数组变成交替数组。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：nums = [1,2,2,2,2]<br>输出：2<br>解释：<br>使数组变成交替数组的方法之一是将该数组转换为 [1,2,1,2,1].<br>在这种情况下，操作数为 2 。<br>注意，数组不能转换成 [2,2,2,2,2] 。因为在这种情况下，nums[0] == nums[1]，不满足交替数组的条件。</p></blockquote><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums.length &lt;= 10^5$</li><li>$1 &lt;= nums[i] &lt;= 10^5$</li></ul><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>题目要求将数组转化为交替数组（即奇、偶数下标所有数值相同，但两者相互不同）。要求操作次数最小值，转化为求两个不相同数值集合的个数最大值即可，具体见代码。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimumOperations</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp1<span class="token punctuation">,</span>mp2<span class="token punctuation">;</span>   <span class="token comment">//奇 偶下标集合</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> mp1<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> mp2<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> num1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>num2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//偶数下标出现最多和次多的数字</span>        <span class="token keyword">int</span> cnt1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cnt2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//对应的次数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span><span class="token operator">:</span>mp1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">>=</span>cnt1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                num2<span class="token operator">=</span>num1<span class="token punctuation">;</span>cnt2<span class="token operator">=</span>cnt1<span class="token punctuation">;</span>                num1<span class="token operator">=</span>k<span class="token punctuation">,</span>cnt1<span class="token operator">=</span>v<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">>=</span>cnt2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cnt2<span class="token operator">=</span>v<span class="token punctuation">;</span>num2<span class="token operator">=</span>k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span><span class="token operator">:</span>mp2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>num1<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>cnt2<span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>cnt1<span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> n<span class="token operator">-</span>ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="三、拿出最少数目的魔法豆"><a href="#三、拿出最少数目的魔法豆" class="headerlink" title="三、拿出最少数目的魔法豆"></a><a href="https://leetcode-cn.com/problems/removing-minimum-number-of-magic-beans/">三、拿出最少数目的魔法豆</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给你一个 正 整数数组 beans ，其中每个整数表示一个袋子里装的魔法豆的数目。</p><p>请你从每个袋子中 拿出 一些豆子（也可以 不拿出），使得剩下的 非空 袋子中（即 至少 还有 一颗 魔法豆的袋子）魔法豆的数目 相等 。一旦魔法豆从袋子中取出，你不能将它放到任何其他的袋子中。</p><p>请你返回你需要拿出魔法豆的 最少数目。</p><p><strong>示例1：</strong></p><blockquote><p>输入：beans = [4,1,6,5]<br>输出：4<br>解释：</p><ul><li>我们从有 1 个魔法豆的袋子中拿出 1 颗魔法豆。<br>剩下袋子中魔法豆的数目为：[4,0,6,5]</li><li>然后我们从有 6 个魔法豆的袋子中拿出 2 个魔法豆。<br>剩下袋子中魔法豆的数目为：[4,0,4,5]</li><li>然后我们从有 5 个魔法豆的袋子中拿出 1 个魔法豆。<br>剩下袋子中魔法豆的数目为：[4,0,4,4]<br>总共拿出了 1 + 2 + 1 = 4 个魔法豆，剩下非空袋子中魔法豆的数目相等。<br>没有比取出 4 个魔法豆更少的方案。</li></ul></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：beans = [2,10,3,2]<br>输出：7<br>解释：</p><ul><li>我们从有 2 个魔法豆的其中一个袋子中拿出 2 个魔法豆。<br>剩下袋子中魔法豆的数目为：[0,10,3,2]</li><li>然后我们从另一个有 2 个魔法豆的袋子中拿出 2 个魔法豆。<br>剩下袋子中魔法豆的数目为：[0,10,3,0]</li><li>然后我们从有 3 个魔法豆的袋子中拿出 3 个魔法豆。<br>剩下袋子中魔法豆的数目为：[0,10,0,0]<br>总共拿出了 2 + 2 + 3 = 7 个魔法豆，剩下非空袋子中魔法豆的数目相等。<br>没有比取出 7 个魔法豆更少的方案。</li></ul></blockquote><p><strong>提示：</strong></p><ul><li>$1 &lt;= beans.length &lt;= 10^5$</li><li>$1 &lt;= beans[i] &lt;= 10^5$</li></ul><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>先将数组从小到大排序，然后枚举每一袋，假设当前袋beans[i]的数量为最终结果的数量，则前面所有的袋子都要为0，后面的袋子需要减少至beans[i]。</p><p>如果通过二重遍历删除显然时间不够，于是引入<strong>前缀和</strong>实现。具体见代码</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">minimumRemoval</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> beans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>beans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>beans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>beans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>beans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>beans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>beans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>beans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>beans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode第280场周赛题解&quot;&gt;&lt;a href=&quot;#LeetCode第280场周赛题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第280场周赛题解&quot;&gt;&lt;/a&gt;LeetCode第280场周赛题解&lt;/h2&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="LeetCode周赛题解" scheme="http://bbstudy.net/categories/LeetCode%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode第286场周赛</title>
    <link href="http://bbstudy.net/weekly-contest-286/"/>
    <id>http://bbstudy.net/weekly-contest-286/</id>
    <published>2022-09-07T13:19:54.957Z</published>
    <updated>2022-03-28T02:32:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode第286场周赛题解"><a href="#LeetCode第286场周赛题解" class="headerlink" title="LeetCode第286场周赛题解"></a>LeetCode第286场周赛题解</h2><blockquote><p>比赛地址：<a href="https://leetcode-cn.com/contest/weekly-contest-286/">https://leetcode-cn.com/contest/weekly-contest-286/</a></p></blockquote><p><strong>四题双百解法</strong></p><h3 id="一、找出两数组的不同"><a href="#一、找出两数组的不同" class="headerlink" title="一、找出两数组的不同"></a><a href="https://leetcode-cn.com/problems/find-the-difference-of-two-arrays/">一、找出两数组的不同</a></h3><p>给你两个下标从 0 开始的整数数组 nums1 和 nums2 ，请你返回一个长度为 2 的列表 answer ，其中：</p><p>answer[0] 是 nums1 中所有 不 存在于 nums2 中的 不同 整数组成的列表。<br>answer[1] 是 nums2 中所有 不 存在于 nums1 中的 不同 整数组成的列表。<br>注意：列表中的整数可以按 任意 顺序返回。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：nums1 &#x3D; [1,2,3], nums2 &#x3D; [2,4,6]输出：[[1,3],[4,6]]解释：对于 nums1 ，nums1[1] &#x3D; 2 出现在 nums2 中下标 0 处，然而 nums1[0] &#x3D; 1 和 nums1[2] &#x3D; 3 没有出现在 nums2 中。因此，answer[0] &#x3D; [1,3]。对于 nums2 ，nums2[0] &#x3D; 2 出现在 nums1 中下标 1 处，然而 nums2[1] &#x3D; 4 和 nums2[2] &#x3D; 6 没有出现在 nums2 中。因此，answer[1] &#x3D; [4,6]。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：nums1 &#x3D; [1,2,3,3], nums2 &#x3D; [1,1,2,2]输出：[[3],[]]解释：对于 nums1 ，nums1[2] 和 nums1[3] 没有出现在 nums2 中。由于 nums1[2] &#x3D;&#x3D; nums1[3] ，二者的值只需要在 answer[0] 中出现一次，故 answer[0] &#x3D; [3]。nums2 中的每个整数都在 nums1 中出现，因此，answer[1] &#x3D; [] 。 </code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>-1000 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><h4 id="题解：集合"><a href="#题解：集合" class="headerlink" title="题解：集合"></a>题解：集合</h4><p>使用两个set集合分别存储nums1和nums2出现的元素。</p><p>寻找<code>nums1</code> 中所有 <strong>不</strong> 存在于 <code>nums2</code> 中的 <strong>不同</strong> 整数组成的列表：只需要遍历set1（存储nums1出现的元素集合），判断当前元素是否存在与set2（存储nums2出现的元素集合），不存在则加入值answer[0]数组中。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">findDifference</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st1<span class="token punctuation">,</span>st2<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token operator">=</span>nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            st1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            st2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span>st1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>st2<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span>st2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>st1<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="二、美化数组的最少删除数"><a href="#二、美化数组的最少删除数" class="headerlink" title="二、美化数组的最少删除数"></a><a href="https://leetcode-cn.com/problems/minimum-deletions-to-make-array-beautiful/">二、美化数组的最少删除数</a></h3><p>给你一个下标从 0 开始的整数数组 nums ，如果满足下述条件，则认为数组 nums 是一个 美丽数组 ：</p><p>nums.length 为偶数<br>对所有满足 i % 2 == 0 的下标 i ，nums[i] != nums[i + 1] 均成立<br>注意，空数组同样认为是美丽数组。</p><p>你可以从 nums 中删除任意数量的元素。当你删除一个元素时，被删除元素右侧的所有元素将会向左移动一个单位以填补空缺，而左侧的元素将会保持 不变 。</p><p>返回使 nums 变为美丽数组所需删除的 最少 元素数目。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [1,1,2,3,5]输出：1解释：可以删除 nums[0] 或 nums[1] ，这样得到的 nums &#x3D; [1,2,3,5] 是一个美丽数组。可以证明，要想使 nums 变为美丽数组，至少需要删除 1 个元素。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [1,1,2,2,3,3]输出：2解释：可以删除 nums[0] 和 nums[5] ，这样得到的 nums &#x3D; [1,2,2,3] 是一个美丽数组。可以证明，要想使 nums 变为美丽数组，至少需要删除 2 个元素。</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums.length &lt;= 10^5$</li><li>$0 &lt;= nums[i] &lt;= 10^5$</li></ul><h4 id="题解：贪心"><a href="#题解：贪心" class="headerlink" title="题解：贪心"></a>题解：贪心</h4><p>当出现<code>nums[i]==nums[i+1]</code>且<code>i%2==0</code>时，无论删除nums[i]还是nums[i+1]其实结果一样。</p><ul><li>删除nums[i],num[i+1]前移，此时<code>(i+1)%2==0</code>需要和nums[i+2]比较</li><li>删除nums[i+1],<code>i%2==0</code>，同样需要和nums[i+2]比较</li></ul><p>于是我们只需要遍历数组，对于每个<code>nums[i]==nums[i+1]</code>且<code>i%2==0</code>的情况计数加一，同时更新后面元素的下标即可。可以通过一个变量cnt记录需要删除元素的个数，同样对于随后的下标，只需要更新至<code>i-cnt</code>即可。</p><p>当然还需要判断最终的数组元素是否为偶数个。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minDeletion</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> p<span class="token operator">=</span>i<span class="token operator">-</span>cnt<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">-</span>cnt<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="三、找到指定长度的回文数"><a href="#三、找到指定长度的回文数" class="headerlink" title="三、找到指定长度的回文数"></a><a href="https://leetcode-cn.com/problems/find-palindrome-with-fixed-length/">三、找到指定长度的回文数</a></h3><p>给你一个整数数组 queries 和一个 正 整数 intLength ，请你返回一个数组 answer ，其中 answer[i] 是长度为 intLength 的 正回文数 中第 queries[i] 小的数字，如果不存在这样的回文数，则为 -1 。</p><p>回文数 指的是从前往后和从后往前读一模一样的数字。回文数不能有前导 0 。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：queries &#x3D; [1,2,3,4,5,90], intLength &#x3D; 3输出：[101,111,121,131,141,999]解释：长度为 3 的最小回文数依次是：101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 201, ...第 90 个长度为 3 的回文数是 999 。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：queries &#x3D; [2,4,6], intLength &#x3D; 4输出：[1111,1331,1551]解释：长度为 4 的前 6 个回文数是：1001, 1111, 1221, 1331, 1441 和 1551 。</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= queries.length &lt;= 5 * 10^4$</li><li>$1 &lt;= queries[i] &lt;= 10^9$</li><li>$1 &lt;= intLength &lt;= 15$</li></ul><h4 id="题解：数学"><a href="#题解：数学" class="headerlink" title="题解：数学"></a>题解：数学</h4><p>通过题意发现，最终结果不会超long long，于是我们可以直接通过数字计算。</p><p>将<code>intLength</code>除2（<code>intLength</code>为奇数，则需要加1），由于是求回文数，于是我们只处理前一半数字即可。</p><p>对于样例1：</p><ul><li>intLength=3，则len=intLength/2+1=2，用某一变量x存储后一半需要添加的数字，</li><li>于是我们只需要考虑前两位数字，最小为10，此时x为1</li><li>当我们需要计算此时第k小的回文数时，我们只需要对前面元素+(k-1)即可，例如求第3小的元素，此时前一半为10+2=12，后一半x为1，组合为121</li></ul><p>对于样例2：</p><ul><li>intLength=4，则len=intLength/2=2，用某一变量x存储后一半需要添加的数组</li><li>于是我们只考虑前两位数字，最小为10，此时x为1，</li><li>当我们需要计算此时第k小的回文数时，我们只需要对前面元素+(k-1)即可，例如求第3小的元素，此时前一半为10+2=12，后一半x为21，组合为1221</li></ul><p>当然不要忘记考虑-1的情况。</p><p>具体见代码：</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>    <span class="token comment">//得到后一半数字</span>    ll <span class="token function">get_num</span><span class="token punctuation">(</span><span class="token keyword">int</span> first_past<span class="token punctuation">,</span><span class="token keyword">int</span> flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果是奇数为，则需要只需考虑前一半的n-1位（n为前一半数字的位数）</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> first_past<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>        ll res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>first_past<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token operator">=</span>res<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>first_past<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            first_past<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token function">kthPalindrome</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> queries<span class="token punctuation">,</span> <span class="token keyword">int</span> intLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>ll<span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>queries<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>intLength<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span>intLength<span class="token operator">%</span><span class="token number">2</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">++</span>m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ll cnt<span class="token operator">=</span>queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//前一半数字</span>            ll first_past<span class="token operator">=</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>cnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// cout&lt;&lt;first_past&lt;&lt;"---"&lt;&lt;pow(10,m)&lt;&lt;endl;</span>            <span class="token comment">//如果前一半的数字都超过m位，则返回-1</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>first_past<span class="token operator">>=</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//后一半数字</span>            ll last_past<span class="token operator">=</span><span class="token function">get_num</span><span class="token punctuation">(</span>first_past<span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//当前第k小的数字</span>            ll num<span class="token operator">=</span>first_past<span class="token operator">*</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> num<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>            num<span class="token operator">+=</span>last_past<span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="四、从栈中取出-K-个硬币的最大面值和"><a href="#四、从栈中取出-K-个硬币的最大面值和" class="headerlink" title="四、从栈中取出 K 个硬币的最大面值和"></a><a href="https://leetcode-cn.com/problems/maximum-value-of-k-coins-from-piles/">四、从栈中取出 K 个硬币的最大面值和</a></h3><p>一张桌子上总共有 n 个硬币 栈 。每个栈有 正整数 个带面值的硬币。</p><p>每一次操作中，你可以从任意一个栈的 顶部 取出 1 个硬币，从栈中移除它，并放入你的钱包里。</p><p>给你一个列表 piles ，其中 piles[i] 是一个整数数组，分别表示第 i 个栈里 从顶到底 的硬币面值。同时给你一个正整数 k ，请你返回在 恰好 进行 k 次操作的前提下，你钱包里硬币面值之和 最大为多少 。</p><p><strong>示例1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/11/09/e1.png" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">输入：piles &#x3D; [[1,100,3],[7,8,9]], k &#x3D; 2输出：101解释：上图展示了几种选择 k 个硬币的不同方法。我们可以得到的最大面值为 101 。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：piles &#x3D; [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k &#x3D; 7输出：706解释：如果我们所有硬币都从最后一个栈中取，可以得到最大面值和。</code></pre><p><strong>提示：</strong></p><ul><li>$n == piles.length$</li><li>$1 &lt;= n &lt;= 1000$</li><li>$1 &lt;= piles[i][j] &lt;= 10^5$</li><li>$1 &lt;= k &lt;= sum(piles[i].length) &lt;= 2000$</li></ul><h4 id="题解：分组背包dp"><a href="#题解：分组背包dp" class="headerlink" title="题解：分组背包dp"></a>题解：分组背包dp</h4><p><img src="https://s1.ax1x.com/2022/03/28/qDY76I.png" alt="qDY76I.png" loading="lazy"></p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">maxValueOfCoins</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> piles<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>piles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token operator">-</span>inf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> sum<span class="token punctuation">;</span>sum<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//前缀和</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>piles<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> sum<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">&lt;</span>sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>p<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>p<span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode第286场周赛题解&quot;&gt;&lt;a href=&quot;#LeetCode第286场周赛题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第286场周赛题解&quot;&gt;&lt;/a&gt;LeetCode第286场周赛题解&lt;/h2&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="LeetCode周赛题解" scheme="http://bbstudy.net/categories/LeetCode%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode第289场周赛</title>
    <link href="http://bbstudy.net/weekly-contest-289/"/>
    <id>http://bbstudy.net/weekly-contest-289/</id>
    <published>2022-09-07T13:19:54.957Z</published>
    <updated>2022-04-30T03:29:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode第289场周赛题解"><a href="#LeetCode第289场周赛题解" class="headerlink" title="LeetCode第289场周赛题解"></a>LeetCode第289场周赛题解</h2><blockquote><p>比赛地址：<a href="https://leetcode-cn.com/contest/weekly-contest-289/">https://leetcode-cn.com/contest/weekly-contest-289/</a></p></blockquote><h3 id="一、计算字符串的数字和"><a href="#一、计算字符串的数字和" class="headerlink" title="一、计算字符串的数字和"></a><a href="https://leetcode-cn.com/problems/calculate-digit-sum-of-a-string/">一、计算字符串的数字和</a></h3><h4 id="题解：模拟"><a href="#题解：模拟" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>不断迭代字符串，如果长度超过k则进行划分然后按照题意求和相加，直到最终字符串长度小于k，结束循环。</p><p>注意：最后一组可能长度小于k，所以需要和字符串长度比较选择最小值（防止越界）。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">digitSum</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            string str<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">+=</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token operator">+</span>k<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    num<span class="token operator">+=</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                str<span class="token operator">+=</span><span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            s<span class="token operator">=</span>str<span class="token punctuation">;</span>n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="二、完成所有任务需要的最少轮数"><a href="#二、完成所有任务需要的最少轮数" class="headerlink" title="二、完成所有任务需要的最少轮数"></a><a href="https://leetcode-cn.com/problems/minimum-rounds-to-complete-all-tasks/">二、完成所有任务需要的最少轮数</a></h3><h4 id="题解：贪心-哈希"><a href="#题解：贪心-哈希" class="headerlink" title="题解：贪心+哈希"></a>题解：贪心+哈希</h4><p>由于每次可以完成2个或者3个相同难度级别的任务，于是可以知道：假设难度级别为i的任务有n个，</p><ul><li>如果n==1，则始终无法完成任务</li><li>n\==2 或n==3，需要一次便可完成</li><li>n&gt;=3时，完成次数以3为周期（即：4,5,6需要2次，7,8,9需要3次…）</li></ul><p>于是对于n&gt;=3的情况，只需要向上取整即可（为方便处理，只需要(n+2)/3即可）</p><p>同时使用哈希表存储每个难度级别对应的任务数量。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimumRounds</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> tasks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>tasks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>mp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mp<span class="token punctuation">[</span>tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">:</span>mp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>second<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            ans<span class="token operator">+=</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>second<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="三、转角路径的乘积中最多能有几个尾随零"><a href="#三、转角路径的乘积中最多能有几个尾随零" class="headerlink" title="三、转角路径的乘积中最多能有几个尾随零"></a><a href="https://leetcode-cn.com/problems/maximum-trailing-zeros-in-a-cornered-path/">三、转角路径的乘积中最多能有几个尾随零</a></h3><h4 id="题解：前缀和-枚举"><a href="#题解：前缀和-枚举" class="headerlink" title="题解：前缀和+枚举"></a>题解：前缀和+枚举</h4><blockquote><p>参考链接：<a href="https://leetcode-cn.com/problems/maximum-trailing-zeros-in-a-cornered-path/solution/by-tsreaper-ukq5/">https://leetcode-cn.com/problems/maximum-trailing-zeros-in-a-cornered-path/solution/by-tsreaper-ukq5/</a></p></blockquote><p>需要求乘积中最多尾随零的个数，只需要转化为每个数的因子对应的 2和5的和的最小值即可。</p><p>做乘法运算时，随着乘数的增加，尾随零的个数只会增加不会减少，于是可以从二维数组的其中一个角出发，到另一个角结束（期间只拐一次弯，不走已经走过的单元格）</p><p>可以先用前缀和存储每一行和每一列因子2和因子5的个数，再枚举拐点计算答案。</p><blockquote><p>还是比较复杂….</p></blockquote><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxTrailingZeros</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token operator">=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//每一行、每一列2和5的数量的前缀和</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">r2</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">c2</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r5</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">c5</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            r2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>r5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>c5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> cnt2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cnt5<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> now<span class="token operator">=</span>grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>now<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cnt2<span class="token operator">++</span><span class="token punctuation">,</span>now<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>now<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cnt5<span class="token operator">++</span><span class="token punctuation">,</span>now<span class="token operator">/=</span><span class="token number">5</span><span class="token punctuation">;</span>                r2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>r2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>cnt2<span class="token punctuation">;</span>                c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>c2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>cnt2<span class="token punctuation">;</span>                r5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>r5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>cnt5<span class="token punctuation">;</span>                c5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>c5<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>cnt5<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//左--->上方结束</span>                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>r2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>r5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c5<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//左--->下方结束</span>                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>r2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>c2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>r5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c5<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>c5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//右--->上方结束</span>                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>r2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">-</span>r2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>r5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">-</span>r5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//右--->下方结束</span>                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>r2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">-</span>r2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>c2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>r5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">-</span>r5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>c5<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>c5<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="四、相邻字符不同的最长路径"><a href="#四、相邻字符不同的最长路径" class="headerlink" title="四、相邻字符不同的最长路径"></a><a href="https://leetcode-cn.com/problems/longest-path-with-different-adjacent-characters/">四、相邻字符不同的最长路径</a></h3><h4 id="题解：树的直径（树形dp）"><a href="#题解：树的直径（树形dp）" class="headerlink" title="题解：树的直径（树形dp）"></a>题解：树的直径（树形dp）</h4><p>题目需要求任意相邻结点不取相同字符的最长路径，便可转化为：对于每一个结点，以该结点为根节点，在满足题意的情况下求子树的直径。然后不断回溯，从而求出整棵树在满足题意情况下的最长直径。</p><p>通过dfs遍历即可。</p><p>注意：需要将如：字符串、存储图（树）的二维数组等比较大的变量作为全局变量<del>（别问怎么知道的…）</del></p><p>具体见代码注释。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> edge<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dis<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//dis[i]：表示以结点i为根结点的最大深度</span>    string str<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//找出以当前结点为根节点的最大深度和次大深度</span>        <span class="token keyword">int</span> second_dis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//次大深度</span>        dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> v<span class="token operator">=</span>edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">==</span>str<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">></span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//求以u结点为根结点的最大深度</span>                second_dis<span class="token operator">=</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>                dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                second_dis<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>second_dis<span class="token punctuation">,</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//更新次大深度</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token comment">//在上述操作中，并未考虑自身结点也在路径中</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>second_dis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">longestPath</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> parent<span class="token punctuation">,</span> string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>parent<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str<span class="token operator">=</span>s<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            edge<span class="token punctuation">[</span>parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode第289场周赛题解&quot;&gt;&lt;a href=&quot;#LeetCode第289场周赛题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第289场周赛题解&quot;&gt;&lt;/a&gt;LeetCode第289场周赛题解&lt;/h2&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="LeetCode周赛题解" scheme="http://bbstudy.net/categories/LeetCode%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode第290场周赛</title>
    <link href="http://bbstudy.net/weekly-contest-290/"/>
    <id>http://bbstudy.net/weekly-contest-290/</id>
    <published>2022-09-07T13:19:54.957Z</published>
    <updated>2022-04-30T08:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode第290场周赛题解"><a href="#LeetCode第290场周赛题解" class="headerlink" title="LeetCode第290场周赛题解"></a>LeetCode第290场周赛题解</h2><blockquote><p>比赛地址：<a href="https://leetcode-cn.com/contest/weekly-contest-290/">https://leetcode-cn.com/contest/weekly-contest-290/</a></p></blockquote><h3 id="一、多个数组求交集"><a href="#一、多个数组求交集" class="headerlink" title="一、多个数组求交集"></a><a href="https://leetcode-cn.com/problems/intersection-of-multiple-arrays/">一、多个数组求交集</a></h3><h4 id="题解：哈希表"><a href="#题解：哈希表" class="headerlink" title="题解：哈希表"></a>题解：哈希表</h4><p>由于题目要求每个元素在nums所有数组中都出现过，并返回它们。于是不妨将所有元素存入与一个哈希表中：key表示nums所有数组中的各个元素，value对应它们在几个数组中出现过</p><p>由于题目说明了nums中所有数组都是由不同正整数组成，所以对于value的处理更加简单了，只需要判断出现过多少次即可。</p><p>如果value等于nums数组的个数则满足题意。由于c++ map自动对key按照从小到大排序，进一步满足题目要求，只需遍历一遍map即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">intersection</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>mp<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                mp<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">:</span>mp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>second<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="二、统计圆内格点数目"><a href="#二、统计圆内格点数目" class="headerlink" title="二、统计圆内格点数目"></a><a href="https://leetcode-cn.com/problems/count-lattice-points-inside-a-circle/">二、统计圆内格点数目</a></h3><h4 id="题意：简单数学"><a href="#题意：简单数学" class="headerlink" title="题意：简单数学"></a>题意：简单数学</h4><p>已知圆心坐标以及半径，只需判断当前点到圆心的距离与半径的大小关系即可：</p><ul><li>到圆心的距离小于等于半径，则在圆内部</li><li>否则在圆外部</li></ul><p>对于点的遍历，可以直接已圆心为中心点，计算它对应的正方形的所有坐标即可。</p><p>可以用map或set集合存储所有满足条件点的个数。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countLatticePoints</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> circles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>circles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r<span class="token punctuation">;</span>        pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> now<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            x<span class="token operator">=</span>circles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>y<span class="token operator">=</span>circles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>r<span class="token operator">=</span>circles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> xx<span class="token operator">=</span>x<span class="token operator">-</span>r<span class="token punctuation">;</span>xx<span class="token operator">&lt;=</span>x<span class="token operator">+</span>r<span class="token punctuation">;</span>xx<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> yy<span class="token operator">=</span>y<span class="token operator">-</span>r<span class="token punctuation">;</span>yy<span class="token operator">&lt;=</span>y<span class="token operator">+</span>r<span class="token punctuation">;</span>yy<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xx<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>xx<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>yy<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>yy<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">></span>r<span class="token operator">*</span>r<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                    now<span class="token punctuation">.</span>first<span class="token operator">=</span>xx<span class="token punctuation">;</span>now<span class="token punctuation">.</span>second<span class="token operator">=</span>yy<span class="token punctuation">;</span>                    mp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> mp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="三、统计包含每个点的矩形数目"><a href="#三、统计包含每个点的矩形数目" class="headerlink" title="三、统计包含每个点的矩形数目"></a><a href="https://leetcode-cn.com/problems/count-number-of-rectangles-containing-each-point/">三、统计包含每个点的矩形数目</a></h3><h4 id="题解：排序-二分"><a href="#题解：排序-二分" class="headerlink" title="题解：排序+二分"></a>题解：排序+二分</h4><p>给定若干个矩形，矩形的坐标为：左下角均在二维坐标系原点位置，给定右上角的坐标。然后给出若干点的坐标，判断每个点被多少个矩形所包含，返回一个整数数组即可。</p><p>由于题目给定y坐标最大为100，于是考虑对y坐标进行存储，第二维则存储纵坐标相同情况下，所有的点横坐标的信息。</p><p>然后对横坐标进行排序。遍历所有的点，假设当前遍历的点的纵坐标为y，由于y最大为100，直接暴力枚举$j(y&lt;=j&lt;=100)$，再求出所有矩形右上角纵坐标坐标为j时，横坐标大于等于当前遍历的点的横坐标x的矩形个数（二分查找，直接暴力查找会超时）。具体见代码：</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countRectangles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rectangles<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存储所有的坐标，纵坐标为第一维，横坐标为第二维，即存储纵坐标对应的对应的所有横坐标集合</span>        <span class="token comment">//y最大为100</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> arr<span class="token operator">:</span>rectangles<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//对相同纵坐标的横坐标按照从小到大排序</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            x<span class="token operator">=</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>y<span class="token operator">=</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//首先满足矩形的高度大于等于纵坐标</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>y<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//二分查找第一个大于等于当前横坐标的索引</span>                    ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="四、花期内花的数目"><a href="#四、花期内花的数目" class="headerlink" title="四、花期内花的数目"></a><a href="https://leetcode-cn.com/problems/number-of-flowers-in-full-bloom/">四、花期内花的数目</a></h3><h4 id="题解：转换-排序"><a href="#题解：转换-排序" class="headerlink" title="题解：转换+排序"></a>题解：转换+排序</h4><p>需要求每个人到达时能看到花的个数，直接转换为：花期开始时间小于等于当前时间花的个数  -  花期结束时间大于等于当前时间花的个数。</p><p>为了方便查找，直接存储所有花开始的时间和结束的时间，然后排序即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">fullBloomFlowers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> flowers<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> persons<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>persons<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>flowers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//记录每朵花开始的时间和结束的时间</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stime<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> etime<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span>flowers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stime<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            etime<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>stime<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stime<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>etime<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>etime<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//当前时间>=花期开始的时间的花的个数  - 当前时间&lt;=花期结束的时间花的个数</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>stime<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stime<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>persons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>stime<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>etime<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>etime<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>persons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>etime<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode第290场周赛题解&quot;&gt;&lt;a href=&quot;#LeetCode第290场周赛题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第290场周赛题解&quot;&gt;&lt;/a&gt;LeetCode第290场周赛题解&lt;/h2&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="LeetCode周赛题解" scheme="http://bbstudy.net/categories/LeetCode%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode第267场周赛</title>
    <link href="http://bbstudy.net/weekly-contest-267/"/>
    <id>http://bbstudy.net/weekly-contest-267/</id>
    <published>2022-09-07T13:19:54.955Z</published>
    <updated>2021-11-15T14:29:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode第267场周赛题解"><a href="#LeetCode第267场周赛题解" class="headerlink" title="LeetCode第267场周赛题解"></a>LeetCode第267场周赛题解</h2><blockquote><p>比赛地址：<a href="https://leetcode-cn.com/contest/weekly-contest-267/">https://leetcode-cn.com/contest/weekly-contest-267/</a></p></blockquote><h3 id="一、买票需要的时间"><a href="#一、买票需要的时间" class="headerlink" title="一、买票需要的时间"></a>一、买票需要的时间</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>有 n 个人前来排队买票，其中第 0 人站在队伍 最前方 ，第 (n - 1) 人站在队伍 最后方 。</p><p>给你一个下标从 0 开始的整数数组 tickets ，数组长度为 n ，其中第 i 人想要购买的票数为 tickets[i] 。</p><p>每个人买票都需要用掉 恰好 1 秒 。一个人 一次只能买一张票 ，如果需要购买更多票，他必须走到  队尾 重新排队（瞬间 发生，不计时间）。如果一个人没有剩下需要买的票，那他将会 离开 队伍。</p><p>返回位于位置 k（下标从 0 开始）的人完成买票需要的时间（以秒为单位）。</p><p><strong>提示：</strong></p><ul><li><code>n == tickets.length</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= tickets[i] &lt;= 100</code></li><li><code>0 &lt;= k &lt; n</code></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p>输入：tickets = [2,3,2], k = 2<br>输出：6<br>解释： </p><ul><li><p>第一轮，队伍中的每个人都买到一张票，队伍变为 [1, 2, 1] 。</p></li><li><p>第二轮，队伍中的每个都又都买到一张票，队伍变为 [0, 1, 0] 。</p><p>位置 2 的人成功买到 2 张票，用掉 3 + 3 = 6 秒。</p></li></ul></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：tickets = [5,1,1,1], k = 0<br>输出：8<br>解释：</p><ul><li>第一轮，队伍中的每个人都买到一张票，队伍变为 [4, 0, 0, 0] 。</li><li>接下来的 4 轮，只有位置 0 的人在买票。<br>位置 0 的人成功买到 5 张票，用掉 4 + 1 + 1 + 1 + 1 = 8 秒。</li></ul></blockquote><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>数据量小，直接暴力即可。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">timeRequiredToBuy</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> tickets<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>tickets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tickets<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tickets<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tickets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> tickets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">,</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> i<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="二、反转偶数长度组的节点"><a href="#二、反转偶数长度组的节点" class="headerlink" title="二、反转偶数长度组的节点"></a>二、反转偶数长度组的节点</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给你一个链表的头节点 head 。</p><p>链表中的节点 按顺序 划分成若干 非空 组，这些非空组的长度构成一个自然数序列（1, 2, 3, 4, …）。一个组的 长度 就是组中分配到的节点数目。换句话说：</p><p>节点 1 分配给第一组<br>节点 2 和 3 分配给第二组<br>节点 4、5 和 6 分配给第三组，以此类推<br>注意，最后一组的长度可能小于或者等于 1 + 倒数第二组的长度 。</p><p>反转 每个 偶数 长度组中的节点，并返回修改后链表的头节点 head 。</p><p><strong>提示</strong></p><ul><li>链表中节点数目范围是 <code>[1, 105]</code></li><li><code>0 &lt;= Node.val &lt;= 105</code></li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/eg1.png" alt="img" loading="lazy"></p><p>输入：head = [5,2,6,3,9,1,7,3,8,4]<br>输出：[5,6,2,3,9,1,4,8,3,7]<br>解释：</p><ul><li>第一组长度为 1 ，奇数，没有发生反转。</li><li>第二组长度为 2 ，偶数，节点反转。</li><li>第三组长度为 3 ，奇数，没有发生反转。</li><li>最后一组长度为 4 ，偶数，节点反转。</li></ul></blockquote><p><strong>示例2：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/eg2.png" alt="img" loading="lazy"></p><p>输入：head = [1,1,0,6]<br>输出：[1,0,1,6]<br>解释：</p><ul><li>第一组长度为 1 ，没有发生反转。</li><li>第二组长度为 2 ，节点反转。</li><li>最后一组长度为 1 ，没有发生反转。</li></ul></blockquote><p><strong>示例3：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/eg3.png" alt="img" loading="lazy"></p><p>输入：head = [2,1]<br>输出：[2,1]<br>解释：</p><ul><li>第一组长度为 1 ，没有发生反转。</li><li>最后一组长度为 1 ，没有发生反转。</li></ul></blockquote><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>当然可以直接用链表翻转，但是这里偷了点懒，首先将链表存入数组，然后对数组进行处理。</p><font color="#ff0000">**坑点：**</font><p>例如链表$head=[2,1,3,4,2]$，应该输出为$[2,3,1,2,4]$，这里并不是偶数个子链表翻转，而是子链表长度为偶数个就翻转，所以对末尾的数据需要特判处理</p><p>于是代码如下：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) &#123;&#125; *     ListNode(int x) : val(x), next(nullptr) &#123;&#125; *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseEvenLengthGroups</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ve<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> p<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ve<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>ve<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>ans<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">+</span>len<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    p<span class="token operator">-></span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>ve<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    p<span class="token operator">-></span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>ve<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                i<span class="token operator">=</span>i<span class="token operator">+</span>len<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token operator">++</span>len<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//最后一组元素是偶数个还是奇数个</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                p<span class="token operator">-></span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>ve<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                p<span class="token operator">-></span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>ve<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="三、解码斜向换位密码"><a href="#三、解码斜向换位密码" class="headerlink" title="三、解码斜向换位密码"></a>三、解码斜向换位密码</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>字符串 <code>originalText</code> 使用 <strong>斜向换位密码</strong> ，经由 <strong>行数固定</strong> 为 <code>rows</code> 的矩阵辅助，加密得到一个字符串 <code>encodedText</code> 。<code>originalText</code> 先按从左上到右下的方式放置到矩阵中。</p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/exa11.png" alt="img" loading="lazy"></p><p>先填充蓝色单元格，接着是红色单元格，然后是黄色单元格，以此类推，直到到达 <code>originalText</code> 末尾。箭头指示顺序即为单元格填充顺序。所有空单元格用 <code>&#39; &#39;</code> 进行填充。矩阵的列数需满足：用 <code>originalText</code> 填充之后，最右侧列 <strong>不为空</strong> 。</p><p>接着按行将字符附加到矩阵中，构造 <code>encodedText</code> 。</p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/exa12.png" alt="img" loading="lazy"></p><p>先把蓝色单元格中的字符附加到 <code>encodedText</code> 中，接着是红色单元格，最后是黄色单元格。箭头指示单元格访问顺序。</p><p>例如，如果 <code>originalText = &quot;cipher&quot;</code> 且 <code>rows = 3</code> ，那么我们可以按下述方法将其编码：</p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/desc2.png" alt="img" loading="lazy"></p><p>蓝色箭头标识 <code>originalText</code> 是如何放入矩阵中的，红色箭头标识形成 <code>encodedText</code> 的顺序。在上述例子中，<code>encodedText = &quot;ch  ie  pr&quot;</code> 。</p><p>给你编码后的字符串 <code>encodedText</code> 和矩阵的行数 <code>rows</code> ，返回源字符串 <code>originalText</code> 。</p><p><strong>注意：</strong><code>originalText</code> <strong>不</strong> 含任何尾随空格 <code>&#39; &#39;</code> 。生成的测试用例满足 <strong>仅存在一个</strong> 可能的 <code>originalText</code> 。</p><p><strong>提示</strong></p><ul><li><code>0 &lt;= encodedText.length &lt;= 106</code></li><li><code>encodedText</code> 仅由小写英文字母和 <code>&#39; &#39;</code> 组成</li><li><code>encodedText</code> 是对某个 <strong>不含</strong> 尾随空格的 <code>originalText</code> 的一个有效编码</li><li><code>1 &lt;= rows &lt;= 1000</code></li><li>生成的测试用例满足 <strong>仅存在一个</strong> 可能的 <code>originalText</code></li></ul><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p>输入：encodedText = “ch   ie   pr”, rows = 3<br>输出：”cipher”<br>解释：此示例与问题描述中的例子相同。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/exam1.png" alt="img" loading="lazy"></p><p>输入：encodedText = “iveo    eed   l te   olc”, rows = 4<br>输出：”i love leetcode”<br>解释：上图标识用于编码 originalText 的矩阵。<br>蓝色箭头展示如何从 encodedText 找到 originalText 。</p></blockquote><p><strong>示例3：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/exam3.png" alt="img" loading="lazy"></p><p>输入：encodedText = “ b  ac”, rows = 2<br>输出：” abc”<br>解释：originalText 不能含尾随空格，但它可能会有一个或者多个前置空格。</p></blockquote><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>直接按照题意模拟即可，将给定的<code>encodedText</code>放入矩阵中，斜向读取<code>originalText</code>即可。由于会末尾会产生多余的空格，所以最后需要处理一下。具体代码如下：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">decodeCiphertext</span><span class="token punctuation">(</span>string encodedText<span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>encodedText<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cols<span class="token operator">=</span>n<span class="token operator">/</span>rows<span class="token punctuation">;</span>        string ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cols<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>rows<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> p<span class="token operator">=</span>j<span class="token operator">*</span><span class="token punctuation">(</span>cols<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">>=</span>n<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                ans<span class="token operator">+=</span>encodedText<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        string res<span class="token operator">=</span>ans<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">' '</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="四、处理含限制条件的好友请求"><a href="#四、处理含限制条件的好友请求" class="headerlink" title="四、处理含限制条件的好友请求"></a>四、<a href="https://leetcode-cn.com/problems/process-restricted-friend-requests/">处理含限制条件的好友请求</a></h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给你一个整数 n ，表示网络上的用户数目。每个用户按从 0 到 n - 1 进行编号。</p><p>给你一个下标从 0 开始的二维整数数组 restrictions ，其中 restrictions[i] = [xi, yi] 意味着用户 xi 和用户 yi 不能 成为 朋友 ，不管是 直接 还是通过其他用户 间接 。</p><p>最初，用户里没有人是其他用户的朋友。给你一个下标从 0 开始的二维整数数组 requests 表示好友请求的列表，其中 requests[j] = [uj, vj] 是用户 uj 和用户 vj 之间的一条好友请求。</p><p>如果 uj 和 vj 可以成为 朋友 ，那么好友请求将会 成功 。每个好友请求都会按列表中给出的顺序进行处理（即，requests[j] 会在 requests[j + 1] 前）。一旦请求成功，那么对所有未来的好友请求而言， uj 和 vj 将会 成为直接朋友 。</p><p>返回一个 布尔数组 result ，其中元素遵循此规则：如果第 j 个好友请求 成功 ，那么 result[j] 就是 true ；否则，为 false 。</p><p>注意：如果 uj 和 vj 已经是直接朋友，那么他们之间的请求将仍然 成功 。</p><p><strong>提示</strong></p><ul><li><code>2 &lt;= n &lt;= 1000</code></li><li><code>0 &lt;= restrictions.length &lt;= 1000</code></li><li><code>restrictions[i].length == 2</code></li><li><code>0 &lt;= xi, yi &lt;= n - 1</code></li><li><code>xi != yi</code></li><li><code>1 &lt;= requests.length &lt;= 1000</code></li><li><code>requests[j].length == 2</code></li><li><code>0 &lt;= uj, vj &lt;= n - 1</code></li><li><code>uj != vj</code></li></ul><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p>输入：n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]<br>输出：[true,false]<br>解释：<br>请求 0 ：用户 0 和 用户 2 可以成为朋友，所以他们成为直接朋友。<br>请求 1 ：用户 2 和 用户 1 不能成为朋友，因为这会使 用户 0 和 用户 1 成为间接朋友 (1—2—0) 。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]<br>输出：[true,false]<br>解释：<br>请求 0 ：用户 1 和 用户 2 可以成为朋友，所以他们成为直接朋友。<br>请求 1 ：用户 0 和 用户 2 不能成为朋友，因为这会使 用户 0 和 用户 1 成为间接朋友 (0—2—1) 。</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]<br>输出：[true,false,true,false]<br>解释：<br>请求 0 ：用户 0 和 用户 4 可以成为朋友，所以他们成为直接朋友。<br>请求 1 ：用户 1 和 用户 2 不能成为朋友，因为他们之间存在限制。<br>请求 2 ：用户 3 和 用户 1 可以成为朋友，所以他们成为直接朋友。<br>请求 3 ：用户 3 和 用户 4 不能成为朋友，因为这会使 用户 0 和 用户 1 成为间接朋友 (0—4—3—1) 。</p></blockquote><h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>由题意可知，显然是一个<strong>并查集</strong>的题目。</p><p>由于数据量不大，可以这么处理：我们将能够直接或间接成为朋友的放入同一个集合。然后遍历<code>requests</code>数组，</p><ul><li>如果本来就能直接或间接成为朋友，则直接为<code>true</code></li><li>如果在原来集合中不能判断两者能否直接或间接成为朋友，则遍历<code>restrictions</code>数组。若存在相关限制，则为<code>false</code>；否则为<code>true</code>，同时将两者放入同一集合。</li></ul><p>具体代码如下：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> par<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">get_par</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>par<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get_par</span><span class="token punctuation">(</span>par<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> par<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">friendRequests</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> restrictions<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> requests<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> par<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> par_u<span class="token operator">=</span><span class="token function">get_par</span><span class="token punctuation">(</span>requests<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> par_v<span class="token operator">=</span><span class="token function">get_par</span><span class="token punctuation">(</span>requests<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>par_u<span class="token operator">==</span>par_v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>restrictions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> u<span class="token operator">=</span>restrictions<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token operator">=</span>restrictions<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">get_par</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">==</span>par_u<span class="token operator">&amp;&amp;</span><span class="token function">get_par</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">==</span>par_v<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">get_par</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">==</span>par_u<span class="token operator">&amp;&amp;</span><span class="token function">get_par</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">==</span>par_v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> par<span class="token punctuation">[</span>par_u<span class="token punctuation">]</span><span class="token operator">=</span>par_v<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>最后一题真的不是很难，应该看下题目的…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode第267场周赛题解&quot;&gt;&lt;a href=&quot;#LeetCode第267场周赛题解&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第267场周赛题解&quot;&gt;&lt;/a&gt;LeetCode第267场周赛题解&lt;/h2&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="LeetCode周赛题解" scheme="http://bbstudy.net/categories/LeetCode%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode2022年每日一题3月打卡汇总</title>
    <link href="http://bbstudy.net/LeetCode-March-2022/"/>
    <id>http://bbstudy.net/LeetCode-March-2022/</id>
    <published>2022-09-07T13:19:54.944Z</published>
    <updated>2022-09-11T12:04:45.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode2022年每日一题3月打卡汇总"><a href="#LeetCode2022年每日一题3月打卡汇总" class="headerlink" title="LeetCode2022年每日一题3月打卡汇总"></a>LeetCode2022年每日一题3月打卡汇总</h2><h3 id="3-1：Z-字形变换"><a href="#3-1：Z-字形变换" class="headerlink" title="3.1：Z 字形变换"></a><a href="https://leetcode-cn.com/problems/zigzag-conversion/">3.1：Z 字形变换</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 “PAYPALISHIRING” 行数为 3 时，排列如下：</p><p>P   A   H   N<br>A P L S I I G<br>Y   I   R<br>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”PAHNAPLSIIGYIR”。</p><p>请你实现这个将字符串进行指定行数变换的函数：</p><p>string convert(string s, int numRows);</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 3输出：&quot;PAHNAPLSIIGYIR&quot;</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 4输出：&quot;PINALSIGYAHRPI&quot;解释：P     I    NA   L S  I GY A   H RP     I</code></pre><p><strong>示例3：</strong></p><pre class="language-none"><code class="language-none">输入：s &#x3D; &quot;A&quot;, numRows &#x3D; 1输出：&quot;A&quot;</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 由英文字母（小写和大写）、<code>&#39;,&#39;</code> 和 <code>&#39;.&#39;</code> 组成</li><li><code>1 &lt;= numRows &lt;= 1000</code></li></ul><h4 id="题解一：二维数组模拟"><a href="#题解一：二维数组模拟" class="headerlink" title="题解一：二维数组模拟"></a>题解一：二维数组模拟</h4><p>直接按照题意模拟，将之字形排列输出到二维矩阵中，然后从左到右、从上到下遍历即可。</p><p>需要注意，只有一行的情况需要特判，直接输出s。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    string <span class="token function">convert</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">' '</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先输出第一行</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">&lt;</span>numRows<span class="token operator">&amp;&amp;</span>cnt<span class="token operator">&lt;</span>n<span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token operator">++</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//斜着输出</span>            t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>t<span class="token operator">&lt;</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span><span class="token operator">--</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>y<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                t<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//输出一列</span>            t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>t<span class="token operator">&lt;</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token operator">++</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        string ans<span class="token operator">=</span>s<span class="token punctuation">;</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>numRows<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="题解二：巧妙模拟"><a href="#题解二：巧妙模拟" class="headerlink" title="题解二：巧妙模拟"></a>题解二：巧妙模拟</h4><p><a href="https://leetcode-cn.com/problems/zigzag-conversion/solution/zzi-xing-bian-huan-by-jyd/">https://leetcode-cn.com/problems/zigzag-conversion/solution/zzi-xing-bian-huan-by-jyd/</a></p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">convert</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">ve</span><span class="token punctuation">(</span>numRows<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ve<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">==</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> flag<span class="token operator">=</span><span class="token operator">-</span>flag<span class="token punctuation">;</span>            x<span class="token operator">+=</span>flag<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        string ans<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>str<span class="token operator">:</span>ve<span class="token punctuation">)</span> ans<span class="token operator">+=</span>str<span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-2：寻找最近的回文数"><a href="#3-2：寻找最近的回文数" class="headerlink" title="3.2：寻找最近的回文数"></a><a href="https://leetcode-cn.com/problems/find-the-closest-palindrome/">3.2：寻找最近的回文数</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给定一个表示整数的字符串 <code>n</code> ，返回与它最近的回文整数（不包括自身）。如果不止一个，返回较小的那个。</p><p>“最近的”定义为两个整数<strong>差的绝对值</strong>最小。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入: n &#x3D; &quot;123&quot;输出: &quot;121&quot;</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入: n &#x3D; &quot;1&quot;输出: &quot;0&quot;解释: 0 和 2是最近的回文，但我们返回最小的，也就是 0。</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n.length &lt;= 18</code></li><li><code>n</code> 只由数字组成</li><li><code>n</code> 不含前导 0</li><li><code>n</code> 代表在 $[1, 10^{18} - 1]$ 范围内的整数</li></ul><h4 id="题解：模拟"><a href="#题解：模拟" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>由于需要求回文串，如果我们从低位考虑，则对应的高位也需要改变，于是我们考虑从中间位置变化，然后低位便随着高位改变。</p><p>但是需要注意进位和减位的情况，例如：100-1,99+1。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>    ll <span class="token function">tonum</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ll res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token operator">=</span>res<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ll <span class="token function">getnum</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span><span class="token keyword">bool</span> tag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        ll res<span class="token operator">=</span>x<span class="token punctuation">;</span>        string s<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token operator">=</span>x<span class="token punctuation">;</span>n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pos<span class="token operator">=</span>tag<span class="token operator">?</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pos<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> res<span class="token operator">=</span>res<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>pos<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    string <span class="token function">nearestPalindromic</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ll now<span class="token operator">=</span><span class="token function">tonum</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先考虑10^n+1,10^(n-1)-1</span>        set<span class="token operator">&lt;</span>ll<span class="token operator">></span> st<span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ll t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> t<span class="token operator">=</span>t<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ll tmp<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> tmp<span class="token operator">=</span><span class="token function">getnum</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> tmp<span class="token operator">=</span><span class="token function">getnum</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">!=</span>now<span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ll ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i<span class="token operator">:</span>st<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// cout&lt;&lt;i&lt;&lt;endl;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>i<span class="token operator">-</span>now<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">abs</span><span class="token punctuation">(</span>ans<span class="token operator">-</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> ans<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>i<span class="token operator">-</span>now<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">abs</span><span class="token punctuation">(</span>ans<span class="token operator">-</span>now<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>ans<span class="token punctuation">)</span> ans<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">to_string</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-3：各位相加"><a href="#3-3：各位相加" class="headerlink" title="3.3：各位相加"></a><a href="https://leetcode-cn.com/problems/add-digits/">3.3：各位相加</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给定一个非负整数 <code>num</code>，反复将各个位上的数字相加，直到结果为一位数。返回这个结果。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入: num &#x3D; 38输出: 2 解释: 各位相加的过程为：38 --&gt; 3 + 8 --&gt; 1111 --&gt; 1 + 1 --&gt; 2由于 2 是一位数，所以返回 2。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入: num &#x3D; 0输出: 0</code></pre><p><strong>提示：</strong></p><ul><li>$0 &lt;= num &lt;= 2^{31} - 1$</li></ul><h4 id="题解一：模拟"><a href="#题解一：模拟" class="headerlink" title="题解一：模拟"></a>题解一：模拟</h4><p>直接按照题意模拟即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">addDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                x<span class="token operator">+=</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>num<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            num<span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sum<span class="token operator">+=</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>num<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            num<span class="token operator">=</span>sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="题解二：思维-数学"><a href="#题解二：思维-数学" class="headerlink" title="题解二：思维/数学"></a>题解二：思维/数学</h4><p><a href="https://leetcode-cn.com/problems/add-digits/solution/java-o1jie-fa-de-ge-ren-li-jie-by-liveforexperienc/">巧妙题解</a></p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">addDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-4：子数组范围和"><a href="#3-4：子数组范围和" class="headerlink" title="3.4：子数组范围和"></a><a href="https://leetcode-cn.com/problems/sum-of-subarray-ranges/">3.4：子数组范围和</a></h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给你一个整数数组 nums 。nums 中，子数组的 范围 是子数组中最大元素和最小元素的差值。</p><p>返回 nums 中 所有 子数组范围的 和 。</p><p>子数组是数组中一个连续 非空 的元素序列。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [1,2,3]输出：4解释：nums 的 6 个子数组如下所示：[1]，范围 &#x3D; 最大 - 最小 &#x3D; 1 - 1 &#x3D; 0 [2]，范围 &#x3D; 2 - 2 &#x3D; 0[3]，范围 &#x3D; 3 - 3 &#x3D; 0[1,2]，范围 &#x3D; 2 - 1 &#x3D; 1[2,3]，范围 &#x3D; 3 - 2 &#x3D; 1[1,2,3]，范围 &#x3D; 3 - 1 &#x3D; 2所有范围的和是 0 + 0 + 0 + 1 + 1 + 2 &#x3D; 4</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [1,3,3]输出：4解释：nums 的 6 个子数组如下所示：[1]，范围 &#x3D; 最大 - 最小 &#x3D; 1 - 1 &#x3D; 0[3]，范围 &#x3D; 3 - 3 &#x3D; 0[3]，范围 &#x3D; 3 - 3 &#x3D; 0[1,3]，范围 &#x3D; 3 - 1 &#x3D; 2[3,3]，范围 &#x3D; 3 - 3 &#x3D; 0[1,3,3]，范围 &#x3D; 3 - 1 &#x3D; 2所有范围的和是 0 + 0 + 0 + 2 + 0 + 2 &#x3D; 4</code></pre><p><strong>示例3：</strong></p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [4,-2,-3,4,1]输出：59解释：nums 中所有子数组范围的和是 59</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums.length &lt;= 1000$</li><li>$-10^9 &lt;= nums[i] &lt;= 10^9$</li></ul><h4 id="题解一：模拟-1"><a href="#题解一：模拟-1" class="headerlink" title="题解一：模拟"></a>题解一：模拟</h4><p>遍历所有子数组，保存对应的最小值和最大值，依次求子数组最大值和最小值之差的和即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>    <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">subArrayRanges</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minnum<span class="token operator">=</span>inf<span class="token punctuation">,</span>maxnum<span class="token operator">=</span><span class="token operator">-</span>inf<span class="token punctuation">;</span>        ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            minnum<span class="token operator">=</span>inf<span class="token punctuation">,</span>maxnum<span class="token operator">=</span><span class="token operator">-</span>inf<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                minnum<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>minnum<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>maxnum<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxnum<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// cout&lt;&lt;i&lt;&lt;"--"&lt;&lt;j&lt;&lt;"--"&lt;&lt;minnum&lt;&lt;"---"&lt;&lt;maxnum&lt;&lt;endl;</span>                ans<span class="token operator">+=</span>maxnum<span class="token operator">-</span>minnum<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="题解二：单调栈"><a href="#题解二：单调栈" class="headerlink" title="题解二：单调栈"></a>题解二：单调栈</h4><p>我们定义：i&lt;j，如果nums[i]==nums[j]，则逻辑上我们认为nums[i]&lt;nums[j]（因为i&lt;j）。进行此定义为了方便处理单调栈。</p><p>题目所求为：所有子数组范围（子数组最大值-最小值）和。可以转化为<code>&lt;font color=&quot;#ff0000&quot;&gt;</code><strong>所有子数组的最大值的和-所有子数组最小值和</strong><code>&lt;/font&gt;</code>。</p><p>假设nums[j]左边第一个比它小的元素为nums[i]，nums[j]右边第一个比它小的元素为nums[k]。则所有子数组中以nums[i]为最小值的个数为$(j-i) * (k-j)$。如何获得nums[j]左边和右边第一个比它小的元素的下标呢， <code>&lt;font color=&quot;#ff0000&quot;&gt;</code>单调栈<code>&lt;/font&gt;</code>刚好可以处理，预处理数组minL，minR。其中minL[i]表示nums[i]左边第一个比它小的元素的下标，minR[i]表示nums[i]右边第一个比它小的元素的下标。</p><blockquote><p>单调栈的一个例子：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 对于数组 [..., 3, 5,6,7,4,1,2]&#x2F;&#x2F; &#x2F;&#x2F; 要计算数字5的「右侧比5小的第一个数」的时候&#x2F;&#x2F; 需要关注的只有 [6,4,1] 这三个数，也就是单调栈。&#x2F;&#x2F; 由于6比5大，所以将6出栈，变成 [4,1]，于是找到了，4就是「比5小的右侧第一个数」&#x2F;&#x2F; 然后将5入栈，变成 [5,4,1]&#x2F;&#x2F;&#x2F;&#x2F; 然后继续计算5左边的3的「右侧第一个更小的数」，此时需要考虑的栈是[5,4,1]&#x2F;&#x2F; 依次将5, 4出栈，栈变成了[1]，终于比3小了，1就是比3小的右侧第一个数。然后将3入栈，变成[3, 1]，再继续往左。&#x2F;&#x2F; 即，计算「右侧比nums[i]小的第一个数」的时候，要从右往左算。</code></pre><p>于是我们以minL处理为例，从左到右遍历数组，当遍历到nums[i]时：</p><ul><li>执行出栈，直到栈为空 或者 nums[minstack.top()]逻辑上小于nums[i]，</li><li>如果栈为空，则minL[i]=-1，否则minL[i]=minstack.top()</li><li>然后将下标i入栈</li></ul></blockquote><p>于是所有子数组的最小值和为$minsum=\Sigma_{i=0}^{n-1}(minR[i]-i)(i-minL[i])*nums[i]$，同理求得maxsum。具体见代码：</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">subArrayRanges</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> minstack<span class="token punctuation">,</span>maxstack<span class="token punctuation">;</span>        <span class="token comment">//minL[i]：表示nums[i]左边比它小的第一个元素的下标。其他同理</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">minL</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">minR</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxL</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxR</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理minL[],maxL[]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果当前栈顶元素大于nums[i]，则出栈</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>minstack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>minstack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> minstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minL<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>minstack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>minstack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果当前栈顶元素小于等于nums[i]，则出栈</span>            <span class="token comment">//上述已定义了排序规则，若nums[maxstack.top()]==nums[i],则nums[maxstack.top()]&lt;nums[i]（因为maxstack.top()&lt;i）</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>maxstack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>maxstack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> maxstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxL<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>maxstack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>maxstack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>minstack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> minstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>maxstack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> maxstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理minR[],maxR[]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果当前栈顶元素大于等于nums[i]，则出栈</span>            <span class="token comment">//若nums[maxstack.top()]==nums[i],则nums[maxstack.top()]>nums[i]（因为maxstack.top()>i）</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>minstack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>minstack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> minstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minR<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>minstack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>n<span class="token operator">:</span>minstack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果当前栈顶元素小于nums[i]，则出栈</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>maxstack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>maxstack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> maxstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxR<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>maxstack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>n<span class="token operator">:</span>maxstack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// for(int i=0;i&lt;n;i++)&#123;</span>        <span class="token comment">//     cout&lt;&lt;minL[i]&lt;&lt;"---"&lt;&lt;minR[i]&lt;&lt;"---"&lt;&lt;maxL[i]&lt;&lt;"---"&lt;&lt;maxR[i]&lt;&lt;endl;</span>        <span class="token comment">// &#125;</span>        ll maxsum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>minsum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//分别以nums[i]为子数组的最大值或最小值的和，具体见题解描述</span>            maxsum<span class="token operator">+=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>maxR<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span>maxL<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            minsum<span class="token operator">+=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>minR<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span>minL<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxsum<span class="token operator">-</span>minsum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">subArrayRanges</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> minL<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> minR<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> maxL<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> maxR<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// Java一般中Deque代替Stack和Queue</span><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> minstack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> maxstack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>minstack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>minstack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>minstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>minL<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> minstack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> minstack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>minstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>maxstack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>maxstack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>maxstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>maxL<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxstack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> maxstack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>maxstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>minstack<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>maxstack<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>minstack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>minstack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>minstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>minR<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> minstack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> n <span class="token operator">:</span> minstack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>minstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>maxstack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>maxstack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>maxstack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>maxR<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxstack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> n <span class="token operator">:</span> maxstack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>maxstack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> minsum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxsum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>minsum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">-</span> minL<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>minR<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>maxsum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">-</span> maxL<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>maxR<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> maxsum <span class="token operator">-</span> minsum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-5：最长特殊序列-Ⅰ"><a href="#3-5：最长特殊序列-Ⅰ" class="headerlink" title="3.5：最长特殊序列 Ⅰ"></a><a href="https://leetcode-cn.com/problems/longest-uncommon-subsequence-i/">3.5：最长特殊序列 Ⅰ</a></h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>给你两个字符串 a 和 b，请返回 这两个字符串中 最长的特殊序列  。如果不存在，则返回 -1 。</p><p>「最长特殊序列」 定义如下：该序列为 某字符串独有的最长子序列（即不能是其他字符串的子序列） 。</p><p>字符串 s 的子序列是在从 s 中删除任意数量的字符后可以获得的字符串。</p><p>例如，“abc” 是 “aebdc” 的子序列，因为您可以删除 “aebdc” 中的下划线字符来得到 “abc” 。 “aebdc” 的子序列还包括 “aebdc” 、 “aeb” 和 “” (空字符串)。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入: a &#x3D; &quot;aba&quot;, b &#x3D; &quot;cdc&quot;输出: 3解释: 最长特殊序列可为 &quot;aba&quot; (或 &quot;cdc&quot;)，两者均为自身的子序列且不是对方的子序列。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：a &#x3D; &quot;aaa&quot;, b &#x3D; &quot;bbb&quot;输出：3解释: 最长特殊序列是“aaa”和“bbb”。</code></pre><p><strong>示例3：</strong></p><pre class="language-none"><code class="language-none">输入：a &#x3D; &quot;aaa&quot;, b &#x3D; &quot;aaa&quot;输出：-1解释: 字符串a的每个子序列也是字符串b的每个子序列。同样，字符串b的每个子序列也是字符串a的子序列。</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= a.length, b.length &lt;= 100</code></li><li><code>a</code> 和 <code>b</code> 由小写英文字母组成</li></ul><h4 id="题解：思维"><a href="#题解：思维" class="headerlink" title="题解：思维"></a>题解：思维</h4><ul><li>如果两个字符串相同，则无论如何都找不到特殊序列，于是返回-1</li><li>如果两个字符串不同，则长度长的字符串肯定是最长特殊序列。（当然如果长度相同，则两个任选一个都是）</li></ul><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findLUSlength</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len1<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len2<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token operator">&amp;&amp;</span>len1<span class="token operator">==</span>len2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findLUSlength</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len1<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len2<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len1<span class="token operator">==</span>len2<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="扩展：最长特殊序列-II"><a href="#扩展：最长特殊序列-II" class="headerlink" title="扩展：最长特殊序列 II"></a>扩展：<a href="https://leetcode-cn.com/problems/longest-uncommon-subsequence-ii/">最长特殊序列 II</a></h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><p>给定字符串列表 strs ，返回 它们中 最长的特殊序列 。如果最长特殊序列不存在，返回 -1 。</p><p>最长特殊序列 定义如下：该序列为某字符串 独有的最长子序列（即不能是其他字符串的子序列）。</p><p> s 的 子序列可以通过删去字符串 s 中的某些字符实现。</p><p>例如，”abc” 是 “aebdc” 的子序列，因为您可以删除”aebdc”中的下划线字符来得到 “abc” 。”aebdc”的子序列还包括”aebdc”、 “aeb” 和 “” (空字符串)。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入: strs &#x3D; [&quot;aba&quot;,&quot;cdc&quot;,&quot;eae&quot;]输出: 3</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入: strs &#x3D; [&quot;aaa&quot;,&quot;aaa&quot;,&quot;aa&quot;]输出: -1</code></pre><p><strong>提示：</strong></p><ul><li><code>2 &lt;= strs.length &lt;= 50</code></li><li><code>1 &lt;= strs[i].length &lt;= 10</code></li><li><code>strs[i]</code> 只包含小写英文字母</li></ul><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>首先需要知道这样一个性质：<strong>最长的符合“该字符串不是数组中其他字符串的子序列”的子串一定是原字符串。</strong></p><blockquote><p>证明：<strong>只要某个子串s不是其他字符串的子串，那么这个这个子串在任意位置添加N个字符得到的结果ss肯定也不是其他字符串的子串。 所以对这个子串s而言，子串s进行添加字母的操作后最长的串就是原字符串。</strong></p></blockquote><p>于是通过二重循环，判断所有字符串是否是其他字符串的子序列，例如：strs[i]不是其他所有字符串的子序列,则strs[i]可能是题目所求的最长特殊序列（因为可能还需要判断长度）</p><p>例如：s1,s2,s3都满足自身都不是其他字符串的子序列，则需要判断其中谁的长度最长，假设s3长度最长，则s3为题目所求的最长特殊序列</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>string s1<span class="token punctuation">,</span>string s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> i<span class="token operator">==</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findLUSlength</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment">//如果是前面的子序列，则直接结束循环</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-6：适合打劫银行的日子"><a href="#3-6：适合打劫银行的日子" class="headerlink" title="3.6：适合打劫银行的日子"></a><a href="https://leetcode-cn.com/problems/find-good-days-to-rob-the-bank/">3.6：适合打劫银行的日子</a></h3><h4 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h4><p>你和一群强盗准备打劫银行。给你一个下标从 0 开始的整数数组 security ，其中 security[i] 是第 i 天执勤警卫的数量。日子从 0 开始编号。同时给你一个整数 time 。</p><p>如果第 i 天满足以下所有条件，我们称它为一个适合打劫银行的日子：</p><p>第 i 天前和后都分别至少有 time 天。<br>第 i 天前连续 time 天警卫数目都是非递增的。<br>第 i 天后连续 time 天警卫数目都是非递减的。<br>更正式的，第 i 天是一个合适打劫银行的日子当且仅当：security[i - time] &gt;= security[i - time + 1] &gt;= … &gt;= security[i] &lt;= … &lt;= security[i + time - 1] &lt;= security[i + time].</p><p>请你返回一个数组，包含 所有 适合打劫银行的日子（下标从 0 开始）。返回的日子可以 任意 顺序排列。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：security &#x3D; [5,3,3,3,5,6,2], time &#x3D; 2输出：[2,3]解释：第 2 天，我们有 security[0] &gt;&#x3D; security[1] &gt;&#x3D; security[2] &lt;&#x3D; security[3] &lt;&#x3D; security[4] 。第 3 天，我们有 security[1] &gt;&#x3D; security[2] &gt;&#x3D; security[3] &lt;&#x3D; security[4] &lt;&#x3D; security[5] 。没有其他日子符合这个条件，所以日子 2 和 3 是适合打劫银行的日子。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：security &#x3D; [1,1,1,1,1], time &#x3D; 0输出：[0,1,2,3,4]解释：因为 time 等于 0 ，所以每一天都是适合打劫银行的日子，所以返回每一天。</code></pre><p><strong>示例3：</strong></p><pre class="language-none"><code class="language-none">输入：security &#x3D; [1,2,3,4,5,6], time &#x3D; 2输出：[]解释：没有任何一天的前 2 天警卫数目是非递增的。所以没有适合打劫银行的日子，返回空数组。</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= security.length &lt;= 10^5$</li><li>$0 &lt;= security[i], time &lt;= 10^5$</li></ul><h4 id="题解：DP"><a href="#题解：DP" class="headerlink" title="题解：DP"></a>题解：DP</h4><p>首先很容易想到的是：直接遍历每一天，判断前后是否存在连续time天满足题意的情况。如果通过两重循环处理显然超时，于是想到预处理。</p><ul><li>pre[i]表示：i前面有pre[i]天警卫数量是非递增的</li><li>suf[i]表示：i后面又suf[i]天警卫数量是递减的</li></ul><p>预处理后，再遍历每一天通过数组访问判断即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">goodDaysToRobBank</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> security<span class="token punctuation">,</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>security<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token comment">//pre[i]:i前面有pre[i]天警卫数量是非递增的</span>        <span class="token comment">//suf[i]:i后面又suf[i]天警卫数量是递减的</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">pre</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">suf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>security<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>security<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pre<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        suf<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>security<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>security<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> suf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>suf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> suf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//确保前后至少都有time天，否则无意义</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>time<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span>time<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>time<span class="token operator">&amp;&amp;</span>suf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-7：七进制数"><a href="#3-7：七进制数" class="headerlink" title="3.7：七进制数"></a><a href="https://leetcode-cn.com/problems/base-7/">3.7：七进制数</a></h3><h4 id="题意-7"><a href="#题意-7" class="headerlink" title="题意"></a>题意</h4><p>给定一个整数 <code>num</code>，将其转化为 <strong>7 进制</strong>，并以字符串形式输出。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入: num &#x3D; 100输出: &quot;202&quot;</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入: num &#x3D; -7输出: &quot;-10&quot;</code></pre><p><strong>提示：</strong></p><ul><li>$-10^7 &lt;= num &lt;= 10^7$</li></ul><h4 id="题解：模拟-1"><a href="#题解：模拟-1" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>直接模拟即可。但是需要注意：</p><ul><li>0的情况需要特判</li><li>负数特殊处理</li></ul><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">convertToBase7</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        string ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>num<span class="token operator">=</span><span class="token operator">-</span>num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">+=</span>num<span class="token operator">%</span><span class="token number">7</span><span class="token operator">+</span><span class="token char">'0'</span><span class="token punctuation">;</span>num<span class="token operator">/=</span><span class="token number">7</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> ans<span class="token operator">+=</span><span class="token char">'-'</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convertToBase7</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> s2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token operator">=</span><span class="token operator">-</span>num<span class="token punctuation">;</span>flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">7</span><span class="token operator">+</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token operator">/=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-8：蜡烛之间的盘子"><a href="#3-8：蜡烛之间的盘子" class="headerlink" title="3.8：蜡烛之间的盘子"></a><a href="https://leetcode-cn.com/problems/plates-between-candles/">3.8：蜡烛之间的盘子</a></h3><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>给定一个字符串数组，含有 <code>*</code>和 <code>|</code>两个字符，分别表示盘子和蜡烛。现给出一个询问数组，每个元素给定一个区间 <code>[l,r]</code>，需要求得该区间中两支蜡烛之间的最大盘子数量</p><p>其中：</p><ul><li>$3 &lt;= s.length &lt;= 10^5$</li><li>$s 只包含字符 ‘*’ 和 ‘|’$</li><li>$1 &lt;= queries.length &lt;= 10^5$</li><li>$queries[i].length == 2$</li><li>$0 &lt;= left_i &lt;= right_i &lt; s.length$</li></ul><p><strong>示例1：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/ex-1.png" alt="img" loading="lazy"></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">输入：s = <span class="token code-snippet code keyword">`"**|**|***|"`</span>, queries = [[2,5],[5,9]]输出：[2,3]解释：<span class="token list punctuation">-</span> queries[0] 有两个盘子在蜡烛之间。<span class="token list punctuation">-</span> queries[1] 有三个盘子在蜡烛之间。</code></pre><p><strong>示例2：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/ex-2.png" alt="ex-2" loading="lazy"></p><pre class="language-none"><code class="language-none">输入：s &#x3D; &#96;&quot;***|**|*****|**||**|*&quot;&#96; ，queries &#x3D; [[1,17],[4,5],[14,17],[5,11],[15,16]]输出：[9,0,0,0,0]解释：- queries[0] 有 9 个盘子在蜡烛之间。- 另一个查询没有盘子在蜡烛之间。</code></pre><h4 id="题解一：二分"><a href="#题解一：二分" class="headerlink" title="题解一：二分"></a>题解一：二分</h4><ol><li>用一数组存储所有蜡烛出现的位置</li><li>每次询问时，利用二分查找求得区间中第一次蜡烛出现的位置和最后一次蜡烛出现的位置</li><li><strong>$两个位置的距离差-区间中蜡烛的数量$</strong>即为结果</li></ol><p><strong>C++代码</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">platesBetweenCandles</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'|'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;=</span>l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>p<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="题解二：前缀和"><a href="#题解二：前缀和" class="headerlink" title="题解二：前缀和"></a>题解二：前缀和</h4><p>题解一是对于蜡烛位置的处理，我们同样可以思考对盘子进行处理：对盘子数量进行前缀和。</p><p>同时可以直接对每个位置左边第一个蜡烛的位置l[i]，和右边第一个蜡烛的位置r[i]进行预处理。</p><ul><li>当询问区间为[x,y]时，通过l[x],r[y]更新区间，</li><li>此时区间中第一次出现蜡烛的位置为：$fx=r[x]$，最后一次出现蜡烛的位置为：$fy=l[y]$（因为l[i]表示位置i左边第一次出现蜡烛的位置，r[i]同理）</li><li>于是通过前缀和可以计算区间中满足条件的盘子数量为：$sum[fy]-sum[fx-1]$，但是由于fx,fy均为蜡烛的位置，可以转化为：$sum[fy]-sum[fx]$（为了防止fx=0的情况，fx-1越界）</li></ul><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">platesBetweenCandles</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//盘子的前缀和</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//l[i]：位置i左边(包括自身位置)第一个蜡烛的位置</span>        <span class="token comment">//r[i]：位置i右边(包括自身位置)第一个蜡烛的位置</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">l</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//先预处理前缀和、l[]</span>        sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        left<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'|'</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'*'</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'|'</span><span class="token punctuation">)</span> left<span class="token operator">=</span>i<span class="token punctuation">;</span>            l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//再预处理r[]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'|'</span><span class="token punctuation">)</span> right<span class="token operator">=</span>i<span class="token punctuation">;</span>            r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//记录x右边第一个蜡烛的位置和y左边第一个蜡烛的位置</span>            x<span class="token operator">=</span>r<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>y<span class="token operator">=</span>l<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//不存在的情况</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>y<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>x<span class="token operator">></span>y<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//由于x、y均为蜡烛的位置，期间盘子的数量可以表示为sum[y]-sum[x]</span>            <span class="token keyword">else</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-9：得分最高的最小轮调"><a href="#3-9：得分最高的最小轮调" class="headerlink" title="3.9：得分最高的最小轮调"></a><a href="https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/">3.9：得分最高的最小轮调</a></h3><h4 id="题意-8"><a href="#题意-8" class="headerlink" title="题意"></a>题意</h4><p>给你一个数组 nums，我们可以将它按一个非负整数 k 进行轮调，这样可以使数组变为 [nums[k], nums[k + 1], … nums[nums.length - 1], nums[0], nums[1], …, nums[k-1]] 的形式。此后，任何值小于或等于其索引的项都可以记作一分。</p><p>例如，数组为 nums = [2,4,1,3,0]，我们按 k = 2 进行轮调后，它将变成 [1,3,0,2,4]。这将记为 3 分，因为 1 &gt; 0 [不计分]、3 &gt; 1 [不计分]、0 &lt;= 2 [计 1 分]、2 &lt;= 3 [计 1 分]，4 &lt;= 4 [计 1 分]。<br>在所有可能的轮调中，返回我们所能得到的最高分数对应的轮调下标 k 。如果有多个答案，返回满足条件的最小的下标 k 。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [2,3,1,4,0]输出：3解释：下面列出了每个 k 的得分：k &#x3D; 0,  nums &#x3D; [2,3,1,4,0],    score 2k &#x3D; 1,  nums &#x3D; [3,1,4,0,2],    score 3k &#x3D; 2,  nums &#x3D; [1,4,0,2,3],    score 3k &#x3D; 3,  nums &#x3D; [4,0,2,3,1],    score 4k &#x3D; 4,  nums &#x3D; [0,2,3,1,4],    score 3所以我们应当选择 k &#x3D; 3，得分最高。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [1,3,0,2,4]输出：0解释：nums 无论怎么变化总是有 3 分。所以我们将选择最小的 k，即 0。</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums.length &lt;= 10^5$</li><li>$0 &lt;= nums[i] &lt; nums.length$</li></ul><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>困难题复制粘贴…</p><p>思路分析：这道题最简单的思路：直接移动，然后计算分数，再取最高值。但是时间复杂度为O(n^2)，A的长度比较大，显然不行。</p><p>我们以A=[2,3,1,4,0]为例寻找规律:</p><p>A[0]=2移动到 2 号索引位置[4,0,2,3,1]其对应的K为3=(0-A[0]+5)%5<br>A[1]=3移动到 3 号索引位置[0,2,3,1,4]其对应的K为3=(1-A[1]+5)%5<br>A[2]=1移动到 1 号索引位置[3,1,4,0,2]其对应的K为1=(2-A[2]+5)%5<br>A[3]=4移动到 4 号索引位置[0,2,3,1,4]其对应的K为1=(3-A[3]+5)%5<br>A[4]=0移动到 0 号索引位置[0,2,3,1,4]其对应的K为3=(4-A[4]+5)%5</p><p>由此可以得出一个公式，将A[i]向左移动到下标A[A[i]]的位置需要K = (i - A[i] + N) % N<br>并且我们发现，A[A[i]]是第一个A[i]能得分的位置，如果这时减小K，则A[i]继续得分，如果增大K则A[i]将不得分。<br>如果我们能够刚好把所有A[i]都移动到A[A[i]]的位置，那么我们拿到的分数肯定的是最高的，蛋式这种情况几乎不可能。</p><p>当我们把A[i]移动到A[A[i]]后，再向左移动一个位置（即K增加1）。A[i]的移动公式为K’ = (1 + i - A[i] + N) % N这个时候A[i]刚好不得分。</p><p>我们可以在这个刚好不得分的k标记一下，通过+1进行标记，这个k就是 (i - A[i] + 1 + N) % N。用一个长度为N<br>的myK数组，对于每个元素A[i]，我们都找到其刚好不得分的k = (i - A[i] + 1 + N) % N，那么此时myK[k]就表示<br>数组中的数字在K = k时，A数组中不得分的元素个数。</p><p>可以发现，如果当K = k时，A[i]刚好不得分，当K = k + 1时（左移一个）A[i]继续不得分，蛋式当K = k + 1时<br>有一个元素开始得分了，就是在当K = k处于A[0]的元素开始得分！！！</p><p>因此递推公式为：myK[k + 1] += myK[k] - 1</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">bestRotation</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ansk<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//ansk表示：K=ansk时，此时A数组中得分个数最多</span>        <span class="token comment">//myk[k]表示：K=k时，A数组中不得分的个数</span>        <span class="token comment">//第一步：将A数组中所有元素都向左移动（i-A[i]+1+n)%n 个位置，即K=（i-A[i]+1+n)%n 此时A[i]刚好不得分</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">myk</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            myk<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">-</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//当K=（i-A[i]+1+n）%n，不得分个数自增</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//第二步：寻找最优的ansk（当K=ansk时，A数组中得分个数最多）</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//递推式当K = i - 1增大到到K = i时</span>            <span class="token comment">//在K = i - 1时不得分的继续不得分，但是当K = i - 1转换到K = i时，处于A[0]的元素开始得分</span>            myk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>myk<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>myk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>myk<span class="token punctuation">[</span>ansk<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//K=ansk时，此时A数组中得分个数最多</span>                ansk<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ansk<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-10：N-叉树的前序遍历"><a href="#3-10：N-叉树的前序遍历" class="headerlink" title="3.10：N 叉树的前序遍历"></a><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">3.10：N 叉树的前序遍历</a></h3><h4 id="题意-9"><a href="#题意-9" class="headerlink" title="题意"></a>题意</h4><p>给定一个 n 叉树的根节点  root ，返回 其节点值的 前序遍历 。</p><p>n 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 null 分隔（请参见示例）。</p><p><strong>示例1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png" alt="img" style="zoom:67%;" / loading="lazy"></p><pre class="language-none"><code class="language-none">输入：root &#x3D; [1,null,3,2,4,null,5,6]输出：[1,3,5,6,2,4]</code></pre><p><strong>示例2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png" alt="img" style="zoom:67%;" / loading="lazy"></p><pre class="language-none"><code class="language-none">输入：root &#x3D; [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]输出：[1,2,3,6,7,11,14,4,8,12,5,9,13,10]</code></pre><p><strong>提示：</strong></p><ul><li>节点总数在范围 $[0, 10^4]$内</li><li>$0 &lt;= Node.val &lt;= 10^4$</li><li>n 叉树的高度小于或等于 <code>1000</code></li></ul><h4 id="题解一：递归"><a href="#题解一：递归" class="headerlink" title="题解一：递归"></a>题解一：递归</h4><p>直接参照二叉树前序遍历即可，很简单。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*// Definition for a Node.class Node &#123;public:    int val;    vector&lt;Node*> children;    Node() &#123;&#125;    Node(int _val) &#123;        val = _val;    &#125;    Node(int _val, vector&lt;Node*> _children) &#123;        val = _val;        children = _children;    &#125;&#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>root<span class="token operator">-></span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">preorder</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="题解二：迭代"><a href="#题解二：迭代" class="headerlink" title="题解二：迭代"></a>题解二：迭代</h4><p>通过栈模拟递归操作。前序遍历，我们先遍历当前节点，再从左到右遍历其每个子树。由于栈是<strong>后进先出</strong>的原理，于是我们从右到左入栈，然后出栈顺序便满足了从左到右遍历每个子树。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*// Definition for a Node.class Node &#123;public:    int val;    vector&lt;Node*> children;    Node() &#123;&#125;    Node(int _val) &#123;        val = _val;    &#125;    Node(int _val, vector&lt;Node*> _children) &#123;        val = _val;        children = _children;    &#125;&#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">preorder</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> sta<span class="token punctuation">;</span>        sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            Node<span class="token operator">*</span> now<span class="token operator">=</span>sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>now<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>now<span class="token operator">-></span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*// Definition for a Node.class Node &#123;    public int val;    public List&lt;Node> children;    public Node() &#123;&#125;    public Node(int _val) &#123;        val = _val;    &#125;    public Node(int _val, List&lt;Node> _children) &#123;        val = _val;        children = _children;    &#125;&#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">preorder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//尾部插入</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> now<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//检索并删除</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>now<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-11：统计最高分的节点数目"><a href="#3-11：统计最高分的节点数目" class="headerlink" title="3.11：统计最高分的节点数目"></a><a href="https://leetcode-cn.com/problems/count-nodes-with-the-highest-score/">3.11：统计最高分的节点数目</a></h3><h4 id="题意-10"><a href="#题意-10" class="headerlink" title="题意"></a>题意</h4><p>给你一棵根节点为 0 的 二叉树 ，它总共有 n 个节点，节点编号为 0 到 n - 1 。同时给你一个下标从 0 开始的整数数组 parents 表示这棵树，其中 parents[i] 是节点 i 的父节点。由于节点 0 是根，所以 parents[0] == -1 。</p><p>一个子树的 大小 为这个子树内节点的数目。每个节点都有一个与之关联的 分数 。求出某个节点分数的方法是，将这个节点和与它相连的边全部 删除 ，剩余部分是若干个 非空 子树，这个节点的 分数 为所有这些子树 大小的乘积 。</p><p>请你返回有 最高得分 节点的 数目 。</p><p><strong>示例1：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/example-1.png" alt="example-1" loading="lazy"></p><pre class="language-none"><code class="language-none">输入：parents &#x3D; [-1,2,0,2,0]输出：3解释：- 节点 0 的分数为：3 * 1 &#x3D; 3- 节点 1 的分数为：4 &#x3D; 4- 节点 2 的分数为：1 * 1 * 2 &#x3D; 2- 节点 3 的分数为：4 &#x3D; 4- 节点 4 的分数为：4 &#x3D; 4最高得分为 4 ，有三个节点得分为 4 （分别是节点 1，3 和 4 ）。</code></pre><p><strong>示例2：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/example-2.png" alt="example-2" loading="lazy"></p><pre class="language-none"><code class="language-none">输入：parents &#x3D; [-1,2,0]输出：2解释：- 节点 0 的分数为：2 &#x3D; 2- 节点 1 的分数为：2 &#x3D; 2- 节点 2 的分数为：1 * 1 &#x3D; 1最高分数为 2 ，有两个节点分数为 2 （分别为节点 0 和 1 ）。</code></pre><p><strong>提示：</strong></p><ul><li>n == parents.length</li><li>$2 &lt;= n &lt;= 10^5$</li><li>parents[0] == -1</li><li>对于 i != 0 ，有 0 &lt;= parents[i] &lt;= n - 1</li><li>parents 表示一棵二叉树。</li></ul><h4 id="题解：DFS"><a href="#题解：DFS" class="headerlink" title="题解：DFS"></a>题解：DFS</h4><p>首先将二叉树还原，可以直接通过二维数组保存。直接定义两个数组：cnt[]，score[]，分别表示：</p><ul><li>cnt[i]：记录以i为根节点的子树节点个数（包括自身）</li><li>score[i]：表示当前节点的分数</li></ul><p>遍历整个二叉树，保存cnt[i]；对于二叉树中节点可以分为三类：</p><ul><li>有左孩子或右孩子（叶子节点）</li><li>有左孩子、右孩子，无父亲节点（也就是整个二叉树的根节点）</li><li>有左孩子、右孩子和父亲节点（中间结点）</li></ul><p>现在需要计算当删除当前节点i所连的所有边后，计算剩余非空子树大小的乘积。</p><p>假设当前节点为i，左孩子为l（如果存在），右孩子为r（如果存在），父亲节点为par（如果存在）</p><p>于是：score[i]=cnt[l]*cnt[r]*cnt[par]</p><p>如果其中有不存在的即可不用计算。于是从score[]数组中选出最高得分，并判断存在多少个即可。</p><p>注意：数据量比较大，需要开long long</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tree<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ll score<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token operator">+=</span><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cnt<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">countHighestScoreNodes</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> parents<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>parents<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            tree<span class="token punctuation">[</span>parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ll maxnum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                num<span class="token operator">*=</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>res<span class="token operator">+=</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res<span class="token operator">=</span>n<span class="token operator">-</span>res<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> num<span class="token operator">*=</span>res<span class="token punctuation">;</span>            score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">;</span>            maxnum<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxnum<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>maxnum<span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token comment">//表示树</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tree<span class="token punctuation">;</span><span class="token comment">//cnt[i]:记录以i为根节点的子树节点个数（包括自身）</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//score[i]:表示当前节点的分数</span><span class="token keyword">long</span> score<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res<span class="token operator">+=</span><span class="token function">dfs</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cnt<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countHighestScoreNodes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parents<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> parents<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        tree<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>score<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> maxnum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>resnum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>resnum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//resnum==1，是因为需要删除当前节点</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>resnum<span class="token operator">+=</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>num<span class="token operator">*=</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果当前节点存在父节点，那除了子树节点外，还存在第三堆，如样例1节点2所示</span>resnum<span class="token operator">=</span>n<span class="token operator">-</span>resnum<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resnum<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> num<span class="token operator">*=</span>resnum<span class="token punctuation">;</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">;</span>maxnum<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxnum<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token operator">:</span>score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>maxnum<span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-12：N-叉树的后序遍历"><a href="#3-12：N-叉树的后序遍历" class="headerlink" title="3.12：N 叉树的后序遍历"></a><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/">3.12：N 叉树的后序遍历</a></h3><h4 id="题意-11"><a href="#题意-11" class="headerlink" title="题意"></a>题意</h4><p>给定一个 n 叉树的根节点 root ，返回 其节点值的 后序遍历 。</p><p>n 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 null 分隔（请参见示例）。</p><p><strong>示例1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">输入：root &#x3D; [1,null,3,2,4,null,5,6]输出：[5,6,3,2,4,1]</code></pre><p><strong>示例2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">输入：root &#x3D; [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]输出：[2,6,14,11,7,3,12,8,4,13,9,10,5,1]</code></pre><p><strong>提示：</strong></p><ul><li>节点总数在范围 $[0, 10^4]$ 内</li><li>$0 &lt;= Node.val &lt;= 10^4$</li><li>n 叉树的高度小于或等于 <code>1000</code></li></ul><h4 id="题解一：递归-1"><a href="#题解一：递归-1" class="headerlink" title="题解一：递归"></a>题解一：递归</h4><p>和3.10的题目类似</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*// Definition for a Node.class Node &#123;public:    int val;    vector&lt;Node*> children;    Node() &#123;&#125;    Node(int _val) &#123;        val = _val;    &#125;    Node(int _val, vector&lt;Node*> _children) &#123;        val = _val;        children = _children;    &#125;&#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>root<span class="token operator">-></span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">postorder</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="题解二：迭代-1"><a href="#题解二：迭代-1" class="headerlink" title="题解二：迭代"></a>题解二：迭代</h4><p>见3.10题解</p><p><strong>C++代码</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*// Definition for a Node.class Node &#123;public:    int val;    vector&lt;Node*> children;    Node() &#123;&#125;    Node(int _val) &#123;        val = _val;    &#125;    Node(int _val, vector&lt;Node*> _children) &#123;        val = _val;        children = _children;    &#125;&#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">postorder</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> sta<span class="token punctuation">;</span>        set<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> vis<span class="token punctuation">;</span>        sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            Node<span class="token operator">*</span> now<span class="token operator">=</span>sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">-></span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>vis<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>now<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>now<span class="token operator">-></span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            vis<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*// Definition for a Node.class Node &#123;    public int val;    public List&lt;Node> children;    public Node() &#123;&#125;    public Node(int _val) &#123;        val = _val;    &#125;    public Node(int _val, List&lt;Node> _children) &#123;        val = _val;        children = _children;    &#125;&#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">postorder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> now<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//从尾部插入</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>now<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-14：两个列表的最小索引总和"><a href="#3-14：两个列表的最小索引总和" class="headerlink" title="3.14：两个列表的最小索引总和"></a><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/">3.14：两个列表的最小索引总和</a></h3><h4 id="题意-12"><a href="#题意-12" class="headerlink" title="题意"></a>题意</h4><p>假设 Andy 和 Doris 想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p><p>你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设答案总是存在。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入: list1 &#x3D; [&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]，list2 &#x3D; [&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]输出: [&quot;Shogun&quot;]解释: 他们唯一共同喜爱的餐厅是“Shogun”。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入:list1 &#x3D; [&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]，list2 &#x3D; [&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]输出: [&quot;Shogun&quot;]解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。</code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;= list1.length, list2.length &lt;= 1000</li><li>1 &lt;= list1[i].length, list2[i].length &lt;= 30</li><li>list1[i] 和 list2[i] 由空格 ‘ ‘ 和英文字母组成。</li><li>list1 的所有字符串都是 唯一 的。</li><li>list2 中的所有字符串都是 唯一 的。</li></ul><h4 id="题解一：暴力"><a href="#题解一：暴力" class="headerlink" title="题解一：暴力"></a>题解一：暴力</h4><p>直接两重循环判断</p><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findRestaurant</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>list2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        num<span class="token operator">=</span>i<span class="token operator">+</span>j<span class="token punctuation">;</span>                        list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token operator">==</span>num<span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="题解二：哈希"><a href="#题解二：哈希" class="headerlink" title="题解二：哈希"></a>题解二：哈希</h4><p>通过哈希表存储其中一个集合，这里对list1进行存储，key表示字符串，value表示字符串在list1中出现的位置。</p><p>于是通过遍历list2，判断list2[i]是否在哈希表中出现，如果出现在比较索引大小即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">findRestaurant</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> list1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>list1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token operator">=</span>list2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mp<span class="token punctuation">[</span>list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    num<span class="token operator">=</span>mp<span class="token punctuation">[</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">;</span>                    ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token operator">==</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findRestaurant</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>list1<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token operator">=</span>list2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token operator">&lt;</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    num<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token operator">==</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-15：统计按位或能得到最大值的子集数目"><a href="#3-15：统计按位或能得到最大值的子集数目" class="headerlink" title="3.15：统计按位或能得到最大值的子集数目"></a><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/">3.15：统计按位或能得到最大值的子集数目</a></h3><h4 id="题意-13"><a href="#题意-13" class="headerlink" title="题意"></a>题意</h4><p>给你一个整数数组 nums ，请你找出 nums 子集 按位或 可能得到的 最大值 ，并返回按位或能得到最大值的 不同非空子集的数目 。</p><p>如果数组 a 可以由数组 b 删除一些元素（或不删除）得到，则认为数组 a 是数组 b 的一个 子集 。如果选中的元素下标位置不一样，则认为两个子集 不同 。</p><p>对数组 a 执行 按位或 ，结果等于 a[0] OR a[1] OR … OR a[a.length - 1]（下标从 0 开始）。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [3,1]输出：2解释：子集按位或能得到的最大值是 3 。有 2 个子集按位或可以得到 3 ：- [3]- [3,1]</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [2,2,2]输出：7解释：[2,2,2] 的所有非空子集的按位或都可以得到 2 。总共有 23 - 1 &#x3D; 7 个子集。</code></pre><p><strong>示例3：</strong></p><pre class="language-none"><code class="language-none">输入：nums &#x3D; [3,2,1,5]输出：6解释：子集按位或可能的最大值是 7 。有 6 个子集按位或可以得到 7 ：- [3,5]- [3,1,5]- [3,2,5]- [3,2,1,5]- [2,5]- [2,1,5]</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums.length &lt;= 16$</li><li>$1 &lt;= nums[i] &lt;= 10^5$</li></ul><h4 id="题解：枚举"><a href="#题解：枚举" class="headerlink" title="题解：枚举"></a>题解：枚举</h4><p>首先数组长度最大为16，可知子集最大个数为：$2^{16}=65536$，对于每个子集的按位或操作将是个常数，最大为16，时间复杂度不大，可以考虑枚举。</p><p>枚举可以用<strong>二进制</strong>枚举也可以通过<strong>回溯</strong>枚举。这里采用回溯枚举。</p><p>因为是按位或操作，所以<strong>整个数组的按位或将是最大值</strong>（理解或的基本操作后，得出这个结论并不难），同时整个数组也是一个子集，于是只需判断其他子集的按位或是否为这个值即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>maxnum<span class="token punctuation">,</span>ans<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> num<span class="token operator">|=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span>maxnum<span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">countMaxOrSubsets</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxnum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//整个数组元素的按位或绝对是所能满足的最大值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> maxnum<span class="token operator">|=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-17：词典中最长的单词"><a href="#3-17：词典中最长的单词" class="headerlink" title="3.17：词典中最长的单词"></a><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary/">3.17：词典中最长的单词</a></h3><p>给出一个字符串数组 words 组成的一本英语词典。返回 words 中最长的一个单词，该单词是由 words 词典中其他单词逐步添加一个字母组成。</p><p>若其中有多个可行的答案，则返回答案中字典序最小的单词。若无答案，则返回空字符串。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：words &#x3D; [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;, &quot;world&quot;]输出：&quot;world&quot;解释： 单词&quot;world&quot;可由&quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, 和 &quot;worl&quot;逐步添加一个字母组成。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：words &#x3D; [&quot;a&quot;, &quot;banana&quot;, &quot;app&quot;, &quot;appl&quot;, &quot;ap&quot;, &quot;apply&quot;, &quot;apple&quot;]输出：&quot;apple&quot;解释：&quot;apply&quot; 和 &quot;apple&quot; 都能由词典中的单词组成。但是 &quot;apple&quot; 的字典序小于 &quot;apply&quot;</code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;= words.length &lt;= 1000</li><li>1 &lt;= words[i].length &lt;= 30</li><li>所有输入的字符串 words[i] 都只包含小写字母。</li></ul><h4 id="题解：哈希"><a href="#题解：哈希" class="headerlink" title="题解：哈希"></a>题解：哈希</h4><p>题目需要判断是否存在一个单词，它由词典中其他单词逐步添加一个字母组成。同时它的长度最长，且字典序最小。</p><p>我们可以通过set保存词典中所有的字符串，然后遍历所有的字符串</p><ol><li>判断当前字符串是否由词典中其他单词逐步添加一个字母组成</li><li>如果条件1满足，则判断是否是最长的字符串，如果不是则更新。</li><li>如果和原来保存的字符串长度相同，则判断是否是字典序最小</li></ol><p>通过上述三步操作，则可得到答案。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">longestWord</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token operator">&lt;</span>string<span class="token operator">></span> st<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">int</span> maxlen<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            len<span class="token operator">=</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//首先判断是否由词典中其他单词逐步添加一个字母组成</span>            <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//判断是否最长</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">></span>maxlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ans<span class="token operator">=</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>maxlen<span class="token operator">=</span>len<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span>maxlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//判断是否字典序最小</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span> ans<span class="token operator">=</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>maxlen<span class="token operator">=</span>len<span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">></span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">=</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>maxlen<span class="token operator">=</span>len<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-21：两数之和-IV-输入-BST"><a href="#3-21：两数之和-IV-输入-BST" class="headerlink" title="3.21：两数之和 IV - 输入 BST"></a><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/">3.21：两数之和 IV - 输入 BST</a></h3><p>给定一个二叉搜索树 <code>root</code> 和一个目标结果 <code>k</code>，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 <code>true</code>。</p><p><strong>示例1：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/sum_tree_1.jpg" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">输入: root &#x3D; [5,3,6,2,4,null,7], k &#x3D; 9输出: true</code></pre><p><strong>示例2：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/sum_tree_2.jpg" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">输入: root &#x3D; [5,3,6,2,4,null,7], k &#x3D; 28输出: false</code></pre><p><strong>提示：</strong></p><ul><li>二叉树的节点个数的范围是 $[1, 10^4]$.</li><li>$-10^4 &lt;= Node.val &lt;= 10^4$</li><li><code>root</code> 为二叉搜索树</li><li>$-10^5 &lt;= k &lt;= 10^5$</li></ul><h4 id="题解：dfs-哈希"><a href="#题解：dfs-哈希" class="headerlink" title="题解：dfs+哈希"></a>题解：dfs+哈希</h4><p>这题方法很多，dfs和bfs都可以，同时加上BST的特殊性，还可以通过中序遍历+双指针解决。这里选择最简单的 dfs+哈希。</p><p>首先遍历整个BST，将各节点的值存入到哈希表中，然后遍历哈希表，判断是否存在两个不同的数的和等于k即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for a binary tree node. * struct TreeNode &#123; *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125; * &#125;; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>root<span class="token operator">-></span>val<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">findTarget</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">:</span>mp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>k<span class="token operator">-</span>it<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>it<span class="token punctuation">.</span>first<span class="token operator">*</span><span class="token number">2</span><span class="token operator">!=</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-22：如果相邻两个颜色均相同则删除当前颜色"><a href="#3-22：如果相邻两个颜色均相同则删除当前颜色" class="headerlink" title="3.22：如果相邻两个颜色均相同则删除当前颜色"></a><a href="https://leetcode-cn.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/">3.22：如果相邻两个颜色均相同则删除当前颜色</a></h3><p>总共有 n 个颜色片段排成一列，每个颜色片段要么是 ‘A’ 要么是 ‘B’ 。给你一个长度为 n 的字符串 colors ，其中 colors[i] 表示第 i 个颜色片段的颜色。</p><p>Alice 和 Bob 在玩一个游戏，他们 轮流 从这个字符串中删除颜色。Alice 先手 。</p><p>如果一个颜色片段为 ‘A’ 且 相邻两个颜色 都是颜色 ‘A’ ，那么 Alice 可以删除该颜色片段。Alice 不可以 删除任何颜色 ‘B’ 片段。<br>如果一个颜色片段为 ‘B’ 且 相邻两个颜色 都是颜色 ‘B’ ，那么 Bob 可以删除该颜色片段。Bob 不可以 删除任何颜色 ‘A’ 片段。<br>Alice 和 Bob 不能 从字符串两端删除颜色片段。<br>如果其中一人无法继续操作，则该玩家 输 掉游戏且另一玩家 获胜 。<br>假设 Alice 和 Bob 都采用最优策略，如果 Alice 获胜，请返回 true，否则 Bob 获胜，返回 false。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：colors &#x3D; &quot;AAABABB&quot;输出：true解释：AAABABB -&gt; AABABBAlice 先操作。她删除从左数第二个 &#39;A&#39; ，这也是唯一一个相邻颜色片段都是 &#39;A&#39; 的 &#39;A&#39; 。现在轮到 Bob 操作。Bob 无法执行任何操作，因为没有相邻位置都是 &#39;B&#39; 的颜色片段 &#39;B&#39; 。因此，Alice 获胜，返回 true 。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：colors &#x3D; &quot;AA&quot;输出：false解释：Alice 先操作。只有 2 个 &#39;A&#39; 且它们都在字符串的两端，所以她无法执行任何操作。因此，Bob 获胜，返回 false 。</code></pre><p><strong>示例3：</strong></p><pre class="language-none"><code class="language-none">输入：colors &#x3D; &quot;ABBBBBBBAAA&quot;输出：false解释：ABBBBBBBAAA -&gt; ABBBBBBBAAAlice 先操作。她唯一的选择是删除从右数起第二个 &#39;A&#39; 。ABBBBBBBAA -&gt; ABBBBBBAA接下来轮到 Bob 操作。他有许多选择，他可以选择任何一个 &#39;B&#39; 删除。然后轮到 Alice 操作，她无法删除任何片段。所以 Bob 获胜，返回 false 。</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= colors.length &lt;= 10^5$</li><li><code>colors</code> 只包含字母 <code>&#39;A&#39;</code> 和 <code>&#39;B&#39;</code></li></ul><h4 id="题解：博弈"><a href="#题解：博弈" class="headerlink" title="题解：博弈"></a>题解：博弈</h4><p>通过题意知道Alice只能对A操作，Bob只能对B操作。于是我们只需单独考虑彼此的最优解即可。</p><p>对于Alice而言，只有两边都是A的时候才能对中间的A进行操作，假设此时有连续n个A，如果n&gt;=3，则Alice可以进行n-2次操作，Bob同理。</p><p>于是分别计算出Alice和Bob最多可以进行的操作次数，然后判断即可。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">winnerOfGame</span><span class="token punctuation">(</span>string colors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>num2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>colors<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//计算alice最多可以进行多少次操作</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>colors<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token operator">++</span>num<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span> num1<span class="token operator">+=</span>num<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>                i<span class="token operator">=</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//计算Bob最多可以进行多少次操作</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>colors<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token operator">++</span>num<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span> num2<span class="token operator">+=</span>num<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>                i<span class="token operator">=</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> num1<span class="token operator">></span>num2<span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-23：字典序的第K小数字"><a href="#3-23：字典序的第K小数字" class="headerlink" title="3.23：字典序的第K小数字"></a><a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/">3.23：字典序的第K小数字</a></h3><p>给定整数 <code>n</code> 和 <code>k</code>，返回 <code>[1, n]</code> 中字典序第 <code>k</code> 小的数字。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入: n &#x3D; 13, k &#x3D; 2输出: 10解释: 字典序的排列是 [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]，所以第二小的数字是 10。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入: n &#x3D; 1, k &#x3D; 1输出: 1</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= k &lt;= n &lt;= 10^9$</li></ul><h4 id="题解：字典树"><a href="#题解：字典树" class="headerlink" title="题解：字典树"></a>题解：字典树</h4><p><a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/solution/wu-xu-jie-zhu-shi-cha-shu-ye-neng-rong-yi-li-jie-b/">优质题解</a></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>    ll <span class="token function">get_cnt</span><span class="token punctuation">(</span>ll i<span class="token punctuation">,</span>ll n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ll cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ll a<span class="token operator">=</span>i<span class="token punctuation">,</span>b<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>a<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cnt<span class="token operator">+=</span><span class="token function">min</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-</span>a<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findKthNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ll cnt<span class="token operator">=</span><span class="token function">get_cnt</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">+</span>cnt<span class="token operator">></span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                i<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>p<span class="token operator">+=</span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-24：图片平滑器"><a href="#3-24：图片平滑器" class="headerlink" title="3.24：图片平滑器"></a><a href="https://leetcode-cn.com/problems/image-smoother/">3.24：图片平滑器</a></h3><p>图像平滑器 是大小为 3 x 3 的过滤器，用于对图像的每个单元格平滑处理，平滑处理后单元格的值为该单元格的平均灰度。</p><p>每个单元格的  平均灰度 定义为：该单元格自身及其周围的 8 个单元格的平均值，结果需向下取整。（即，需要计算蓝色平滑器中 9 个单元格的平均值）。</p><p>如果一个单元格周围存在单元格缺失的情况，则计算平均灰度时不考虑缺失的单元格（即，需要计算红色平滑器中 4 个单元格的平均值）。</p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/smoother-grid.jpg" alt="img" loading="lazy"></p><p>给你一个表示图像灰度的 <code>m x n</code> 整数矩阵 <code>img</code> ，返回对图像的每个单元格平滑处理后的图像 。</p><p><strong>示例1：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/smooth-grid.jpg" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">输入:img &#x3D; [[1,1,1],[1,0,1],[1,1,1]]输出:[[0, 0, 0],[0, 0, 0], [0, 0, 0]]解释:对于点 (0,0), (0,2), (2,0), (2,2): 平均(3&#x2F;4) &#x3D; 平均(0.75) &#x3D; 0对于点 (0,1), (1,0), (1,2), (2,1): 平均(5&#x2F;6) &#x3D; 平均(0.83333333) &#x3D; 0对于点 (1,1): 平均(8&#x2F;9) &#x3D; 平均(0.88888889) &#x3D; 0</code></pre><p><strong>示例2：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/smooth2-grid.jpg" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">输入: img &#x3D; [[100,200,100],[200,50,200],[100,200,100]]输出: [[137,141,137],[141,138,141],[137,141,137]]解释:对于点 (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)&#x2F;4) &#x3D; floor(137.5) &#x3D; 137对于点 (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)&#x2F;6) &#x3D; floor(141.666667) &#x3D; 141对于点 (1,1): floor((50+200+200+200+200+100+100+100+100)&#x2F;9) &#x3D; floor(138.888889) &#x3D; 138</code></pre><p><strong>提示：</strong></p><ul><li><code>m == img.length</code></li><li><code>n == img[i].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>0 &lt;= img[i][j] &lt;= 255</code></li></ul><h4 id="题解：模拟-2"><a href="#题解：模拟-2" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>由于数据不大，直接按照题意模拟即可</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">imageSmoother</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> img<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>img<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span>img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token operator">&lt;=</span><span class="token function">min</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">// cout&lt;&lt;img[x][y]&lt;&lt;" ";</span>                        num<span class="token operator">+=</span>img<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">++</span>cnt<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// cout&lt;&lt;endl;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token operator">/</span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-25：阶乘后的零"><a href="#3-25：阶乘后的零" class="headerlink" title="3.25：阶乘后的零"></a><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/">3.25：阶乘后的零</a></h3><p>给定一个整数 <code>n</code> ，返回 <code>n!</code> 结果中尾随零的数量。</p><p>提示 <code>n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1</code></p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：n &#x3D; 3输出：0解释：3! &#x3D; 6 ，不含尾随 0</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：n &#x3D; 5输出：1解释：5! &#x3D; 120 ，有一个尾随 0</code></pre><p><strong>示例3：</strong></p><pre class="language-none"><code class="language-none">输入：n &#x3D; 0输出：0</code></pre><p><strong>提示：</strong></p><ul><li>$0 &lt;= n &lt;= 10^4$</li></ul><h4 id="题解：数学"><a href="#题解：数学" class="headerlink" title="题解：数学"></a>题解：数学</h4><p>由于是求后面零的数量，我们可以知道产生0的情况只能是2<em>5（当然2的倍数 \</em> 5的倍数也可以）</p><p>我们假设需要求n的阶乘，即：1 2 3 4 5 6 …. n</p><p>显然因式分解能够产生2的个数比5的个数会大，可以简单证明：</p><pre class="language-none"><code class="language-none">n&#x3D;5时，2的倍数个数共有3个（2,4&#x3D;2*2），5的倍数共有1个（5）n&#x3D;10时，2的倍数共有8个（2,4&#x3D;2*2,6,8&#x3D;2*2*2,10），5的倍数共有2个（5,10）....</code></pre><p>于是我们只需要求能够因式分解产生5的个数总和即可</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cnt_5<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                x<span class="token operator">/=</span><span class="token number">5</span><span class="token punctuation">;</span>cnt_5<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt_5<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-26：棒球比赛"><a href="#3-26：棒球比赛" class="headerlink" title="3.26：棒球比赛"></a><a href="https://leetcode-cn.com/problems/baseball-game/">3.26：棒球比赛</a></h3><h4 id="题解：栈"><a href="#题解：栈" class="headerlink" title="题解：栈"></a>题解：栈</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">get_num</span><span class="token punctuation">(</span>string x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'-'</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">=</span>x<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">)</span> res<span class="token operator">=</span>res<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> res<span class="token operator">*=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">calPoints</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> ops<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> sta<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>ops<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ops<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ops<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                x<span class="token operator">=</span>sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ops<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                x<span class="token operator">=</span>sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                y<span class="token operator">=</span>sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">get_num</span><span class="token punctuation">(</span>ops<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sta<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span>sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="3-28：交替位二进制数"><a href="#3-28：交替位二进制数" class="headerlink" title="3.28：交替位二进制数"></a><a href="https://leetcode-cn.com/problems/binary-number-with-alternating-bits/">3.28：交替位二进制数</a></h3><p>给定一个正整数，检查它的二进制表示是否总是 0、1 交替出现：换句话说，就是二进制表示中相邻两位的数字永不相同。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：n &#x3D; 5输出：true解释：5 的二进制表示是：101</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：n &#x3D; 7输出：false解释：7 的二进制表示是：111.</code></pre><p><strong>示例3：</strong></p><pre class="language-none"><code class="language-none">输入：n &#x3D; 11输出：false解释：11 的二进制表示是：1011.</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= n &lt;= 2^{31} - 1$</li></ul><h4 id="题解：模拟-3"><a href="#题解：模拟-3" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">hasAlternatingBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> prenum<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                prenum<span class="token operator">=</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>prenum<span class="token operator">==</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            prenum<span class="token operator">=</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>            n<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode2022年每日一题3月打卡汇总&quot;&gt;&lt;a href=&quot;#LeetCode2022年每日一题3月打卡汇总&quot; class=&quot;headerlink&quot; title=&quot;LeetCode2022年每日一题3月打卡汇总&quot;&gt;&lt;/a&gt;LeetCode2022年每日一题</summary>
      
    
    
    
    <category term="LeetCode每日一题" scheme="http://bbstudy.net/categories/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>机器学习（西瓜书）学习笔记</title>
    <link href="http://bbstudy.net/Machine-Learning/"/>
    <id>http://bbstudy.net/Machine-Learning/</id>
    <published>2022-09-07T13:19:54.944Z</published>
    <updated>2022-09-11T11:56:12.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="机器学习（西瓜书）学习笔记"><a href="#机器学习（西瓜书）学习笔记" class="headerlink" title="机器学习（西瓜书）学习笔记"></a>机器学习（西瓜书）学习笔记</h2><h3 id="0、总体架构"><a href="#0、总体架构" class="headerlink" title="0、总体架构"></a>0、总体架构</h3><blockquote><p>第1部分：第1~3章，机器学习基础知识</p><p>第2部分：第4~10章，一些经典而常用的机器学习方法</p><p>第3部分：第11~16章，进阶知识</p></blockquote><h3 id="第1章：绪论"><a href="#第1章：绪论" class="headerlink" title="第1章：绪论"></a>第1章：绪论</h3><h4 id="1-1-引言"><a href="#1-1-引言" class="headerlink" title="1.1 引言"></a>1.1 引言</h4><blockquote><ul><li>机器学习：致力于研究如何通过计算机的手段，利用经验来改善系统自身的性能。</li><li>机器学习主要内容：计算机从数据中产生“数据模型”的算法，即“学习算法”</li></ul></blockquote><h4 id="1-2-基础术语"><a href="#1-2-基础术语" class="headerlink" title="1.2 基础术语"></a>1.2 基础术语</h4><ul><li><p>分类vs回归</p><p>分类：学习任务想要预测的是离散值（如：是、否）</p><p>回归：想要预测的是连续值（如：0.95）</p></li><li><p>监督学习 vs 无监督学习</p><p>监督学习：训练数据拥有标记信息（如：分类、回归）</p><p>无监督学习：训练数据没有标记信息（如：聚类）</p></li><li>泛化能力：学得模型适用于新样本的能力</li></ul><h4 id="1-3-假设空间"><a href="#1-3-假设空间" class="headerlink" title="1.3 假设空间"></a>1.3 假设空间</h4><ul><li><p>归纳 vs 演绎</p><p>归纳：从特殊到一般的“泛化”</p><p>演绎：从一般到特殊的“特化”</p></li><li><p>广义归纳学习 vs 狭义归纳学习</p><p>广义归纳学习：从样例中学习</p><p>狭义归纳学习：从训练数据中学得概念</p></li><li>假设空间：可以理解为一个搜索树（个人理解）</li></ul><h4 id="1-4-归纳偏好"><a href="#1-4-归纳偏好" class="headerlink" title="1.4 归纳偏好"></a>1.4 归纳偏好</h4><ul><li>概念：机器学习算法在学习过程中<strong>对某种类型假设的偏好</strong>，称为“归纳偏好”</li><li>”奥卡姆剃刀“（Occam’s razor）原则：若有多个假设与观察一致，则选<strong>最简单</strong>的那个</li><li><p>“没有免费的午餐”定理（No Free Lunch Theorem，简称NFL）：无论学习算法多聪明或者多笨拙，它们的期望值相同。前提：<strong>所有“问题”出现的机会、或所有问题同等重要</strong></p><blockquote><p>寓意：脱离具体问题，空泛地谈论“什么学习算法更好”毫无意义（因为若考虑所有潜在的问题，则所有学习算法都一样好）</p></blockquote></li></ul><p>补充：析取式、合取式、析合范式、合取范式</p><blockquote><p>析取式：p∨q（或）</p><p>合取式：p∧q（且）</p><p>合取范式：多个析取式的合取</p><p>析合范式：多个合取式的析取</p></blockquote><h3 id="第2章：模型评估与选择"><a href="#第2章：模型评估与选择" class="headerlink" title="第2章：模型评估与选择"></a>第2章：模型评估与选择</h3><h4 id="2-1-经验误差与过拟合"><a href="#2-1-经验误差与过拟合" class="headerlink" title="2.1 经验误差与过拟合"></a>2.1 经验误差与过拟合</h4><ul><li><p>训练误差（经验误差） vs 泛化误差</p><blockquote><p>经验误差：学习器在训练集上的误差</p><p>泛化误差：在新样本上产生的误差</p></blockquote></li><li><p>过拟合 vs 欠拟合</p><blockquote><p>过拟合：由于学习能力过于强大，把训练样本所包含的不太一般的特性都学到了，把训练样本自身的一些特点当作了所有潜在样本都有具有的一般性质</p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106105741101.png" alt="image-20211106105741101" loading="lazy"></p></blockquote></li></ul><h4 id="2-2-评估方法"><a href="#2-2-评估方法" class="headerlink" title="2.2 评估方法"></a>2.2 评估方法</h4><p>测试数据尽可能不在训练集中出现、未在训练过程中使用过</p><ol><li><p><strong>留出法</strong></p><blockquote><p>直接将数据集D划分为两个互斥的集合，一个为训练集，一个为测试集。但是对于训练集和数据集的选择比较困难，因为<strong>测试集小，评估结果方差较大；训练集小，评估结果偏差较大</strong>。</p><p>常见做法：将大约2/3~4/5的样本用于训练，其余用于测试</p></blockquote></li><li><p><strong>交叉验证法</strong></p><blockquote><p>将数据集划分为k个大小相似的互斥子集，即D=D1$\cup$D2$\cup$…$\cup$Dk，$D_i \cap D_j=\varnothing$</p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106120046754.png" alt="image-20211106120046754" loading="lazy"></p><p>但是<strong>当数据集比较大时，训练m个模型的计算开销难以忍受，还要考虑调参等</strong></p></blockquote></li><li><p><strong>自助法</strong></p><blockquote><p>简单可理解为：有放回采样，可能选择的训练集中包含多个重复的数据，始终没有出现的数据即作为测试数据。</p><p>自助法产生的数据改变了初始数据集的分布，会引入<strong>估计偏差</strong>，但是对<strong>集成学习</strong>等有很大的帮助</p><p>在初始数据足够时，留出法和交叉验证法更常用一些</p></blockquote></li><li><p>调参与最终模型</p><p>模型评估与选择中用于评估测试的数据集常称为：“验证集”</p><p>模型在实际使用中遇到的数据称为：“测试数据”</p><p>我们把训练数据划分为：训练集和验证集，基于验证集进行模型选择和调参</p></li></ol><h4 id="2-3-性能度量"><a href="#2-3-性能度量" class="headerlink" title="2.3 性能度量"></a>2.3 性能度量</h4><p>对学习器泛化性能进行评估，不仅需要有效可行的实验估计方法，害需要有衡量模型泛化能力的评价标准</p><h5 id="2-3-1-错误率与精度"><a href="#2-3-1-错误率与精度" class="headerlink" title="2.3.1 错误率与精度"></a>2.3.1 <strong>错误率与精度</strong></h5><div class="table-container"><table><thead><tr><th>错误率：<img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106154210154.png" alt="image-20211106154210154" loading="lazy"></th><th>精度：<img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106154253385.png" alt="image-20211106154253385" loading="lazy"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><h5 id="2-3-2-查准率、查全率与F1"><a href="#2-3-2-查准率、查全率与F1" class="headerlink" title="2.3.2 查准率、查全率与F1"></a>2.3.2 <strong>查准率、查全率与F1</strong></h5><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106155728177.png" alt="image-20211106155728177" loading="lazy"></p><div class="table-container"><table><thead><tr><th>查准率：<img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106155856094.png" alt="image-20211106155856094" loading="lazy"></th><th>查全率：<img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106155904983.png" alt="image-20211106155904983" loading="lazy"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><ul><li><strong>P-R曲线、平衡点（查准率=查全率）</strong></li></ul><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106155928767.png" alt="image-20211106155928767" loading="lazy"></p><ul><li><strong>F1 和 $F_\beta$</strong></li></ul><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><h4 id="2-3-3-ROC-和-AUC"><a href="#2-3-3-ROC-和-AUC" class="headerlink" title="2.3.3 ROC 和 AUC"></a>2.3.3 ROC 和 AUC</h4><div class="table-container"><table><thead><tr><th>真正率：<img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106162309651.png" alt="image-20211106162309651" loading="lazy"></th><th>假真率：<img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106162329732.png" alt="image-20211106162329732" loading="lazy"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106162343357.png" alt="image-20211106162343357" loading="lazy"></p><h5 id="2-3-4-代价敏感错误率与代价曲线"><a href="#2-3-4-代价敏感错误率与代价曲线" class="headerlink" title="2.3.4 代价敏感错误率与代价曲线"></a>2.3.4 <strong>代价敏感错误率与代价曲线</strong></h5><div class="table-container"><table><thead><tr><th><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106162540156.png" alt="image-20211106162540156" loading="lazy"></th><th><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106162547865.png" alt="image-20211106162547865" loading="lazy"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>$cost<em>{ij}$：表示第i类样本被预测为第j类样本的代价。损失程度相差越大，$cost</em>{01}$与$cost_{10}$值相差越大</p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106162831514.png" alt="image-20211106162831514" style="zoom:75%;" / loading="lazy"></p><h4 id="2-4-比较检验"><a href="#2-4-比较检验" class="headerlink" title="2.4 比较检验"></a>2.4 比较检验</h4><ol><li>假设检验<ul><li>二项检验</li><li>t检验</li></ul></li><li>交叉验证t检验</li><li>McNemar检验</li><li>Friedman检验 与 Nemenyi后续检验</li></ol><h4 id="2-5-偏差与方差"><a href="#2-5-偏差与方差" class="headerlink" title="2.5 偏差与方差"></a>2.5 偏差与方差</h4><ul><li><p>偏差 vs 方差</p><p>偏差：期望输出与真实标记的差别</p></li><li><strong>泛化误差=偏差+方差+噪声</strong></li></ul><blockquote><p>偏差刻画了学习算法本身的<strong>拟合能力</strong>；</p><p>方差度量了同样大小的数据集的变动所导致的学习性能的变化，刻画了<strong>数据扰动</strong>所造成的影响；</p><p>噪声表达了当前任务下任何学习算法所能达到的期望泛化误差的下界，刻画了<strong>学习问题本身的难度</strong>。</p></blockquote><p><strong>偏差-方差窘境：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211106171959724.png" alt="image-20211106171959724" style="zoom:70%;" / loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;机器学习（西瓜书）学习笔记&quot;&gt;&lt;a href=&quot;#机器学习（西瓜书）学习笔记&quot; class=&quot;headerlink&quot; title=&quot;机器学习（西瓜书）学习笔记&quot;&gt;&lt;/a&gt;机器学习（西瓜书）学习笔记&lt;/h2&gt;&lt;h3 id=&quot;0、总体架构&quot;&gt;&lt;a href=&quot;#0、总</summary>
      
    
    
    
    <category term="机器学习" scheme="http://bbstudy.net/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://bbstudy.net/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="http://bbstudy.net/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="gra_stu" scheme="http://bbstudy.net/tags/gra-stu/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode2021年每日一题11月打卡汇总</title>
    <link href="http://bbstudy.net/LeetCode-November-2021/"/>
    <id>http://bbstudy.net/LeetCode-November-2021/</id>
    <published>2022-09-07T13:19:54.944Z</published>
    <updated>2022-09-11T12:04:41.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode2021年每日一题11月打卡汇总"><a href="#LeetCode2021年每日一题11月打卡汇总" class="headerlink" title="LeetCode2021年每日一题11月打卡汇总"></a>LeetCode2021年每日一题11月打卡汇总</h2><h3 id="11-15-灯泡开关"><a href="#11-15-灯泡开关" class="headerlink" title="11.15 灯泡开关"></a><a href="https://leetcode-cn.com/problems/bulb-switcher/">11.15 灯泡开关</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。</p><p>第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。</p><p>找出并返回 n 轮后有多少个亮着的灯泡。</p><p><strong>提示：</strong></p><ul><li>$0 &lt;= n &lt;= 10^9$</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/bulb.jpg" alt="img" loading="lazy"></p><p>输入：n = 3<br>输出：1<br>解释：<br>初始时, 灯泡状态 [关闭, 关闭, 关闭].<br>第一轮后, 灯泡状态 [开启, 开启, 开启].<br>第二轮后, 灯泡状态 [开启, 关闭, 开启].<br>第三轮后, 灯泡状态 [开启, 关闭, 关闭].</p><p>你应该返回 1，因为只有一个灯泡还亮着。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：n = 0<br>输出：0</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：n = 1<br>输出：1</p></blockquote><h4 id="题解：规律"><a href="#题解：规律" class="headerlink" title="题解：规律"></a>题解：规律</h4><p>首先看数据范围n高达$10^9$，所以显然线性复杂度解决不了，于是尝试打表寻找规律，发现如下：</p><blockquote><p>0:0</p><p>1:1</p><p>2:1</p><p>3:1</p><p>4:1</p><p>5:2</p><p>…</p><p>8:2</p><p>…</p></blockquote><p>打表了n从1-100的情况，可以发现，最终灯泡亮的数目以1 3 5 7 9…（公差为2的等差数列增长），所以提前用一数组存储等差数列和在$10^9$以内的情况。</p><p>遍历数组，若当前遍历的数（即为等差数列和）大于或等于n时，则表示找到答案。于是代码如下：</p><p><strong>C++代码</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">bulbSwitch</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ve<span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ve<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token operator">+=</span>x<span class="token punctuation">;</span>x<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// cout&lt;&lt;ve.size()&lt;&lt;endl;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>ve<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ve<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">-</span>ve<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p> <strong>Java代码</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">bulbSwitch</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token operator">+=</span>x<span class="token punctuation">;</span>x<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">>=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="11-16-完美矩形"><a href="#11-16-完美矩形" class="headerlink" title="11.16 完美矩形"></a><a href="https://leetcode-cn.com/problems/perfect-rectangle/">11.16 完美矩形</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给你一个数组 rectangles ，其中 rectangles[i] = [xi, yi, ai, bi] 表示一个坐标轴平行的矩形。这个矩形的左下顶点是 (xi, yi) ，右上顶点是 (ai, bi) 。</p><p>如果所有矩形一起精确覆盖了某个矩形区域，则返回 true ；否则，返回 false 。</p><p><strong>提示：</strong></p><ul><li>$1 &lt;= rectangles.length &lt;= 2 * 10^4$</li><li>$rectangles[i].length == 4$</li><li>$10^5 &lt;= xi, yi, ai, bi &lt;= 10^5$</li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/perectrec1-plane.jpg" alt="img" loading="lazy"></p><p>输入：rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]<br>输出：true<br>解释：5 个矩形一起可以精确地覆盖一个矩形区域。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/perfectrec2-plane.jpg" alt="img" loading="lazy"></p><p>输入：rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]<br>输出：false<br>解释：两个矩形之间有间隔，无法覆盖成一个矩形。</p></blockquote><p><strong>示例3：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/perfectrec3-plane.jpg" alt="img" loading="lazy"></p><p>输入：rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[3,2,4,4]]<br>输出：false<br>解释：图形顶端留有空缺，无法覆盖成一个矩形。</p></blockquote><p><strong>示例4：</strong></p><blockquote><p><img src="https://assets.leetcode.com/uploads/2021/03/27/perfecrrec4-plane.jpg" alt="img" loading="lazy"></p><p>输入：rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]<br>输出：false<br>解释：因为中间有相交区域，虽然形成了矩形，但不是精确覆盖。</p></blockquote><h4 id="题解：hash"><a href="#题解：hash" class="headerlink" title="题解：hash"></a>题解：hash</h4><ol><li><p>官方做法：<a href="https://leetcode-cn.com/problems/perfect-rectangle/solution/wan-mei-ju-xing-by-leetcode-solution-ty8q/">https://leetcode-cn.com/problems/perfect-rectangle/solution/wan-mei-ju-xing-by-leetcode-solution-ty8q/</a></p><p>精确覆盖意味着：</p><p>矩形区域中不能有空缺，即矩形区域的面积等于所有矩形的面积之和；<br>矩形区域中不能有相交区域。<br>我们需要一个统计量来判定是否存在相交区域。由于精确覆盖意味着矩形的边和顶点会重合在一起，我们不妨统计每个矩形顶点的出现次数。同一个位置至多只能存在四个顶点，在满足该条件的前提下，如果矩形区域中有相交区域，这要么导致矩形区域四角的顶点出现不止一次，要么导致非四角的顶点存在出现一次或三次的顶点；</p><p>因此要满足精确覆盖，除了要满足矩形区域的面积等于所有矩形的面积之和，还要满足矩形区域四角的顶点只能出现一次，且其余顶点的出现次数只能是两次或四次。</p><p>在代码实现时，我们可以遍历矩形数组，计算矩形区域四个顶点的位置，以及矩形面积之和，并用哈希表统计每个矩形的顶点的出现次数。遍历完成后，检查矩形区域的面积是否等于所有矩形的面积之和，以及每个顶点的出现次数是否满足上述要求。</p></li></ol><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span>    <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isRectangleCover</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> rectangles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ll s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minx<span class="token operator">=</span>rectangles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>miny<span class="token operator">=</span>rectangles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>maxx<span class="token operator">=</span>rectangles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>maxy<span class="token operator">=</span>rectangles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span>p<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>cnt<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>rect<span class="token operator">:</span>rectangles<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x<span class="token operator">=</span>rect<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">=</span>rect<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token operator">=</span>rect<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>rect<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token operator">+=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            minx<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>minx<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>miny<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>miny<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>maxx<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>maxy<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxy<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span>y<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>y<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token function">p4</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>cnt<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>cnt<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>cnt<span class="token punctuation">[</span>p4<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p <span class="token function">pmin_min</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>minx<span class="token punctuation">,</span>miny<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token function">pmin_max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>minx<span class="token punctuation">,</span>maxy<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token function">pmax_min</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>maxx<span class="token punctuation">,</span>miny<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token function">pmax_max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>maxx<span class="token punctuation">,</span>maxy<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">!=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>maxx<span class="token operator">-</span>minx<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>maxy<span class="token operator">-</span>miny<span class="token punctuation">)</span><span class="token operator">||</span> <span class="token operator">!</span>cnt<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>pmin_min<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>cnt<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>pmin_max<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>cnt<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>pmax_min<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>cnt<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>pmax_max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cnt<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pmin_min<span class="token punctuation">)</span><span class="token punctuation">;</span>cnt<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pmin_max<span class="token punctuation">)</span><span class="token punctuation">;</span>cnt<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pmax_min<span class="token punctuation">)</span><span class="token punctuation">;</span>cnt<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pmax_max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>it<span class="token operator">:</span>cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> val<span class="token operator">=</span>it<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token operator">!=</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>val<span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>2.扫描线</p><h3 id="11-17-最大单词长度乘积"><a href="#11-17-最大单词长度乘积" class="headerlink" title="11.17 最大单词长度乘积"></a><a href="">11.17 最大单词长度乘积</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p><p><strong>提示：</strong></p><ul><li><code>2 &lt;= words.length &lt;= 1000</code></li><li><code>1 &lt;= words[i].length &lt;= 1000</code></li><li><code>words[i]</code> 仅包含小写字母</li></ul><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p>输入: [“abcw”,”baz”,”foo”,”bar”,”xtfn”,”abcdef”]<br>输出: 16<br>解释: 这两个单词为 “abcw”, “xtfn”。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入: [“a”,”ab”,”abc”,”d”,”cd”,”bcd”,”abcd”]<br>输出: 4<br>解释: 这两个单词为 “ab”, “cd”。</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入: [“a”,”aa”,”aaa”,”aaaa”]<br>输出: 0<br>解释: 不存在这样的两个单词。</p></blockquote><h4 id="题解1：暴力"><a href="#题解1：暴力" class="headerlink" title="题解1：暴力"></a>题解1：暴力</h4><p>首先看数据量，字符串长度和数组长度都在1000以内，于是可以考虑对每个字符串出现的字母数目进行存储。然后两重循环遍历每一对字符串，如果能够满足条件，则更新当前最大的长度乘积。时间复杂度$O(26n^2)$</p><p>具体代码如下：</p><p><strong>C++代码</strong></p><p><strong>注意：</strong></p><ul><li><strong>在LeetCode环境下C++数组需要初始化</strong></li><li>求string长度函数返回的是<strong>无符号数</strong>，如果需要与int型比较大小，需要强转。</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cnt<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//每个字符串中每个字母的个数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p> <strong>Java代码</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>words<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//记录每个字符串中各个字母的个数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token operator">=</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="题解2：位运算"><a href="#题解2：位运算" class="headerlink" title="题解2：位运算"></a>题解2：位运算</h4><p>假设题目数组长度和字符串长度在10000以内，则上述方法失效，于是思考有没有能降到$O(n^2)$的算法。</p><p>题目已知字符串只含小写字母，最后26位，于是我们可以考虑用位运算，将一个字符串出现的 $a-z$ 26个字母用一二进制数表示，若某一位为1则表示该字符在这个字符串中出现，反之没出现。</p><p>于是我们可以将判断两个字符串是否含有公共字母的时间复杂度降低到$O(1)$。具体代码如下：</p><p> <strong>C++代码</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> masks<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>masks<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>masks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//记录每个字符串的位掩码</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                masks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">|=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>masks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span>masks<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>words<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> masks<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//计算每个字符串的位掩码</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        masks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">|=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>masks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span>masks<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="11-18-二叉树的坡度"><a href="#11-18-二叉树的坡度" class="headerlink" title="11.18 二叉树的坡度"></a><a href="https://leetcode-cn.com/problems/binary-tree-tilt/">11.18 二叉树的坡度</a></h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给定一个二叉树，计算 整个树 的坡度 。</p><p>一个树的 节点的坡度 定义即为，该节点左子树的节点之和和右子树节点之和的 差的绝对值 。如果没有左子树的话，左子树的节点之和为 0 ；没有右子树的话也是一样。空结点的坡度是 0 。</p><p>整个树 的坡度就是其所有节点的坡度之和。</p><p><strong>提示：</strong></p><ul><li>树中节点数目的范围在 $[0, 10^4]$ 内</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li></ul><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/tilt1.jpg" alt="img" loading="lazy"></p><p>输入：root = [1,2,3]<br>输出：1<br>解释：<br>节点 2 的坡度：|0-0| = 0（没有子节点）<br>节点 3 的坡度：|0-0| = 0（没有子节点）<br>节点 1 的坡度：|2-3| = 1（左子树就是左子节点，所以和是 2 ；右子树就是右子节点，所以和是 3 ）<br>坡度总和：0 + 0 + 1 = 1</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/tilt2.jpg" alt="img" loading="lazy"></p><p>输入：root = [4,2,9,3,5,null,7]<br>输出：15<br>解释：<br>节点 3 的坡度：|0-0| = 0（没有子节点）<br>节点 5 的坡度：|0-0| = 0（没有子节点）<br>节点 7 的坡度：|0-0| = 0（没有子节点）<br>节点 2 的坡度：|3-5| = 2（左子树就是左子节点，所以和是 3 ；右子树就是右子节点，所以和是 5 ）<br>节点 9 的坡度：|0-7| = 7（没有左子树，所以和是 0 ；右子树正好是右子节点，所以和是 7 ）<br>节点 4 的坡度：|(3+5+2)-(9+7)| = |10-16| = 6（左子树值为 3、5 和 2 ，和是 10 ；右子树值为 9 和 7 ，和是 16 ）<br>坡度总和：0 + 0 + 0 + 2 + 7 + 6 = 15</p></blockquote><p><strong>示例3：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/tilt3.jpg" alt="img" loading="lazy"></p><p>输入：root = [21,7,14,1,1,2,2,3,3]<br>输出：9</p></blockquote><h4 id="题解：深搜"><a href="#题解：深搜" class="headerlink" title="题解：深搜"></a>题解：深搜</h4><p>简单递归深搜。深度优先遍历整个二叉树，用一全局变量记录整个二叉树的坡度之和，每次深度优先遍历返回当前节点为根的所有节点之和。具体代码如下：</p><p><strong>C++代码</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for a binary tree node. * struct TreeNode &#123; *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125; *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125; * &#125;; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l_sum<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r_sum<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">+=</span><span class="token function">abs</span><span class="token punctuation">(</span>l_sum<span class="token operator">-</span>r_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l_sum<span class="token operator">+</span>r_sum<span class="token operator">+</span>root<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findTilt</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p> <strong>Java代码</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for a binary tree node. * public class TreeNode &#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &#123;&#125; *     TreeNode(int val) &#123; this.val = val; &#125; *     TreeNode(int val, TreeNode left, TreeNode right) &#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &#125; * &#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findTilt</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l_sum<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r_sum<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span>ans<span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>l_sum<span class="token operator">-</span>r_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l_sum<span class="token operator">+</span>r_sum<span class="token operator">+</span>node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="11-19-整数替换"><a href="#11-19-整数替换" class="headerlink" title="11.19 整数替换"></a><a href="https://leetcode-cn.com/problems/integer-replacement/">11.19 整数替换</a></h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>给定一个正整数 n ，你可以做如下操作：</p><p>如果 n 是偶数，则用 n / 2替换 n 。<br>如果 n 是奇数，则可以用 n + 1或n - 1替换 n 。<br>n 变为 1 所需的最小替换次数是多少？</p><p><strong>提示：</strong></p><ul><li>$1 &lt;= n &lt;= 2^31 - 1$</li></ul><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p>输入：n = 8<br>输出：3<br>解释：8 -&gt; 4 -&gt; 2 -&gt; 1</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：n = 7<br>输出：4<br>解释：7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1<br>或 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：n = 4<br>输出：2</p></blockquote><h4 id="题解1：枚举（递归）"><a href="#题解1：枚举（递归）" class="headerlink" title="题解1：枚举（递归）"></a>题解1：枚举（递归）</h4><p>假设当前需要处理的数为x</p><ul><li>如果x为偶数，则直接x/2，操作次数+1</li><li>如果x为奇数，则从$\frac{x+1}{2}$ 和$\frac{x-1}{2}$中选择需要操作次数少的那一个。(这里操作变成了两步，分别是+1或者-1 再加上除2操作)</li></ul><p>需要注意的是：</p><p>如果n=$2^{31}-1$，则可能会越界，一种解决方法是直接将n转为长整型，另一种则是使用向下取整代替，$\lfloor \frac{n}{2} \rfloor+1$ 和$\lfloor \frac{n}{2} \rfloor$分别表示 $\frac{n+1}{2}$ 和 $\frac{n-1}{2}$。</p><p>具体代码如下：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">integerReplacement</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">integerReplacement</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">integerReplacement</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">integerReplacement</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="题解2：记忆化搜索"><a href="#题解2：记忆化搜索" class="headerlink" title="题解2：记忆化搜索"></a>题解2：记忆化搜索</h4><p>思路和递归思路相近，不过引入map存储以及处理过的数（不能用数组，因为数太大，导致数组空间太大，而在操作过程中又有很多数不会出现导致浪费空间，这时键值对便是不二之选），具体见代码：</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>mp<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">integerReplacement</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> mp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">integerReplacement</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            mp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">integerReplacement</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">integerReplacement</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> mp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> mp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">integerReplacement</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> mp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        mp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token function">integerReplacement</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        mp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">integerReplacement</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">integerReplacement</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> mp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="题解3：贪心"><a href="#题解3：贪心" class="headerlink" title="题解3：贪心"></a>题解3：贪心</h4><blockquote><p>这里借鉴LeetCode官方题解：<a href="https://leetcode-cn.com/problems/integer-replacement/solution/zheng-shu-ti-huan-by-leetcode-solution-swef/">https://leetcode-cn.com/problems/integer-replacement/solution/zheng-shu-ti-huan-by-leetcode-solution-swef/</a></p></blockquote><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">integerReplacement</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">,</span>n<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> ans<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="11-20-最长和谐子序列"><a href="#11-20-最长和谐子序列" class="headerlink" title="11.20 最长和谐子序列"></a><a href="https://leetcode-cn.com/problems/longest-harmonious-subsequence/">11.20 最长和谐子序列</a></h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><p>和谐数组是指一个数组里元素的最大值和最小值之间的差别 正好是 1 。</p><p>现在，给你一个整数数组 nums ，请你在所有可能的子序列中找到最长的和谐子序列的长度。</p><p>数组的子序列是一个由数组派生出来的序列，它可以通过删除一些元素或不删除元素、且不改变其余元素的顺序而得到。</p><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums.length &lt;= 2 * 10^4$</li><li>$-10^9 &lt;= nums[i] &lt;= 10^9$</li></ul><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p>输入：nums = [1,3,2,2,5,2,3,7]<br>输出：5<br>解释：最长的和谐子序列是 [3,2,2,2,3]</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：nums = [1,2,3,4]<br>输出：2</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：nums = [1,1,1,1]<br>输出：0</p></blockquote><h4 id="题解：hash表"><a href="#题解：hash表" class="headerlink" title="题解：hash表"></a>题解：hash表</h4><p>由于题目只是求满足要求的最长子序列。于是可以先对每个数在数组中出现的次数用hash表存储，然后再遍历hash表每个数，设当前遍历的数x是子序列中小的那个数，如果x+1在hash表中存在，则更新一下当前最大值：$ans=max(ans,mp[x+1]+mp[x])$，具体代码如下：</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findLHS</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span>mp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mp<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>it<span class="token operator">:</span>mp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>first<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>it<span class="token punctuation">.</span>second<span class="token operator">+</span>mp<span class="token punctuation">[</span>it<span class="token punctuation">.</span>first<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findLHS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>mp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> mp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> mp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> mp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>mp<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> mp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span>mp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="11-21-N-叉树的最大深度"><a href="#11-21-N-叉树的最大深度" class="headerlink" title="11.21 N 叉树的最大深度"></a><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/">11.21 N 叉树的最大深度</a></h3><h4 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h4><p>给定一个 N 叉树，找到其最大深度。</p><p>最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</p><p>N 叉树输入按层序遍历序列化表示，每组子节点由空值分隔（请参见示例）。</p><p><strong>提示：</strong></p><ul><li>树的深度不会超过 <code>1000</code> 。</li><li>树的节点数目位于 $[0, 10^4]$ 之间。</li></ul><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><p><strong>示例1：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/narytreeexample.png" alt="img" loading="lazy"></p><p>输入：root = [1,null,3,2,4,null,5,6]<br>输出：3</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><img src="https://gitee.com/serendipity_LB/img/raw/master/sample_4_964.png" alt="img" loading="lazy"></p><p>输入：root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]<br>输出：5</p></blockquote><h4 id="题解：递归（dfs）"><a href="#题解：递归（dfs）" class="headerlink" title="题解：递归（dfs）"></a>题解：递归（dfs）</h4><p><strong>需要注意的是，可能会出现空树，所以需要特判下</strong>，其他就简单了，直接递归即可</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*// Definition for a Node.class Node &#123;public:    int val;    vector&lt;Node*> children;    Node() &#123;&#125;    Node(int _val) &#123;        val = _val;    &#125;    Node(int _val, vector&lt;Node*> _children) &#123;        val = _val;        children = _children;    &#125;&#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>child<span class="token operator">:</span>root<span class="token operator">-></span>children<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*// Definition for a Node.class Node &#123;    public int val;    public List&lt;Node> children;    public Node() &#123;&#125;    public Node(int _val) &#123;        val = _val;    &#125;    public Node(int _val, List&lt;Node> _children) &#123;        val = _val;        children = _children;    &#125;&#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token operator">:</span>root<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode2021年每日一题11月打卡汇总&quot;&gt;&lt;a href=&quot;#LeetCode2021年每日一题11月打卡汇总&quot; class=&quot;headerlink&quot; title=&quot;LeetCode2021年每日一题11月打卡汇总&quot;&gt;&lt;/a&gt;LeetCode2021年每</summary>
      
    
    
    
    <category term="LeetCode每日一题" scheme="http://bbstudy.net/categories/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Visualization_Analysis_and_Design</title>
    <link href="http://bbstudy.net/Visualization-Analysis-and-Design/"/>
    <id>http://bbstudy.net/Visualization-Analysis-and-Design/</id>
    <published>2022-09-07T13:19:54.944Z</published>
    <updated>2021-11-06T16:14:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Visualization-Analysis-and-Design"><a href="#Visualization-Analysis-and-Design" class="headerlink" title="Visualization Analysis and Design"></a>Visualization Analysis and Design</h1><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><ul><li><p>这本书重点是在原则和设计选择方面广泛综合vis的一般基础，为<strong>技术的设计和分析</strong>提供一个框架，而非具体的方法。</p><p>侧重于设计的抽象和习惯用法层次，而不设计域情况层次和算法层次</p></li><li><p>整书结构</p></li></ul><blockquote><p>第一章：vis定义，what-why-how</p><p>第二章：什么是数据抽象</p><p>第三章：为什么任务抽象</p><p>第四章：四个层次（最上层的领域情况层、最下层的算法层、数据和任务抽象的什么/为什么层、视觉编码和交互习惯用法设计）</p><p>第五章：编码信息、标记和通道的原理</p><p>第六章：设计的8条经验法则</p><p>接下来三章，如何安排空间来可视化编码数据</p><p>第七章：表格</p><p>第八章：空间数据</p><p>第九章：网络</p><p>第十章：视觉编码中映射颜色和其他通道的选择</p><p>第十一章：操作和更改视图的方法</p><p>第十二章：面向多维视图的方法</p><p>第十三章：减少数据项和数据属性</p><p>第十四章：嵌入技术</p><p>第十四章：概述数据上下文中嵌入焦点集的信息</p><p>第十五章：总结本书6个案例，详细分析了完整的框架</p></blockquote><h2 id="一、What’s-Vis-and-Why-Do-it"><a href="#一、What’s-Vis-and-Why-Do-it" class="headerlink" title="一、What’s Vis,and Why Do it?"></a>一、What’s Vis,and Why Do it?</h2><blockquote><p><font color="#ff0000"><strong>个人总结：</strong></font>vis是一种工具，用来增强人的能力而非完全代替人类，通过vis可以更好的分析和理解问题</p></blockquote><h3 id="1-1-The-Big-Picture"><a href="#1-1-The-Big-Picture" class="headerlink" title="1.1 The Big Picture"></a>1.1 The Big Picture</h3><p><strong>为什么</strong>用户需要它，显示了<strong>什么数据</strong>，数据（习语）<strong>如何设计</strong>的</p><h3 id="1-2-Why-Have-a-Human-in-the-loop？"><a href="#1-2-Why-Have-a-Human-in-the-loop？" class="headerlink" title="1.2 Why Have a Human in the loop？"></a>1.2 Why Have a Human in the loop？</h3><ul><li><p>If a fully automatic solution has been deemed to be acceptable,then there is no need for human judgement,and thus no need for you to design a vis tool.（如果一个全自动的解决方案被认为是可以接受的，那么就不需要人类的判断，因此你就不需要设计一个vis工具）</p></li><li><p>However,many analysis problems are ill specified:people don’t know how to approach the problem.（然而，许多分析问题是不明确的：人们不知道如何处理这个问题）</p></li><li><p>augment human capabilites,rather than completely replace    the human in the loop.（增加人类的能力，而不是完全替代人类）</p></li><li><p>过渡性使用：前期对于分析需求获得更清晰的理解，中期为设计者改进、调试、扩展系统算法，后期为用户设计一个可视化工具</p><blockquote><ul><li>In a highly exploratory way,gaining a clearer understanding of analysis requirements.</li><li>In the middle stages of a transition,refine,debug,or  extend that system’s algorithms for designers.</li><li>you can also design a vis tool for end users.</li></ul></blockquote></li><li><p>长期使用</p><blockquote><ul><li>speed up and imporve a user’s ability to generate and check hypotheses.</li><li>for presentation</li></ul></blockquote></li></ul><h3 id="1-3-Why-have-a-Computer-in-the-loop"><a href="#1-3-Why-have-a-Computer-in-the-loop" class="headerlink" title="1.3 Why have a Computer in the loop?"></a>1.3 Why have a Computer in the loop?</h3><ul><li>big datasets</li><li>tiny static datasets</li><li>many datasets change dynamically over time.（许多数据集会随时间动态变化）</li></ul><h3 id="1-4-Why-use-an-external-representation"><a href="#1-4-Why-use-an-external-representation" class="headerlink" title="1.4 Why use an external representation?"></a>1.4 Why use an external representation?</h3><ul><li>Diagrams can be designed to support preceptual inference.</li></ul><h3 id="1-5-Why-depend-on-vison"><a href="#1-5-Why-depend-on-vison" class="headerlink" title="1.5 Why depend on vison?"></a>1.5 Why depend on vison?</h3><ul><li>The visual system provides a very high-handwidth channel to our brains.（视觉系统提供了一个非常高宽带的通道）</li><li>Sound is poorly suited for providing overviews of large information spaces compared with vision.（与视觉相比，声音不适合提供大量信息空间的概述）</li><li>The other sense can be immediately ruled out as communication channels because of technological limitations.（由于技术限制，其他感官可以立即派出作为沟通渠道的可能性）</li></ul><h3 id="1-6-Why-show-the-data-in-detail"><a href="#1-6-Why-show-the-data-in-detail" class="headerlink" title="1.6 Why show the data in detail?"></a>1.6 Why show the data in detail?</h3><ul><li>A single summary is often an oversimplification that hides the true structure of the dataset.（一个简单的总结往往是一个过度简化的过程，它隐藏了数据集的真实结构）</li></ul><h3 id="1-7-Why-use-interactivity"><a href="#1-7-Why-use-interactivity" class="headerlink" title="1.7 Why use interactivity?"></a>1.7 Why use interactivity?</h3><ul><li>When datasets are large enough, the limitations of both people and displays preclude just showing everything at once.（当数据集很大时，人员和显示器的限制使得不能一次显示所有内容）</li><li>interaction where user actions cause the view to change is the way forward.（用户操作使视图改变的交互是前进的方向）</li><li>interactively changing display supports many possible queries.（交互式改变显示支持更多的可能性）</li></ul><h3 id="1-8-Why-is-the-vis-idiom-design-space-huge？"><a href="#1-8-Why-is-the-vis-idiom-design-space-huge？" class="headerlink" title="1.8 Why is the vis idiom design space huge？"></a>1.8 Why is the vis idiom design space huge？</h3><ul><li>The design space of possibilities gets even bigger when  you consider how to manipulate one or more of these pictures with interaction.（当你考虑如何通过交互操作一张或多张图片时，可能性的设计空间就会变得更大）</li></ul><h3 id="1-9-Why-focus-on-tasks"><a href="#1-9-Why-focus-on-tasks" class="headerlink" title="1.9 Why focus on tasks?"></a>1.9 Why focus on tasks?</h3><p>以任务为驱动，每个任务对应方法和数据都不一样</p><h3 id="1-10-Why-focus-on-effectiveness"><a href="#1-10-Why-focus-on-effectiveness" class="headerlink" title="1.10 Why focus on effectiveness?"></a>1.10 Why focus on effectiveness?</h3><ul><li>The focus on effectiveness is a corollary of defining vis to have the goal of supporting user tasks.（对效率的关注是定义vis以支持用户任务为目标的必然结果）</li></ul><h3 id="1-11-Why-are-most-designs-ineffective"><a href="#1-11-Why-are-most-designs-ineffective" class="headerlink" title="1.11 Why are most designs ineffective?"></a>1.11 Why are most designs ineffective?</h3><ul><li>Only a very small number of possibilities are in the set of reasonable choices, and of those only an even smaller fraction are excellent choices.（在合理选择的集合中，只有非常少的可能性，其中只有更小的一部分是优秀的选择）</li><li>A more apporpriate goal when you design is to satisfy.（设计时更合适的目标是满足）</li></ul><h3 id="1-12-Why-is-validation-difficult"><a href="#1-12-Why-is-validation-difficult" class="headerlink" title="1.12 Why is validation difficult?"></a>1.12 Why is validation difficult?</h3><ul><li>There are so many questions that you could ask when considering whether a vis tool has met your design goals.(当考虑vis工具是否满足你的设计目标时，你你可以问很多问题)</li></ul><h3 id="1-13-Why-are-there-resource-limitations"><a href="#1-13-Why-are-there-resource-limitations" class="headerlink" title="1.13 Why are there resource limitations?"></a>1.13 Why are there resource limitations?</h3><ul><li><p>you must consider at least three different kinds of limitations: computational capacity,human perceptual and cognitive capacity,and display capacity.（计算能力、人类感知和认知能力、显示能力）</p><blockquote><ul><li>larger datasets<ul><li>computer time and memory are limited resources.</li></ul></li><li>On the human side, memory and attention are finite  resources.(记忆和注意力)</li></ul></blockquote></li></ul><h3 id="1-14-Why-analyze"><a href="#1-14-Why-analyze" class="headerlink" title="1.14 Why analyze?"></a>1.14 Why analyze?</h3><ul><li><p>analyzing existing systems is a good stepping stone to designing new ones.（分析现有系统是设计新系统的良好跳板）</p></li><li><p>what? why? how?</p><blockquote><ul><li>why the task being performed</li><li>what data is shown in views</li><li>how is the vis idiom constructed in terms of design choices</li></ul></blockquote></li></ul><h2 id="二、What-Data-Abstraction"><a href="#二、What-Data-Abstraction" class="headerlink" title="二、What:Data Abstraction"></a>二、What:Data Abstraction</h2><blockquote><p><font color="#ff0000"><strong>总结：</strong></font>介绍数据类型、数据集类型、属性类型；为什么需要数据语义和数据类型；主要解决是什么的问题</p></blockquote><h3 id="2-1-The-Big-picture"><a href="#2-1-The-Big-picture" class="headerlink" title="2.1 The Big picture"></a>2.1 The Big picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211026195021148.png" alt="image-20211026195021148" loading="lazy"></p><blockquote><p>data、dataset、attributes(属性)</p><ul><li>four basic dataset types:tables, networks, fields(字段), geometry(几何图形)</li><li>data types(5):items, attritutes, links, positions and grids.</li></ul></blockquote><h3 id="2-2-Why-do-data-semantics-and-types-matter？-数据语义、数据类型"><a href="#2-2-Why-do-data-semantics-and-types-matter？-数据语义、数据类型" class="headerlink" title="2.2 Why do data semantics and types matter？(数据语义、数据类型)"></a>2.2 Why do data semantics and types matter？(数据语义、数据类型)</h3><ul><li>semantics of the data is its real-world meaning.</li><li>type of the data is its structural or mathematical interpretation.</li></ul><h3 id="2-3-Data-types"><a href="#2-3-Data-types" class="headerlink" title="2.3 Data types"></a>2.3 Data types</h3><ul><li><strong>items</strong>: an individual entity that is discrete(一个离散的个体实体)</li><li><strong>attributes</strong>：some specific property that can be measured,observed or logged.(测量、观察或记录的特定属性)</li><li><strong>links</strong>：a relationship between items, typically within a network(项目之间的关系，通常在网络内)</li><li><strong>grid</strong>：specifies the strategy for sampling continuous data in terms of both geometric and topological relationships between its cells.(指定根据单元之间的几何和拓扑关系对连续数据进行采样的策略)</li><li><strong>position</strong>：spatial data, providing a location in two-dimensional (2D) or three-dimensional (3D) space.(空间数据，提供二维或三维空间中的位置)</li></ul><h3 id="2-4-Dataset-types"><a href="#2-4-Dataset-types" class="headerlink" title="2.4 Dataset types"></a>2.4 Dataset types</h3><ul><li><strong>Tables</strong></li></ul><blockquote><ul><li>be made up of rows and columns</li><li>item, cell, attribute</li></ul></blockquote><ul><li><strong>Networks</strong></li></ul><blockquote><ul><li>an item in a network is often called a node</li><li>a link is a relation between two items</li><li>trees：with hierachical</li></ul></blockquote><ul><li><strong>Fields</strong></li></ul><blockquote><ul><li>Spatial Fields(空间场)</li><li>Gird Types</li></ul></blockquote><ul><li><strong>Geometry</strong></li></ul><blockquote><ul><li>the shape items with explicit spatial postions（明确空间位置的项的形状信息）</li><li>don’t necessarily have attributes(不一定具有属性)</li></ul></blockquote><ul><li><strong>Other Combinations</strong></li></ul><blockquote><ul><li>sets：an unordered group of items.(无序)</li><li>lists：a group of items with a specified ordering（有序）</li><li>clusters：a grouping based on attribute similarity（基于属性相似性的分组）</li></ul></blockquote><h3 id="2-5-Attribute-Types"><a href="#2-5-Attribute-Types" class="headerlink" title="2.5 Attribute Types"></a>2.5 Attribute Types</h3><blockquote><ul><li>The major disinction is between categorical versus ordered.（在于分类和顺序）</li><li>Attribute types are categorical, ordinal, or quantitative.(属性类型：分类、顺序、数量)</li><li>The direction of attribute ordering can be sequential, diverging, or cyclic.(属性排序方向：连续、离散、循环)</li></ul></blockquote><ul><li><strong>Categorical</strong> </li></ul><blockquote><ul><li>can only distinguish whether two things are the same or different</li></ul></blockquote><ul><li><strong>Ordered</strong>: Ordinal and Quantitative(序数和定量)</li></ul><blockquote><ul><li>Sequential versus diverging(连续与发散)</li><li>Cyclic(循环)</li></ul></blockquote><ul><li><strong>Hierarchical Attributes(层次属性)</strong></li></ul><h3 id="2-6-Semantics"><a href="#2-6-Semantics" class="headerlink" title="2.6 Semantics"></a>2.6 Semantics</h3><ul><li><strong>Key versus Value Semantics</strong>（键值语义）</li></ul><blockquote><ul><li>Flat Tables</li><li>Multidimensional Tables(多维表格)</li><li>Fields<ul><li>the number of keys versus values</li></ul></li><li>Scalar Fields(标量场)<ul><li>a single value attribute at each point in space(在空间中每个点都有一个值属性)</li></ul></li><li>Vector Fields(向量场)</li><li>Tensor Fields(张量场)</li><li>Field Semantic(字段语义)</li></ul></blockquote><ul><li>​    <strong>Temporal Semantics</strong>（时序语义）<ul><li>Time-Varying Data(时变数据)</li></ul></li></ul><h2 id="三、Why-Task-Abstraction"><a href="#三、Why-Task-Abstraction" class="headerlink" title="三、Why:Task Abstraction"></a>三、Why:Task Abstraction</h2><blockquote><p><font color="#ff0000"><strong>总结：</strong></font>以抽象的形式考虑任务，而不是通常认为的特定于领域的形式。主要分为Action和Target两部分。Action包括Analyze、Search和Query。其中Analyze分为：Comsume（仅利用现有的信息）和produce（除使用现有的信息外还生成新的信息），进一步细分又有：Discover、Present、Enjoy 和 Annotate、Record、Derive。其中Search基于对Target和Location的知道情况进一步分类。</p><p>Target则是需要生成什么样的数据，达成什么样的任务，具体针对有All Data、Attributes、Network Data、Spatial Data</p></blockquote><h3 id="3-1-The-Big-Picture"><a href="#3-1-The-Big-Picture" class="headerlink" title="3.1 The Big Picture"></a>3.1 The Big Picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211027085442641.png" alt="image-20211027085442641" loading="lazy"></p><h3 id="3-2-Why-Analyze-Tasks-Abstractly"><a href="#3-2-Why-Analyze-Tasks-Abstractly" class="headerlink" title="3.2 Why Analyze Tasks Abstractly?"></a>3.2 Why Analyze Tasks Abstractly?</h3><ul><li>encourages you to consider tasks in abstract form,rather than the domain-specific way that users typically think about them.(鼓励你以抽象的形式考虑任务，而不是通常认为的特定于领域的方式)</li></ul><h3 id="3-3-Who-Designer-or-User"><a href="#3-3-Who-Designer-or-User" class="headerlink" title="3.3 Who:Designer or User"></a>3.3 Who:Designer or User</h3><h3 id="3-4-Actions"><a href="#3-4-Actions" class="headerlink" title="3.4 Actions"></a>3.4 Actions</h3><blockquote><p>independent from each other</p></blockquote><h4 id="3-4-1-Analyze"><a href="#3-4-1-Analyze" class="headerlink" title="3.4.1 Analyze"></a>3.4.1 Analyze</h4><ul><li>distinguish between two possible goals of people who want to analyze data using a vis tool：users might want only to <strong>consume</strong> existing information or also to actively <strong>produce</strong> new information.(用户可能只想使用已经存在的信息，或者也想产生新的信息)</li></ul><blockquote><ol><li><strong>present</strong> something that the user already understands to a third party(将用户理解的呈现给第三方)</li><li><strong>discover</strong> something new or analyze information tha is not already completely  understood（发现一些新的东西或分析一些尚未完全理解的信息）</li><li><strong>enjoy</strong> a vis to indulge their casual interests in a topic(在一个话题上尽情享受自己的兴趣)</li></ol></blockquote><h4 id="3-4-2-Produce"><a href="#3-4-2-Produce" class="headerlink" title="3.4.2 Produce"></a>3.4.2 Produce</h4><blockquote><ol><li><strong>Annotate(注释)</strong></li><li><strong>Record(记录)</strong>：saves or captures visualization elements as persistent artifacts.(将可视化元素保存或捕获为持久构件)</li><li><strong>Derive(派生)</strong>：produce new data elements based on existing data elements.(基于现有的数据元素生成新的数据元素)</li></ol></blockquote><h4 id="3-4-3-Search"><a href="#3-4-3-Search" class="headerlink" title="3.4.3 Search"></a>3.4.3 Search</h4><blockquote><ul><li>All of the high-level analyze cases require the user to search for elements of interest within the vis as a <strong>mid-level goal</strong></li></ul></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><strong>Target known</strong></th><th style="text-align:center"><strong>Target unknown</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>Location known</strong></td><td style="text-align:center">Lookup</td><td style="text-align:center">Browse</td></tr><tr><td style="text-align:center"><strong>Location unknown</strong></td><td style="text-align:center">Locate</td><td style="text-align:center">Explore</td></tr></tbody></table></div><h4 id="3-4-4-Query"><a href="#3-4-4-Query" class="headerlink" title="3.4.4 Query"></a>3.4.4 Query</h4><blockquote><p>Once a target or set of targets for a search has been found, a <strong>low-level</strong> user goal is to query these targets at one of three scopes: <strong>identify</strong>,<strong>compare</strong>, or <strong>summarize</strong>.</p></blockquote><ul><li><strong>Identify</strong>：a single target</li><li><strong>Compare</strong>：multiple targets</li><li><strong>Summarize</strong>：all possible targets</li></ul><h3 id="3-5-Targets"><a href="#3-5-Targets" class="headerlink" title="3.5 Targets"></a>3.5 Targets</h3><blockquote><ul><li>All Data：Trends，Outliers，Features</li><li>Attributes：One(Distribution、Extremes)，Many(Dependency、Correlation、Similarity)</li><li>Network Data：Topology(拓扑)、Paths</li><li>Spatial Data：Shape</li></ul></blockquote><h3 id="3-6-How：A-Preview"><a href="#3-6-How：A-Preview" class="headerlink" title="3.6 How：A Preview"></a>3.6 How：A Preview</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211027112826130.png" alt="image-20211027112826130" loading="lazy"></p><p>Encode、Manipulate、Facet、Reduce</p><h3 id="3-7-Analyzing-and-Deriving：Examples"><a href="#3-7-Analyzing-and-Deriving：Examples" class="headerlink" title="3.7 Analyzing and Deriving：Examples"></a>3.7 Analyzing and Deriving：Examples</h3><blockquote><p><strong>what-why-how</strong> framework can be used.</p></blockquote><ol><li>Comparing Two Idioms</li><li>Deriving One Attribute</li><li>Deriving Many New Attributes</li></ol><h2 id="四、Analysis：Four-Levels-for-Validation"><a href="#四、Analysis：Four-Levels-for-Validation" class="headerlink" title="四、Analysis：Four Levels for Validation"></a>四、Analysis：Four Levels for Validation</h2><blockquote><p><font color="#ff0000"><strong>总结：</strong></font>可视化设计大概分为四个过程分别为：Domain situation、Data/Task abstraction、Visual encoding/Interaction idiom、Algorithm。由第一章所知验证十分麻烦，于是提出按层验证。具体可分为自顶向下or自底向上。同时提出各个层次会面对的Thread，以及如何validate</p></blockquote><h3 id="4-1-The-Big-Picture"><a href="#4-1-The-Big-Picture" class="headerlink" title="4.1 The Big Picture"></a>4.1 The Big Picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211027141440920.png" alt="image-20211027141440920" loading="lazy"></p><ul><li><strong>Task and Data abstraction</strong>: addresses the <strong>why and what</strong> questions.</li><li><strong>Idiom level</strong>: addresses the question of <strong>how</strong></li></ul><h3 id="4-2-Why-Validate"><a href="#4-2-Why-Validate" class="headerlink" title="4.2 Why Validate?"></a>4.2 Why Validate?</h3><blockquote><ul><li>the vis design space is huge,and most designs are ineffective.(vis设计空间巨大，大多数设计无效)</li></ul></blockquote><h3 id="4-3-Four-Levels-of-Design"><a href="#4-3-Four-Levels-of-Design" class="headerlink" title="4.3 Four Levels of Design"></a>4.3 Four Levels of Design</h3><blockquote><ul><li><strong>Domain situation</strong>：consider the details of a particular application domain for vis(考虑vis的特定应用领域的细节)</li><li><strong>Abstraction</strong>：’what-why’, map those domain-specific problems and data into forms that are independent of the domain.（特定于领域的问题和数据映射到独立于领域的表单中）</li><li>the design of idioms that specify the approach to visual <strong>encoding and interaction</strong></li><li>design of algorithm</li></ul></blockquote><h4 id="4-3-1-Domain-Situation"><a href="#4-3-1-Domain-Situation" class="headerlink" title="4.3.1 Domain Situation"></a>4.3.1 Domain Situation</h4><ul><li>a group of target users</li><li>their domain of interest</li><li>their questions</li><li>their data</li></ul><h4 id="4-3-2-Task-and-Data-Abstraction"><a href="#4-3-2-Task-and-Data-Abstraction" class="headerlink" title="4.3.2 Task and Data Abstraction"></a>4.3.2 Task and Data Abstraction</h4><blockquote><p>abstracting the specific domain questions and data from the domain-specific form that they haveat the top level into <strong>a generic representation</strong>(抽象为通用的表达)</p></blockquote><h4 id="4-3-3-Visual-Encoding-and-Interaction-Idiom"><a href="#4-3-3-Visual-Encoding-and-Interaction-Idiom" class="headerlink" title="4.3.3 Visual Encoding and Interaction Idiom"></a>4.3.3 Visual Encoding and Interaction Idiom</h4><ul><li><strong>create and manipulate the visual representation of the abstract data block</strong> that you chose at the previous level, guided by the abstract tasks that you also identified at that level（创建并操作在上一级选择的抽象数据块）</li><li>two major concerns at play with idiom design<ol><li>how to create <strong>a single picture</strong> of the data：the visual encoding idiom controls exactly what users see（视觉编码习语精准控制用户看到的内容）</li><li>how to manipulate that <strong>representation dynamically</strong>：the interactionidiom controls how users change what they see(交互习语控制用户如何更改他们所看到的内容)</li></ol></li></ul><h4 id="4-3-4-Algorithm"><a href="#4-3-4-Algorithm" class="headerlink" title="4.3.4 Algorithm"></a>4.3.4 Algorithm</h4><h3 id="4-4-Angles-of-Attack"><a href="#4-4-Angles-of-Attack" class="headerlink" title="4.4 Angles of Attack"></a>4.4 Angles of Attack</h3><ul><li><strong>top down ：problem-driven work</strong></li><li><strong>bottom up：technique-driven work</strong></li></ul><h3 id="4-5-Threat-to-Validity"><a href="#4-5-Threat-to-Validity" class="headerlink" title="4.5 Threat to Validity"></a>4.5 Threat to Validity</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211028191317538.png" alt="image-20211028191317538" loading="lazy"></p><h3 id="4-6-Validation-Approaches"><a href="#4-6-Validation-Approaches" class="headerlink" title="4.6 Validation Approaches"></a>4.6 Validation Approaches</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211028191609468.png" alt="image-20211028191609468" loading="lazy"></p><h2 id="五、Marks-and-Channels"><a href="#五、Marks-and-Channels" class="headerlink" title="五、Marks and Channels"></a>五、Marks and Channels</h2><blockquote><p><font color="#ff0000"><strong>个人总结：</strong></font>主要介绍可视化设计中的标记和信道。为什么学习信道？为分析可视编码提供建模块，即：为了更好的分析和设计可视化编码。其中Channel分为Magnitude（定量） 和Identity（定性），每个种类进而细分，对于信道效率判断有：依据其准确性分析、对比分析、独立分析、以及弹出式和分类分析。最后，由韦伯定律知，人类感知系统通常通常基于相对判断而非绝对判断。</p></blockquote><h3 id="5-1-The-Big-picture"><a href="#5-1-The-Big-picture" class="headerlink" title="5.1 The Big picture"></a>5.1 The Big picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211028210536125.png" alt="image-20211028210536125" loading="lazy"></p><ul><li><strong>Marks</strong> are basic geometric elements that depict items or links（描述项目和链接的基本几何元素）</li><li><strong>Channels</strong> control their appearance（控制外观）</li></ul><h3 id="5-2-Why-Marks-and-Channels？"><a href="#5-2-Why-Marks-and-Channels？" class="headerlink" title="5.2 Why Marks and Channels？"></a>5.2 Why Marks and Channels？</h3><p>Learning to reason about marks and channels gives you the building blocks for analyzing visual encodings.(学习对标记和通道进行推理为分析可视化编码提供建模块)</p><h3 id="5-3-Defining-Marks-and-Channels"><a href="#5-3-Defining-Marks-and-Channels" class="headerlink" title="5.3 Defining Marks and Channels"></a>5.3 Defining Marks and Channels</h3><ul><li><strong>Marks：</strong>geometric primitive objects classified according to the number of spatial dimensions they require</li><li><strong>Channel：</strong>a way to control the appearance of marks</li></ul><h4 id="5-3-1-Channel-Types"><a href="#5-3-1-Channel-Types" class="headerlink" title="5.3.1 Channel Types"></a>5.3.1 Channel Types</h4><ul><li><strong>identity channels（定性）：</strong>information about what something is or where it is</li><li><strong>magnitude channels（定量）：</strong>how much of something there is</li></ul><h3 id="5-4-Using-Marks-and-Channels"><a href="#5-4-Using-Marks-and-Channels" class="headerlink" title="5.4 Using Marks and Channels"></a>5.4 Using Marks and Channels</h3><ol><li>Two principles guide the use of visual channels in visual encoding<ul><li><strong>expressiveness</strong> ：visual encoding should express all of, and only, the information in the dataset attributes.（可视化编码应该表达数据集属性中所有的信息）</li><li><strong>effectiveness</strong>：the importance of the attribute should match the salience of the channel（属性重要性和信道一致性相匹配）</li></ul></li><li>Channels Rankings</li></ol><h3 id="5-5-Channel-Effectiveness"><a href="#5-5-Channel-Effectiveness" class="headerlink" title="5.5 Channel Effectiveness"></a>5.5 Channel Effectiveness</h3><ol><li>Accuracy<ul><li>the obvious way to quantify effectiveness</li></ul></li><li>Discriminability</li><li>Separability</li><li>Popout(弹出式)</li><li>Grouping</li></ol><h3 id="5-6-Relative-versus-Absolute-Judgement-相对判断和绝对判断"><a href="#5-6-Relative-versus-Absolute-Judgement-相对判断和绝对判断" class="headerlink" title="5.6 Relative versus Absolute Judgement(相对判断和绝对判断)"></a>5.6 Relative versus Absolute Judgement(相对判断和绝对判断)</h3><blockquote><p><strong>Weber’s Law（韦伯定律）：</strong>The human perceptual system is fundamentally based on relative judgement，not absolute ones（人类知觉系统基于相对判断而非绝对判断）</p></blockquote><h2 id="六、Rules-of-Thumb"><a href="#六、Rules-of-Thumb" class="headerlink" title="六、Rules of Thumb"></a>六、Rules of Thumb</h2><blockquote><p><font color="#ff0000"><strong>个人总结：</strong></font>本章介绍了8大常用规则（技巧），分别为：针对3D、2D展示的各自优缺点；眼前所见优于记忆；分辨率大于沉浸感；概述大于细节；响应式是必需的；黑白分明；功能第一、形式第二</p></blockquote><h3 id="6-1-The-Big-Picture"><a href="#6-1-The-Big-Picture" class="headerlink" title="6.1 The Big Picture"></a>6.1 The Big Picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211029160922330.png" alt="image-20211029160922330" loading="lazy"></p><h3 id="6-2-Why-and-When-to-Follow-Rules-of-Thumb"><a href="#6-2-Why-and-When-to-Follow-Rules-of-Thumb" class="headerlink" title="6.2 Why and When to Follow Rules of Thumb?"></a>6.2 Why and When to Follow Rules of Thumb?</h3><blockquote><p>A attempt to synthesize the current state of knowledge into a more unified whole（将当前知识状态合成一个更统一整体的尝试）</p></blockquote><h3 id="6-3-No-Unjustified-3D"><a href="#6-3-No-Unjustified-3D" class="headerlink" title="6.3 No Unjustified 3D"></a>6.3 No Unjustified 3D</h3><blockquote><p>没有不合理的3D</p></blockquote><ul><li>The Power of the Plane</li><li>The Disparity of Depth(深度差异)</li><li>Occlusion Hides Information(闭塞)</li><li>Perspective Distortion Dangers(透视畸变)</li><li>Tilted Text isn’t Legibile(倾斜文字不清晰)</li><li>Benefits of 3D：Shape Perception(形状感知)</li></ul><h3 id="6-4-No-Unjustified-2D"><a href="#6-4-No-Unjustified-2D" class="headerlink" title="6.4 No Unjustified 2D"></a>6.4 No Unjustified 2D</h3><h3 id="6-5-Eyes-Beat-Memory"><a href="#6-5-Eyes-Beat-Memory" class="headerlink" title="6.5 Eyes Beat Memory"></a>6.5 Eyes Beat Memory</h3><h3 id="6-6-Resolution-over-Immersion"><a href="#6-6-Resolution-over-Immersion" class="headerlink" title="6.6 Resolution over Immersion"></a>6.6 Resolution over Immersion</h3><blockquote><p>分辨率大于沉浸感</p></blockquote><h3 id="6-7-Overview-First，Zoom-and-Filter，Details-on-Demand"><a href="#6-7-Overview-First，Zoom-and-Filter，Details-on-Demand" class="headerlink" title="6.7 Overview First，Zoom and Filter，Details on Demand"></a>6.7 Overview First，Zoom and Filter，Details on Demand</h3><blockquote><p>首先是概述：缩放和过滤。按需要详解</p></blockquote><ul><li>give the user a broad awareness of entire information space（使用户对整个信息空间有一个广泛的认识）</li></ul><h3 id="6-8-Responsiveness-is-Required"><a href="#6-8-Responsiveness-is-Required" class="headerlink" title="6.8 Responsiveness is Required"></a>6.8 Responsiveness is Required</h3><blockquote><p>响应式是必需的</p></blockquote><ul><li>The latency of interaction, namely, how much time it takes for the system to respond to the user action, matters immensely for interaction design.（交互延迟，即系统响应用户动作所花费的时间，对交互设计至关重要）</li></ul><h3 id="6-9-Get-it-Right-inBlack-and-White"><a href="#6-9-Get-it-Right-inBlack-and-White" class="headerlink" title="6.9 Get it Right inBlack and White"></a>6.9 Get it Right inBlack and White</h3><blockquote><p>黑白分明</p></blockquote><ul><li>That is, ensure that the most crucial aspects of visual representation are legible even if the image is transformed from full color to black and white.（确保视觉表现的最关键方面是易读的，即使图像从全彩转换为黑白）</li><li>确保足够的亮度对比度</li></ul><h3 id="6-10-Function-First，Form-Next"><a href="#6-10-Function-First，Form-Next" class="headerlink" title="6.10 Function First，Form Next"></a>6.10 Function First，Form Next</h3><blockquote><p>功能第一，表现次要</p></blockquote><h2 id="七、Arrange-Tables"><a href="#七、Arrange-Tables" class="headerlink" title="七、Arrange Tables"></a>七、Arrange Tables</h2><blockquote><p><font color="#ff0000"><strong>个人总结：</strong></font>如果安排平面数据（key-value）。主要分为四个部分：分别为表达值，可以直接量化；分类数据，可分为独立的、有序的、排列的；空间轴数据，可分为直线轴（即直角坐标系）、平行轴、圆形轴（极坐标系）；空间分布密度，可分为散点分布和空间填充。</p></blockquote><h3 id="7-1-The-Big-picture"><a href="#7-1-The-Big-picture" class="headerlink" title="7.1 The Big picture"></a>7.1 The Big picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211029203515594.png" alt="image-20211029203515594" loading="lazy"></p><h3 id="7-2-Why-Arrange"><a href="#7-2-Why-Arrange" class="headerlink" title="7.2 Why Arrange"></a>7.2 Why Arrange</h3><ul><li>The arrange design choice covers all aspects of the use of spatial channels for visual encoding.（涵盖了使用空间通道进行视觉编码的所有方面）</li></ul><h3 id="7-3-Arrange-by-Keys-and-Values"><a href="#7-3-Arrange-by-Keys-and-Values" class="headerlink" title="7.3 Arrange by Keys and Values"></a>7.3 Arrange by Keys and Values</h3><ul><li>can show two value attributes：<strong>scatterplots（散点图）</strong></li><li>can show one key and one value：<strong>bar charts（柱状图）</strong></li><li>two keys and one values：<strong>heatmaps（热图）</strong></li><li>many keys and many values：<strong>scatterplot matrices（散点图矩阵）</strong></li></ul><h3 id="7-4-Express-Quantitative-Values"><a href="#7-4-Express-Quantitative-Values" class="headerlink" title="7.4 Express: Quantitative Values"></a>7.4 Express: Quantitative Values</h3><blockquote><p>量化值</p></blockquote><ul><li>A straightforward use of the spatial position channel to visually encode data.(空间位置信道来可视化编码数据的一种直接使用)</li></ul><h3 id="7-5-Separate，Order-and-Align：Categorical-Regions"><a href="#7-5-Separate，Order-and-Align：Categorical-Regions" class="headerlink" title="7.5 Separate，Order and Align：Categorical Regions"></a>7.5 Separate，Order and Align：Categorical Regions</h3><ul><li>breaking down the distribution of regions into three operations：s<strong>eparating into regions，aligning the regions，and ordering the regions</strong>.</li></ul><ol><li>List Alignment：One Key（列表）</li><li>Matrix Alignment：Two Keys（矩阵）</li><li>Volumetric Gird：Three Keys（三维网格）</li><li>Recursive Subdivision：Multiple Keys（递归细分）</li></ol><h3 id="7-6-Spatial-Axis-Orientation"><a href="#7-6-Spatial-Axis-Orientation" class="headerlink" title="7.6 Spatial Axis Orientation"></a>7.6 Spatial Axis Orientation</h3><ol><li><p>Rectilinear Layouts（直线布局，即坐标轴）</p></li><li><p>Parallel Layouts（平行布局）</p><p>Example：</p><ul><li>Parallel Coordinates（平行坐标）</li></ul></li><li><p>Radial Layouts（径向布局）</p><p>除一个或多个线性空间信道外，还是用角度信道围绕一个圆分布。径向布局采用：极坐标系。</p><p>Example：</p><ul><li>Radial Bar Charts</li><li>Pie Charts</li></ul></li></ol><h3 id="7-7-Spatial-Layout-Density"><a href="#7-7-Spatial-Layout-Density" class="headerlink" title="7.7 Spatial Layout Density"></a>7.7 Spatial Layout Density</h3><ol><li><strong>Dense：</strong>uses small and densely packed marks to provide an overview of as many items as possible with very high information density.（使用小而密集的标记来提供尽可能多的项目概述，信息密度高）</li><li><strong>Space-Filling：</strong>has the property that it fills all available space in the view（空间填充）</li></ol><h2 id="八、Arrange-Spatial-Data"><a href="#八、Arrange-Spatial-Data" class="headerlink" title="八、Arrange Spatial Data"></a>八、Arrange Spatial Data</h2><blockquote><p><font color="#ff0000"><strong>个人总结：</strong></font>主要介绍如何规划(安排)空间数据。首先空间数据可分为Geometry Data和Spatial Fields。其中Geometry主要为Geographic（地理数据信息）和其他数据派生而来的信息。空间字段又可分为标量场、向量和张量场。</p></blockquote><h3 id="8-1-The-Big-Picture"><a href="#8-1-The-Big-Picture" class="headerlink" title="8.1 The Big Picture"></a>8.1 The Big Picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211030170803536.png" alt="image-20211030170803536" loading="lazy"></p><blockquote><p> 空间数据类型：</p><ol><li><p>几何类型</p><ul><li>地理数据</li><li>从其他数据派生而来的数据</li></ul></li><li><p>空间字段</p><ul><li>每个场单元只有一个属性的<strong>标量场</strong><ul><li>等值线</li><li>直接体绘制</li></ul></li><li><strong>向量场和张量场</strong><ul><li>局部信息的流符号</li><li>稀疏种子点集计算出几何形状的几何方法</li><li>密集种子集的纹理方法</li><li>整个空间域全局计算得出数据的特征方法</li></ul></li></ul></li></ol></blockquote><h3 id="8-4-Scalar-Fields：One-Value"><a href="#8-4-Scalar-Fields：One-Value" class="headerlink" title="8.4 Scalar Fields：One Value"></a>8.4 Scalar Fields：One Value</h3><blockquote><ul><li>a single value associated with each each spatially defined cell.（与每个空间定义的单元格相关联的单个值）</li></ul></blockquote><h3 id="8-5-Vector-Fields：Multiple-Values"><a href="#8-5-Vector-Fields：Multiple-Values" class="headerlink" title="8.5 Vector Fields：Multiple Values"></a>8.5 Vector Fields：Multiple Values</h3><blockquote><ul><li>are often associated with the application domain of computational fluid dynamics (CFD), as the outcome of flow simulations or measurements.（通常与计算流体动力学的应用领域联系在一起，作为流动模拟或测量的结果）</li></ul></blockquote><ol><li>Flow Gyphs（符号流）</li><li>Geometric Flow（几何流）</li><li>Texture Flow（纹理流）</li><li>Feature Flow（特征流）</li></ol><h2 id="九、Arrange-Networks-and-Trees"><a href="#九、Arrange-Networks-and-Trees" class="headerlink" title="九、Arrange Networks and Trees"></a>九、Arrange Networks and Trees</h2><blockquote><p><font color="#ff0000"><strong>个人总结：</strong></font>介绍如何规划安排网络和树形数据。主要有三种形式，分别为：节点链接、邻接矩阵、包含（其中闭包不能用于图数据、只能用于树形，因为存在层次结构信息）。本章还针对邻接矩阵和及节点链接的优缺点展开了讨论。</p></blockquote><h3 id="9-1-The-Big-Picture"><a href="#9-1-The-Big-Picture" class="headerlink" title="9.1 The Big Picture"></a>9.1 The Big Picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211031161150700.png" alt="image-20211031161150700" loading="lazy"></p><h3 id="9-4-Cost-and-Benefits：Connection-versus-Matrix"><a href="#9-4-Cost-and-Benefits：Connection-versus-Matrix" class="headerlink" title="9.4 Cost and Benefits：Connection versus Matrix"></a>9.4 Cost and Benefits：Connection versus Matrix</h3><p>矩阵布局和节点链接布局的优缺点：</p><ul><li>节点链接优点：小的网络可非常直观支持许多与网络数据相关的抽象任务</li><li>节点链接缺点：不适用于大型网络</li><li>矩阵试图优点：对大型和密集网络的感知可伸缩性；以及它们的可预测性、稳定性和对重新排序的支持</li><li>矩阵试图缺点：用户使用不熟悉；缺乏对拓扑结果研究的支持</li></ul><h3 id="9-5-Containment：Hierarchy-Marks"><a href="#9-5-Containment：Hierarchy-Marks" class="headerlink" title="9.5 Containment：Hierarchy Marks"></a>9.5 Containment：Hierarchy Marks</h3><blockquote><p>包含：层次标记</p><p>Containment vs Connection</p><ul><li>containment：可显示层次结果的完整信息</li><li>connection：只显示两个item之间的成对关系</li></ul></blockquote><p>典型例子：树形图</p><h2 id="十、Map-Color-and-Other-Channels"><a href="#十、Map-Color-and-Other-Channels" class="headerlink" title="十、Map Color and Other Channels"></a>十、Map Color and Other Channels</h2><blockquote><p><font color="#ff0000"><strong>个人总结：</strong></font>本章主要从颜色和其他方面讨论如何映射。颜色方面分为颜色编码和颜色分类两大类，颜色编码引入HSL（即色调、饱和度、对比度），颜色映射又针对分类属性、有序属性、二元属性展开讨论。其他方面包括：大小、角度、曲率、形状、运动轨迹等等</p></blockquote><h3 id="10-1-The-Big-Picture"><a href="#10-1-The-Big-Picture" class="headerlink" title="10.1 The Big Picture"></a>10.1 The Big Picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211031170317627.png" alt="image-20211031170317627" loading="lazy"></p><blockquote><ol><li>颜色<ul><li>颜色编码<ul><li>Hue（色调）</li><li>Saturation（饱和度）</li><li>Luminance（亮度）</li></ul></li><li>颜色映射<ul><li>分类属性</li><li>有序属性<ul><li>顺序</li><li>发散</li><li>二元</li></ul></li></ul></li></ul></li><li>大小、角度、曲度等<ul><li>长度</li><li>角度</li><li>面积</li><li>曲率</li><li>体积</li></ul></li><li>形状</li><li>运动轨迹</li></ol></blockquote><h3 id="10-2-Color-Theory"><a href="#10-2-Color-Theory" class="headerlink" title="10.2 Color Theory"></a>10.2 Color Theory</h3><ol><li><p>Color Vision</p></li><li><p>Color Spaces</p><p>对RGB模型和HSL进行对比</p></li><li><p>Luminance，Saturation，and Hue</p></li><li><p>Transparency（透明度）</p></li></ol><h3 id="10-3-Colormaps"><a href="#10-3-Colormaps" class="headerlink" title="10.3 Colormaps"></a>10.3 Colormaps</h3><ol><li><p>Categorical Colormaps</p><ul><li>categories</li><li>grouping</li></ul></li><li><p>Ordered Colormaps</p><ul><li>ordinal attributes（序数属性）</li><li>quantitative attributes（数量属性）</li></ul></li><li><p>Bivariate Colormaps</p></li></ol><h2 id="十一、Manipulate-View"><a href="#十一、Manipulate-View" class="headerlink" title="十一、Manipulate View"></a>十一、Manipulate View</h2><blockquote><p><font color="#ff0000"><strong>个人总结：</strong></font>本章介绍如果操作视图，主要分为随着时间改变视图，即动态改变；选择元素，如选择设计模式、提高亮度等；导航，又可分为对item reducetion 和 attribute reduction。对于项目有放缩、平移、约束；对于属性有切片、裁剪、投影。</p></blockquote><h3 id="11-1-The-Big-Picture"><a href="#11-1-The-Big-Picture" class="headerlink" title="11.1 The Big Picture"></a>11.1 The Big Picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211101195234186.png" alt="image-20211101195234186" loading="lazy"></p><h3 id="11-2-Why-Change？"><a href="#11-2-Why-Change？" class="headerlink" title="11.2 Why Change？"></a>11.2 Why Change？</h3><p>为什么要将视图改变为随时间变化</p><ul><li>The most fundamental breakthrough of vis on a computer display compared with printed<br>on paper is the possibility of interactivity: a view that changes over time can dynamically respond to user input, rather than being limited to a static visual encoding.(计算机显示的可视系统最根本突破就是可交互性。随时间变化的视图可以动态响应用户的输入，而不是局限于静态的视觉编码)</li><li>all interactive idioms involve a view that changes over time.</li></ul><h3 id="11-3-Change-View-Over-Time"><a href="#11-3-Change-View-Over-Time" class="headerlink" title="11.3 Change View Over Time"></a>11.3 Change View Over Time</h3><ul><li>The visual encoding could be changed to a completely different idiom.(可视编码可以被改变成完全不同的习惯用法)</li><li>alter some parameter of the existing encoding.(更改现有编码的某些参数)</li></ul><h3 id="11-4-Select-Elements"><a href="#11-4-Select-Elements" class="headerlink" title="11.4 Select Elements"></a>11.4 Select Elements</h3><ol><li>Selection Design Choices<ul><li>the number of independent selection type is also a design choices(独立选择的数量类型)</li><li>how many elements can be in the selection set.</li></ul></li><li>Highlighting</li><li>Selection Outcomes</li></ol><h3 id="11-5-Navigate：Changing-Viewpoint"><a href="#11-5-Navigate：Changing-Viewpoint" class="headerlink" title="11.5 Navigate：Changing Viewpoint"></a>11.5 Navigate：Changing Viewpoint</h3><ol><li>Geometric Zooming(几何放缩)</li><li>Semantic Zooming(语义放缩)</li><li>Constrained Navigation(约束导航)</li></ol><h3 id="11-6-Navigate：Reducing-Attributes"><a href="#11-6-Navigate：Reducing-Attributes" class="headerlink" title="11.6 Navigate：Reducing Attributes"></a>11.6 Navigate：Reducing Attributes</h3><ol><li><p>Slice</p><p>例如最经典的：从三维转化为二维</p></li><li><p>Cut（裁剪）</p></li><li><p>Project(投影)</p></li></ol><h2 id="十二、Facet-into-Multiple-View"><a href="#十二、Facet-into-Multiple-View" class="headerlink" title="十二、Facet into Multiple View"></a>十二、Facet into Multiple View</h2><blockquote><p><font color="#ff0000"><strong>个人总结：</strong></font>本章介绍面对多维视图如何设计。首先如何并置和协调多维视图，有：共享编码、共享数据（其中针对编码和数据二者关系，衍生出6种情形，其中2种情形冗余或无效）、共享导航（同步）；接下来介绍如何分区，以及对于不同的决策对比；最后介绍重叠层，从视觉分辨层、静态层和动态层出发，分别介绍各自优点。</p></blockquote><h3 id="12-1-The-Big-Picture"><a href="#12-1-The-Big-Picture" class="headerlink" title="12.1 The Big Picture"></a>12.1 The Big Picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211102195240085.png" alt="image-20211102195240085" loading="lazy"></p><h3 id="12-3-Juxtapose-and-Coordinate-Views"><a href="#12-3-Juxtapose-and-Coordinate-Views" class="headerlink" title="12.3 Juxtapose and Coordinate Views"></a>12.3 Juxtapose and Coordinate Views</h3><blockquote><p>并置和协调视图</p></blockquote><ol><li>Share Encoding：Same/Different</li><li>Share Data：All，Subset，None</li><li>Share Navigation：Synchronize（同步）</li><li>Combinations</li><li>Juxtapose Views(并置视图)</li></ol><h3 id="12-4-Partition-into-Views"><a href="#12-4-Partition-into-Views" class="headerlink" title="12.4 Partition into Views"></a>12.4 Partition into Views</h3><blockquote><p>分区</p></blockquote><ol><li><p>Regions，Glyphs，and Views(区域符号和视图)</p></li><li><p>List Alignments（列表比对）</p><blockquote><p>关于不同的划分决策如何实现不同的任务，一种简单方法为：将分组条形图和多个对齐的条形图进行比较</p></blockquote></li><li><p>Matrix Alignment（矩阵比对）</p></li><li><p>Recursive Subdivision(递归细分)</p></li></ol><h3 id="12-5-Superimpose-Layers"><a href="#12-5-Superimpose-Layers" class="headerlink" title="12.5 Superimpose Layers"></a>12.5 Superimpose Layers</h3><blockquote><p>重叠层</p></blockquote><ol><li><p>Visually Distinguishable Layers</p><blockquote><p>视觉分辨层。</p><p>使层可区分的一个方法为：确保每一层使用编码中活动的不同且不重叠的视觉通道范围。</p></blockquote></li><li><p>Static Layers</p><blockquote><p>所有的图层同时显示，用户可以根据视觉注意的选择方向选择焦点。</p><p>Example：</p><ul><li>Cartographic Layering（地图分层）</li><li>Superimposed Line Charts（叠加线图表）</li><li>Hierarchical Edge Bundles（分层边缘包）</li></ul></blockquote></li><li><p>Dynamic Layers</p><blockquote><p>具有不同于视图其余部分的显著性的层是交互式构造的，通常是响应用户选择。</p></blockquote></li></ol><h2 id="十三、Reduce-Items-and-Attributes"><a href="#十三、Reduce-Items-and-Attributes" class="headerlink" title="十三、Reduce Items and Attributes"></a>十三、Reduce Items and Attributes</h2><blockquote><p><font color="#ff0000"><strong>个人总结：</strong></font>本章主要介绍如何减少项目和属性。主要分为过滤和聚合两种方法。</p></blockquote><h3 id="13-1-The-Big-Picture"><a href="#13-1-The-Big-Picture" class="headerlink" title="13.1 The Big Picture"></a>13.1 The Big Picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211103112159279.png" alt="image-20211103112159279" loading="lazy"></p><h3 id="13-2-Why-Reduce"><a href="#13-2-Why-Reduce" class="headerlink" title="13.2 Why Reduce?"></a>13.2 Why Reduce?</h3><blockquote><ul><li>通常静态数据减少习惯用法为只缩减显示的内容。然而，在动态环境下更改参数或选择的结果可能是元素数量的增加，即双向性。</li><li>Reducing the amount of data shown in a view is an obvious way to reduce its visual complexity.(减少视图中显示的数据量是降低其视觉复杂性最明显的方法)</li></ul></blockquote><h3 id="13-3-Filter"><a href="#13-3-Filter" class="headerlink" title="13.3 Filter"></a>13.3 Filter</h3><blockquote><p>挑战：在于如何确定好阈值</p></blockquote><ol><li>Item Filtering</li><li>Attribute Filtering</li></ol><h3 id="13-4-Aggregate"><a href="#13-4-Aggregate" class="headerlink" title="13.4 Aggregate"></a>13.4 Aggregate</h3><blockquote><p>聚合：一组元素用一个新的派生元素来代表整组元素</p></blockquote><ol><li><p>Item Aggregation</p></li><li><p>Spatial Aggregation</p></li><li><p>Attribute Aggregation：Dimensionality Reduction</p><blockquote><ul><li>Why and When to Use DR？</li></ul><p>preserve the meaningful structure of a dataset while using fewer attributes to represent the items.</p><ul><li>How to Show DR data？</li></ul><p>通过降维技术，用户可以选择要创建的合成属性的数量。当新属性的目标为2时，通常用散点图表示。创建属性大于2时，则常使用散点图矩阵。</p></blockquote></li></ol><h2 id="十四、Embed：Focus-Context"><a href="#十四、Embed：Focus-Context" class="headerlink" title="十四、Embed：Focus+Context"></a>十四、Embed：Focus+Context</h2><blockquote><p><font color="#ff000"><strong>个人总结：</strong></font>本章主要介绍嵌入技术的用法。首先为什么要使用那内嵌，因为可以减轻标准导航技术带来的定向障碍。嵌入主要有Elide、Superimpose（）、Distort三种具体方法。最后分析嵌入技术的代价和价值之间的权衡，并引出5种显示复杂信息的方法。</p></blockquote><h3 id="14-1-The-Big-Picture"><a href="#14-1-The-Big-Picture" class="headerlink" title="14.1 The Big Picture"></a>14.1 The Big Picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211103163925584.png" alt="image-20211103163925584" loading="lazy"></p><h3 id="14-2-Why-Embed？"><a href="#14-2-Why-Embed？" class="headerlink" title="14.2 Why Embed？"></a>14.2 Why Embed？</h3><ul><li>mitigate the potential for disorientation that comes with standard navigation techniques such as geometric zooming.(减轻标准导航技术带来的定向障碍)</li></ul><h3 id="14-3-Elide"><a href="#14-3-Elide" class="headerlink" title="14.3 Elide"></a>14.3 Elide</h3><blockquote><p>以一种动态的形式，从视图中完全忽略某些项。</p></blockquote><h3 id="14-4-Superimpose"><a href="#14-4-Superimpose" class="headerlink" title="14.4 Superimpose"></a>14.4 Superimpose</h3><p>重叠</p><blockquote><p>In this case，the focus layer is limited to a local region，rather than being a gobal layer that streches across the entire view to cover everthing.(焦点层仅局限局部区域，而不是扩展到整个视图以覆盖所有内容的全局层)</p></blockquote><h3 id="14-5-Distort"><a href="#14-5-Distort" class="headerlink" title="14.5 Distort"></a>14.5 Distort</h3><p>扭曲/失真</p><blockquote><p>some choice：</p><ul><li>only a single region of focus(只有一个焦点区域) or allow multiple foci？（允许多个焦点）</li><li>the shape of the focus（焦点的形状）</li><li>the extent of the focus（焦点的范围）</li><li>interaction metaphor（交互隐喻）</li></ul><p>example：</p><ul><li>3D Perspective（三维透视）</li><li>Fisheye Lens（鱼眼镜头）：使用一个局部范围和径向相撞的单一焦点，以及主视图顶部的可拖动透镜的交互隐喻</li><li>Hyperbolic Geometry（双曲几何）：使用一个单一的径向全局焦点和双曲平移的相互作用</li><li>Stretch and Squish Navigation（拉伸和挤压导航）：使用全局范围的多个矩形焦点来实现失真，以及放大某些区域导致其他区域收缩。</li><li>Nonlinear Magnification Fields（非线性放大领域）</li></ul></blockquote><h3 id="14-6-Cost-and-Benefits：Distortion"><a href="#14-6-Cost-and-Benefits：Distortion" class="headerlink" title="14.6 Cost and Benefits：Distortion"></a>14.6 Cost and Benefits：Distortion</h3><p>显示负责信息的五种选择：</p><ol><li>Embed</li><li>derive new data（派生新数据）</li><li>manipulate a single changing view（操作单个更改视图）</li><li>facet into multiple views（将视图转换为多个视图）</li><li>reduce the amount of data to show.（减少显示的数据量）</li></ol><p>以上五种方法之间的成本和收益权衡仍没有被完全理解</p><p>cost：</p><ul><li>distance or length judgements are severely impaired, so distortion is a poor match with any tasks that require such comparisons.（距离和长度的判断能力受到严重损害，因此失真与任何需要进行此类的任务都不匹配）</li></ul><h2 id="十五、Analysis-Case-Studies"><a href="#十五、Analysis-Case-Studies" class="headerlink" title="十五、Analysis Case Studies"></a>十五、Analysis Case Studies</h2><h3 id="15-1-The-Big-Picture"><a href="#15-1-The-Big-Picture" class="headerlink" title="15.1 The Big Picture"></a>15.1 The Big Picture</h3><p><img src="https://gitee.com/serendipity_LB/img/raw/master/image-20211103175618993.png" alt="image-20211103175618993" loading="lazy"></p><blockquote><ol><li>Graph-Theoretic Scagnostic system：通过派生的SPLOM对原始散点图中的点分布形成的几何形状进行分类，从而提供大型散点图矩阵的可扩展总结</li><li>VisDB system：将整个数据库视为一个非常大的数据表，根据特定查询的相关性，用密集的、填充空间的布局对其进行可视化编码，并使用颜色条目</li><li>Hierarchical Clustering Explorer：支持对多维表的系统探索，以及相关的层次聚类</li><li>PivotGraph：使用派生网络的简洁数据抽象来总结网络</li><li>InterRing：使用一种空间填充、径向布局，并围绕多焦点+上下文失真建立交互作用</li><li>Constellation：支持浏览复杂的多层次语言网络，其布局将查询相关性与空间位置和动态分层进行编码，以避免边缘交叉的感知影响</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Visualization-Analysis-and-Design&quot;&gt;&lt;a href=&quot;#Visualization-Analysis-and-Design&quot; class=&quot;headerlink&quot; title=&quot;Visualization Analysis and</summary>
      
    
    
    
    <category term="可视化学习笔记" scheme="http://bbstudy.net/categories/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="gra_stu" scheme="http://bbstudy.net/tags/gra-stu/"/>
    
    <category term="可视化" scheme="http://bbstudy.net/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode第266场周赛</title>
    <link href="http://bbstudy.net/weekly-contest-266/"/>
    <id>http://bbstudy.net/weekly-contest-266/</id>
    <published>2022-09-07T13:19:54.944Z</published>
    <updated>2021-11-15T14:29:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、统计字符串中元音子字符串"><a href="#一、统计字符串中元音子字符串" class="headerlink" title="一、统计字符串中元音子字符串"></a>一、统计字符串中元音子字符串</h2><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>给定一个只含小写字母的字符串，需要求只包含元音字符的子字符串个数</p><p>其中：</p><ul><li><code>1 &lt;= word.length &lt;= 100</code></li><li><code>word</code> 仅由小写英文字母组成</li></ul><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p><strong>示例1：</strong></p><blockquote><p>输入：word = “aeiouu”<br>输出：2<br>解释：下面列出 word 中的元音子字符串（斜体加粗部分）：</p><ul><li>“aeiouu”</li><li>“aeiouu”</li></ul></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：word = “cuaieuouac”<br>输出：7<br>解释：下面列出 word 中的元音子字符串（斜体加粗部分）：</p><ul><li>“cuaieuouac”</li><li>“cuaieuouac”</li><li>“cuaieuouac”</li><li>“cuaieuouac”</li><li>“cuaieuouac”</li><li>“cuaieuouac”</li><li>“cuaieuouac”</li></ul></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：word = “bbaeixoubb”<br>输出：0<br>解释：所有包含全部五种元音的子字符串都含有辅音，所以不存在元音子字符串。</p></blockquote><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>由于字符串长度&lt;=100，直接暴力即可，随便怎么暴力都行，这里由于时间因素，当时直接选择三重for循环</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countVowelSubstrings</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span>st<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                st<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">5</span><span class="token operator">&amp;&amp;</span>st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token char">'e'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token char">'i'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token char">'o'</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token char">'u'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ans<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h2 id="二、所有子字符串中的元音"><a href="#二、所有子字符串中的元音" class="headerlink" title="二、所有子字符串中的元音"></a>二、所有子字符串中的元音</h2><h3 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h3><p>给定一个字符串，返回所有字符串中元音的总数</p><p>其中：</p><ul><li><code>1 &lt;= word.length &lt;= 105</code></li><li><code>word</code> 由小写英文字母组成</li></ul><h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h3><p><strong>示例1：</strong></p><blockquote><p>输入：word = “aba”<br>输出：6<br>解释：<br>所有子字符串是：”a”、”ab”、”aba”、”b”、”ba” 和 “a” 。</p><ul><li>“b” 中有 0 个元音</li><li>“a”、”ab”、”ba” 和 “a” 每个都有 1 个元音</li><li>“aba” 中有 2 个元音<br>因此，元音总数 = 0 + 1 + 1 + 1 + 1 + 2 = 6 。</li></ul></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：word = “abc”<br>输出：3<br>解释：<br>所有子字符串是：”a”、”ab”、”abc”、”b”、”bc” 和 “c” 。</p><ul><li>“a”、”ab” 和 “abc” 每个都有 1 个元音</li><li>“b”、”bc” 和 “c” 每个都有 0 个元音<br>因此，元音总数 = 1 + 1 + 1 + 0 + 0 + 0 = 3 。</li></ul></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：word = “noosabasboosa”<br>输出：237<br>解释：所有子字符串中共有 237 个元音。</p></blockquote><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><p>遍历字符串，若当前遍历元素$word[i]$为元音时，则若存在子字符串$word[l…r]$要包含字符$word[i]$，则</p><ul><li>$0 \le l \le i$</li><li>$i \le r&lt;n$（n为字符串word的长度）</li></ul><p>于是代码如下</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">countVowels</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'a'</span><span class="token operator">||</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'e'</span><span class="token operator">||</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'i'</span><span class="token operator">||</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'o'</span><span class="token operator">||</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'u'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h2 id="三、分配给商店的最多商品的最小值"><a href="#三、分配给商店的最多商品的最小值" class="headerlink" title="三、分配给商店的最多商品的最小值"></a>三、分配给商店的最多商品的最小值</h2><h3 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h3><p>给你一个整数 n ，表示有 n 间零售商店。总共有 m 种产品，每种产品的数目用一个下标从 0 开始的整数数组 quantities 表示，其中 quantities[i] 表示第 i 种商品的数目。</p><p>你需要将 所有商品 分配到零售商店，并遵守这些规则：</p><p>一间商店 至多 只能有 一种商品 ，但一间商店拥有的商品数目可以为 任意 件。<br>分配后，每间商店都会被分配一定数目的商品（可能为 0 件）。用 x 表示所有商店中分配商品数目的最大值，你希望 x 越小越好。也就是说，你想 最小化 分配给任意商店商品数目的 最大值 。<br>请你返回最小的可能的 x 。</p><h3 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h3><p><strong>示例1：</strong></p><blockquote><p>输入：n = 6, quantities = [11,6]<br>输出：3<br>解释： 一种最优方案为：</p><ul><li>11 件种类为 0 的商品被分配到前 4 间商店，分配数目分别为：2，3，3，3 。</li><li>6 件种类为 1 的商品被分配到另外 2 间商店，分配数目分别为：3，3 。<br>分配给所有商店的最大商品数目为 max(2, 3, 3, 3, 3, 3) = 3 。</li></ul></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：n = 7, quantities = [15,10,10]<br>输出：5<br>解释：一种最优方案为：</p><ul><li>15 件种类为 0 的商品被分配到前 3 间商店，分配数目为：5，5，5 。</li><li>10 件种类为 1 的商品被分配到接下来 2 间商店，数目为：5，5 。</li><li>10 件种类为 2 的商品被分配到最后 2 间商店，数目为：5，5 。<br>分配给所有商店的最大商品数目为 max(5, 5, 5, 5, 5, 5, 5) = 5 。</li></ul></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：n = 1, quantities = [100000]<br>输出：100000<br>解释：唯一一种最优方案为：</p><ul><li>所有 100000 件商品 0 都分配到唯一的商店中。<br>分配给所有商店的最大商品数目为 max(100000) = 100000 。</li></ul></blockquote><h3 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h3><p>直接二分答案即可。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimizedMaximum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> quantities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>quantities<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cnt<span class="token operator">+=</span>quantities<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>mid<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>quantities<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>mid<span class="token punctuation">)</span> cnt<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、统计字符串中元音子字符串&quot;&gt;&lt;a href=&quot;#一、统计字符串中元音子字符串&quot; class=&quot;headerlink&quot; title=&quot;一、统计字符串中元音子字符串&quot;&gt;&lt;/a&gt;一、统计字符串中元音子字符串&lt;/h2&gt;&lt;h3 id=&quot;题意：&quot;&gt;&lt;a href=&quot;#题意</summary>
      
    
    
    
    <category term="LeetCode周赛题解" scheme="http://bbstudy.net/categories/LeetCode%E5%91%A8%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>数据可视化(陈为)学习笔记</title>
    <link href="http://bbstudy.net/vis_chenwei/"/>
    <id>http://bbstudy.net/vis_chenwei/</id>
    <published>2022-09-07T13:19:54.944Z</published>
    <updated>2021-11-06T16:08:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据可视化（第二版）陈为-—视物致知"><a href="#数据可视化（第二版）陈为-—视物致知" class="headerlink" title="数据可视化（第二版）陈为  —视物致知"></a>数据可视化（第二版）陈为  —视物致知</h1><h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><h3 id="基础篇：数据可视化的基础理论和概念"><a href="#基础篇：数据可视化的基础理论和概念" class="headerlink" title="基础篇：数据可视化的基础理论和概念"></a>基础篇：数据可视化的基础理论和概念</h3><ul><li>第1章：可视化的定义、作用和发展历史，数据可视化的现代意义和分类</li><li>第2章：视觉感知和认知的基本原理、颜色模型和可视化编码原则</li><li>第3章：数据模型、数据定义、数据组织与管理、数据分析与挖掘等基本概念</li><li>第4章：数据可视化基础，包括可视化流程、图形符号、视觉变量和评估方法等内容</li></ul><h3 id="时空数据篇：含空间坐标或时间信息的数据的可视化方法"><a href="#时空数据篇：含空间坐标或时间信息的数据的可视化方法" class="headerlink" title="时空数据篇：含空间坐标或时间信息的数据的可视化方法"></a>时空数据篇：含空间坐标或时间信息的数据的可视化方法</h3><ul><li>第5章：空间标量场数据可视化（一维、二维、三维）</li><li>第6章：含地理信息的空间数据的可视化技术</li><li>第7章：大尺度或随时间变化的空间标量场的可视化解决方案和挑战，空间向量场和张量场数据的可视化方法，多变量空间数据场的可视化</li><li>第8章：带有时间信息的数据可视化（包时间属性可视化、多变量时变型数据可视化和流数据可视化）</li></ul><h3 id="非时空数据篇：非结构和非集合抽象数据的可视化"><a href="#非时空数据篇：非结构和非集合抽象数据的可视化" class="headerlink" title="非时空数据篇：非结构和非集合抽象数据的可视化"></a>非时空数据篇：非结构和非集合抽象数据的可视化</h3><ul><li>第9章：层次结构数据可视化</li><li>第10章：文本数据可视化</li><li>第11章：跨媒体数据可视化</li><li>第12章：复杂高维多元数据可视化</li></ul><h3 id="用户篇"><a href="#用户篇" class="headerlink" title="用户篇"></a>用户篇</h3><ul><li>第13章：可视化中的交互方法（交互准则、交互分类和相关技术）</li><li>第14章：可视化评测（可视化评测的因素、方法、流程和具体实例）</li><li>第15章：可视化技术（科学技术、生命医学、网络安全、商业智能和金融等领域）</li><li>第16章：可视化系统（应用系统、数据资源、开发工具…）</li></ul><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="第1章：数据可视化简介"><a href="#第1章：数据可视化简介" class="headerlink" title="第1章：数据可视化简介"></a>第1章：数据可视化简介</h2><h3 id="1-1-可视化释义"><a href="#1-1-可视化释义" class="headerlink" title="1.1 可视化释义"></a>1.1 可视化释义</h3><p>可视化功能：</p><ul><li>信息记录</li><li>支持对信息的推理和分析</li><li>信息传播与协同</li></ul><h3 id="1-2-可视化简史"><a href="#1-2-可视化简史" class="headerlink" title="1.2 可视化简史"></a>1.2 可视化简史</h3><h3 id="1-3-数据可视化详解"><a href="#1-3-数据可视化详解" class="headerlink" title="1.3 数据可视化详解"></a>1.3 数据可视化详解</h3><h4 id="1-3-1-基本模型：数据、信息、知识、智慧"><a href="#1-3-1-基本模型：数据、信息、知识、智慧" class="headerlink" title="1.3.1 基本模型：数据、信息、知识、智慧"></a>1.3.1 基本模型：数据、信息、知识、智慧</h4><ul><li>数据：对目标观察和记录的结果，是关于现实世界中的时间、地点、事件、其他事物或概念的描述（事实、信号、符号）</li><li>信息：被赋予了意义和目标的数据</li><li>知识：一个隐晦的、意会的、难以描述和定义的概念，是被处理、组织过、应用或付诸行动的信息。（处理、过程、命题）</li><li>智慧：启示性的，知道是什么，如果去做</li></ul><h4 id="1-3-2-意义：需达到真、善、美的均衡"><a href="#1-3-2-意义：需达到真、善、美的均衡" class="headerlink" title="1.3.2 意义：需达到真、善、美的均衡"></a>1.3.2 意义：需达到真、善、美的均衡</h4><ul><li>真：真实性</li><li>善：倾向性</li><li>美：艺术完整性</li></ul><h4 id="1-3-3-数据可视化分类"><a href="#1-3-3-数据可视化分类" class="headerlink" title="1.3.3 数据可视化分类"></a>1.3.3 数据可视化分类</h4><ul><li>科学可视化<ul><li>标量场可视化</li><li>向量场可视化：粒子对流法、将向量场转换为一帧或多帧纹理图像、采用简化易懂的图标编码单个或简化后的向量信息（线条、箭头和方向标志）</li><li>张量场可视化（标量可看做0阶张量，矢量可看做1阶张量）：纹理、几何、拓扑</li></ul></li><li>信息可视化<ul><li>时空数据可视化</li><li>层次与网络结构数据可视化</li><li>文本和跨媒体数据可视化</li><li>多变量数据可视化</li></ul></li><li>可视分析学：以可视交互界面为基础的分析推理科学</li></ul><p>面向领域的可视化方法和技术</p><ul><li>生命科学可视化</li><li>表象性可视化</li><li>地理信息可视化</li><li>产品可视化</li><li>教育可视化</li><li>系统可视化</li><li>商业智能可视化</li><li>知识可视化</li></ul><h2 id="第2章：视觉感知与认知"><a href="#第2章：视觉感知与认知" class="headerlink" title="第2章：视觉感知与认知"></a>第2章：视觉感知与认知</h2><h3 id="2-1-视觉感知和认知"><a href="#2-1-视觉感知和认知" class="headerlink" title="2.1 视觉感知和认知"></a>2.1 视觉感知和认知</h3><h3 id="2-2-颜色"><a href="#2-2-颜色" class="headerlink" title="2.2 颜色"></a>2.2 颜色</h3><h3 id="2-3-视觉编码原则"><a href="#2-3-视觉编码原则" class="headerlink" title="2.3 视觉编码原则"></a>2.3 视觉编码原则</h3><h4 id="2-3-1-相对判断和视觉假象"><a href="#2-3-1-相对判断和视觉假象" class="headerlink" title="2.3.1 相对判断和视觉假象"></a>2.3.1 相对判断和视觉假象</h4><h4 id="2-3-2-标记和视觉通道"><a href="#2-3-2-标记和视觉通道" class="headerlink" title="2.3.2 标记和视觉通道"></a>2.3.2 标记和视觉通道</h4><h4 id="2-3-3-视觉通道的概念"><a href="#2-3-3-视觉通道的概念" class="headerlink" title="2.3.3 视觉通道的概念"></a>2.3.3 视觉通道的概念</h4><h4 id="2-3-4-视觉通道的特性"><a href="#2-3-4-视觉通道的特性" class="headerlink" title="2.3.4 视觉通道的特性"></a>2.3.4 视觉通道的特性</h4><blockquote><ul><li>平面位置</li><li>颜色</li><li>尺寸</li><li>斜度和角度</li><li>形状</li><li>纹理</li><li>动画</li><li>视觉多通</li></ul></blockquote><h2 id="第3章：数据"><a href="#第3章：数据" class="headerlink" title="第3章：数据"></a>第3章：数据</h2><h3 id="3-2-数据基础"><a href="#3-2-数据基础" class="headerlink" title="3.2 数据基础"></a>3.2 数据基础</h3><h4 id="3-2-1-数据分类"><a href="#3-2-1-数据分类" class="headerlink" title="3.2.1 数据分类"></a>3.2.1 数据分类</h4><h4 id="3-2-2-数据集"><a href="#3-2-2-数据集" class="headerlink" title="3.2.2 数据集"></a>3.2.2 数据集</h4><ul><li>数据记录集</li><li>图数据集</li><li>有序数据集</li></ul><h4 id="3-2-3-数据相似度与密度"><a href="#3-2-3-数据相似度与密度" class="headerlink" title="3.2.3 数据相似度与密度"></a>3.2.3 数据相似度与密度</h4><h3 id="3-3-数据获取、清洗和预处理"><a href="#3-3-数据获取、清洗和预处理" class="headerlink" title="3.3 数据获取、清洗和预处理"></a>3.3 数据获取、清洗和预处理</h3><h4 id="3-3-1-数据获取"><a href="#3-3-1-数据获取" class="headerlink" title="3.3.1 数据获取"></a>3.3.1 数据获取</h4><h4 id="3-3-2-数据清洗"><a href="#3-3-2-数据清洗" class="headerlink" title="3.3.2 数据清洗"></a>3.3.2 数据清洗</h4><h4 id="3-3-3-数据精简"><a href="#3-3-3-数据精简" class="headerlink" title="3.3.3 数据精简"></a>3.3.3 数据精简</h4><h4 id="3-3-4-其他常见的数据预处理步骤"><a href="#3-3-4-其他常见的数据预处理步骤" class="headerlink" title="3.3.4 其他常见的数据预处理步骤"></a>3.3.4 其他常见的数据预处理步骤</h4><ul><li>合并</li><li>采样</li><li>降维</li><li>特征子集选择</li><li>特征生成</li><li>离散化和二值化</li><li>属性变换</li></ul><h3 id="3-4-数据组织与管理"><a href="#3-4-数据组织与管理" class="headerlink" title="3.4 数据组织与管理"></a>3.4 数据组织与管理</h3><h3 id="3-5-数据分析与挖掘"><a href="#3-5-数据分析与挖掘" class="headerlink" title="3.5 数据分析与挖掘"></a>3.5 数据分析与挖掘</h3><h3 id="3-6-数据科学与可视化"><a href="#3-6-数据科学与可视化" class="headerlink" title="3.6 数据科学与可视化"></a>3.6 数据科学与可视化</h3><h2 id="第4章：数据可视化基础"><a href="#第4章：数据可视化基础" class="headerlink" title="第4章：数据可视化基础"></a>第4章：数据可视化基础</h2><h3 id="4-1-数据可视化的基本框架"><a href="#4-1-数据可视化的基本框架" class="headerlink" title="4.1 数据可视化的基本框架"></a>4.1 数据可视化的基本框架</h3><h4 id="4-1-1-数据可视化流程"><a href="#4-1-1-数据可视化流程" class="headerlink" title="4.1.1 数据可视化流程"></a>4.1.1 数据可视化流程</h4><p>流程中的核心要素</p><ul><li>数据表示与变换</li><li>数据的可视化呈现</li><li>用户交互</li></ul><h4 id="4-1-2-数据可视化设计"><a href="#4-1-2-数据可视化设计" class="headerlink" title="4.1.2 数据可视化设计"></a>4.1.2 数据可视化设计</h4><p>四个级联的层次</p><ol><li>刻画真实用户问题</li><li>抽象层：将特定领域的任务和数据映射到抽象且通用的任务及数据类型</li><li>编码层：设计与数据类型相关的视觉编码及交互方法</li><li>最内层：创建正确完成系统设计的算法</li></ol><h3 id="4-2-可视化中的数据"><a href="#4-2-可视化中的数据" class="headerlink" title="4.2 可视化中的数据"></a>4.2 可视化中的数据</h3><h4 id="4-2-1-数据认知"><a href="#4-2-1-数据认知" class="headerlink" title="4.2.1 数据认知"></a>4.2.1 数据认知</h4><h4 id="4-2-2-数据类型"><a href="#4-2-2-数据类型" class="headerlink" title="4.2.2 数据类型"></a>4.2.2 数据类型</h4><h3 id="4-3-可视化的基本图表"><a href="#4-3-可视化的基本图表" class="headerlink" title="4.3 可视化的基本图表"></a>4.3 可视化的基本图表</h3><h3 id="4-4-可视化设计原则"><a href="#4-4-可视化设计原则" class="headerlink" title="4.4 可视化设计原则"></a>4.4 可视化设计原则</h3><h4 id="4-4-1-数据到可视化的直接映像"><a href="#4-4-1-数据到可视化的直接映像" class="headerlink" title="4.4.1 数据到可视化的直接映像"></a>4.4.1 数据到可视化的直接映像</h4><h4 id="4-4-2-视图选择与交互设计"><a href="#4-4-2-视图选择与交互设计" class="headerlink" title="4.4.2 视图选择与交互设计"></a>4.4.2 视图选择与交互设计</h4><p>视图的交互包括以下一些方面</p><ul><li>滚动与缩放</li><li>颜色映射的控制</li><li>数据映射方式的控制</li><li>数据缩放与裁剪工具</li><li>LOD控制（细节层次控制）</li></ul><h4 id="4-4-3-信息密度——数据的筛选"><a href="#4-4-3-信息密度——数据的筛选" class="headerlink" title="4.4.3 信息密度——数据的筛选"></a>4.4.3 信息密度——数据的筛选</h4><h4 id="…"><a href="#…" class="headerlink" title="…."></a>….</h4><h3 id="4-5-可视化理论发展"><a href="#4-5-可视化理论发展" class="headerlink" title="4.5 可视化理论发展"></a>4.5 可视化理论发展</h3><h1 id="时空数据篇"><a href="#时空数据篇" class="headerlink" title="时空数据篇"></a>时空数据篇</h1><h2 id="第5章：空间标量场可视化"><a href="#第5章：空间标量场可视化" class="headerlink" title="第5章：空间标量场可视化"></a>第5章：空间标量场可视化</h2><blockquote><p>标量场：空间采样位置上记录单个标量的数据场</p></blockquote><h3 id="5-1-一维标量场可视化"><a href="#5-1-一维标量场可视化" class="headerlink" title="5.1 一维标量场可视化"></a>5.1 一维标量场可视化</h3><blockquote><p>沿着空间中某条路径采样得到的标量场数据</p></blockquote><h3 id="5-2-二维标量场可视化"><a href="#5-2-二维标量场可视化" class="headerlink" title="5.2 二维标量场可视化"></a>5.2 二维标量场可视化</h3><h4 id="5-2-1-颜色映射"><a href="#5-2-1-颜色映射" class="headerlink" title="5.2.1 颜色映射"></a>5.2.1 颜色映射</h4><h4 id="5-2-2-等值线"><a href="#5-2-2-等值线" class="headerlink" title="5.2.2 等值线"></a>5.2.2 等值线</h4><h4 id="5-2-3-高度图"><a href="#5-2-3-高度图" class="headerlink" title="5.2.3 高度图"></a>5.2.3 高度图</h4><blockquote><p>将二维空间标量场转换为三维空间的高度网格</p></blockquote><h3 id="5-3-三维标量场数据可视化"><a href="#5-3-三维标量场数据可视化" class="headerlink" title="5.3 三维标量场数据可视化"></a>5.3 三维标量场数据可视化</h3><h4 id="5-3-1-空间数据表达"><a href="#5-3-1-空间数据表达" class="headerlink" title="5.3.1 空间数据表达"></a>5.3.1 空间数据表达</h4><ol><li><p>空间网格形式</p><ul><li>均匀网格</li><li>矩形网格</li><li>曲线网格</li><li>不规则网格</li></ul></li><li><p>空间网格采样方式：常规的三维数据场采样方式为立方点阵</p><ul><li>简单点阵（笛卡尔点阵）</li><li>体中心立方点阵</li><li>面中心立方点阵</li></ul></li><li><p>离散采样重建</p></li><li><p>离散采样压缩</p></li></ol><h4 id="5-3-2-空间数据特征计算"><a href="#5-3-2-空间数据特征计算" class="headerlink" title="5.3.2 空间数据特征计算"></a>5.3.2 空间数据特征计算</h4><blockquote><ul><li>梯度</li><li>曲率</li><li>特征线</li><li>其他艺术手段（点画、区域填充、阴影、光晕等）</li><li>拓扑结构：轮廓树等</li></ul></blockquote><h4 id="5-3-3间接体绘制"><a href="#5-3-3间接体绘制" class="headerlink" title="5.3.3间接体绘制"></a>5.3.3间接体绘制</h4><ul><li><p>移动立方体法</p></li><li><p>几何空间法</p><blockquote><p>采用显式的几何计算快速判断体素是否与等值面相交，常见方法为：采用八叉树构建三维层次结构，去除与等值面不相交的体素。</p></blockquote></li><li><p>值域空间法</p></li><li><p>图像空间法</p></li></ul><h4 id="5-3-4-规则三维标量场的直接体可视化"><a href="#5-3-4-规则三维标量场的直接体可视化" class="headerlink" title="5.3.4 规则三维标量场的直接体可视化"></a>5.3.4 规则三维标量场的直接体可视化</h4><ol><li>基本原理与光学模型：直接体绘制</li><li>采样重建</li><li>体数据分类：将采样后的标量值标记为不同的类别，并映射为可区分这些类别的光学属性</li></ol><blockquote><ul><li>以图像为中心的传输函数设计</li><li>以数据为中心的传输函数设计</li><li>混合图像和数据的智能数据分类</li></ul></blockquote><ol><li><p>光照计算</p></li><li><p>光学积分</p></li><li>体绘制流程</li></ol><blockquote><p>基于体绘制积分的直接体绘制算法：</p><ul><li>图像空间扫描法：扫描每个像素<ul><li>光线投射法</li></ul></li><li>物体空间投影法：按深度顺序遍历三维标量场每个体素<ul><li>纹理切片法</li><li>滚雪球法：将体素看做空间核函数投影到屏幕图像，并将体素发射的能量扩散至投影中心周围的像素上，仿佛雪球落在地面上，形成体素投影足迹</li></ul></li></ul></blockquote><h4 id="5-3-5-不规则体数据的体可视化"><a href="#5-3-5-不规则体数据的体可视化" class="headerlink" title="5.3.5 不规则体数据的体可视化"></a>5.3.5 不规则体数据的体可视化</h4><ol><li>基于规则化和半规则化的可视化</li></ol><blockquote><p>优点：采用重采样方法将不规则数据场转换为规则或半规则表示，减少存储量，提高绘制效率</p><p>缺点：采样精度和存储冗余</p></blockquote><ol><li>自适应网格数据的直接体可视化</li><li>四面体结构标量场的直接体可视化</li><li>无网格体绘制</li></ol><h2 id="第6章：地理信息可视化"><a href="#第6章：地理信息可视化" class="headerlink" title="第6章：地理信息可视化"></a>第6章：地理信息可视化</h2><h3 id="6-1-地图投影"><a href="#6-1-地图投影" class="headerlink" title="6.1 地图投影"></a>6.1 地图投影</h3><h4 id="6-1-1-墨卡托投影"><a href="#6-1-1-墨卡托投影" class="headerlink" title="6.1.1 墨卡托投影"></a>6.1.1 墨卡托投影</h4><p>即平常所见的世界地图就是墨卡托投影得来</p><h4 id="6-1-2-亚尔勃斯投影"><a href="#6-1-2-亚尔勃斯投影" class="headerlink" title="6.1.2 亚尔勃斯投影"></a>6.1.2 亚尔勃斯投影</h4><p>等积圆锥投影。首先使圆锥投影面与地球球面相割于两条纬线上，然后按照等面积条件将地球的经纬网投影到圆锥面上，将圆锥面展开就得到了亚尔勃斯投影。</p><h4 id="6-1-3-方位角投影"><a href="#6-1-3-方位角投影" class="headerlink" title="6.1.3 方位角投影"></a>6.1.3 方位角投影</h4><p>地图上任何一点沿着经度线到投影中远点的距离保持不变。</p><p>联合国国徽上的地图就采用了方位角投影方法。</p><h3 id="6-2-点数据可视化"><a href="#6-2-点数据可视化" class="headerlink" title="6.2 点数据可视化"></a>6.2 点数据可视化</h3><blockquote><p>点数据描述对象是地理空间中离散的点，具有经度和纬度的坐标，但不具备大小尺寸</p></blockquote><h3 id="6-3-线数据可视化"><a href="#6-3-线数据可视化" class="headerlink" title="6.3 线数据可视化"></a>6.3 线数据可视化</h3><h3 id="6-4-区域数据的可视化"><a href="#6-4-区域数据的可视化" class="headerlink" title="6.4 区域数据的可视化"></a>6.4 区域数据的可视化</h3><h4 id="6-4-1-Choropleth地图"><a href="#6-4-1-Choropleth地图" class="headerlink" title="6.4.1 Choropleth地图"></a>6.4.1 Choropleth地图</h4><blockquote><p>Choropleth地图可视化假设数据的属性在一个区域内部平均分布，因此一个区域用同一种颜色来表示其属性。</p></blockquote><p>Choropleth地图最大的问题在于：数据分布于地理区域大小的不对称。通常大量数据集中于人口密集的区域，而人口稀疏的地区却占有大多数的屏幕空间，用大量的屏幕空间来表示小部分数据的做法对空间的利用非常不经济，这种不对称害常常会造成用户对数据的错误理解。</p><h4 id="6-4-2-Cartogram"><a href="#6-4-2-Cartogram" class="headerlink" title="6.4.2 Cartogram"></a>6.4.2 Cartogram</h4><blockquote><p>Catrtogram可视化按照地理区域的属性值对各个区域进行适当的变形，以克服Choropleth地图对空间使用的不合理性</p></blockquote><h4 id="6-4-3-规则形状地图"><a href="#6-4-3-规则形状地图" class="headerlink" title="6.4.3 规则形状地图"></a>6.4.3 规则形状地图</h4><blockquote><p>采用更简单的几何形状来表示地图上的区域，例如矩形或者圆形，这是因为标准的几何图形使用户能更容易地判断区域的面积大小。</p></blockquote><h4 id="6-4-4-多元关系地图"><a href="#6-4-4-多元关系地图" class="headerlink" title="6.4.4 多元关系地图"></a>6.4.4 多元关系地图</h4><p>不同地理位置的区域属性可能具有关联关系。</p><p>气泡集合法—-&gt;线集合方法</p><h3 id="6-5-地理信息可视化的应用"><a href="#6-5-地理信息可视化的应用" class="headerlink" title="6.5 地理信息可视化的应用"></a>6.5 地理信息可视化的应用</h3><h4 id="6-5-1-地球与生存环境"><a href="#6-5-1-地球与生存环境" class="headerlink" title="6.5.1 地球与生存环境"></a>6.5.1 地球与生存环境</h4><p>气象相关的数据，地震波传递的模拟数据，鸟类的分布…</p><h4 id="6-5-2-城市与日常生活"><a href="#6-5-2-城市与日常生活" class="headerlink" title="6.5.2 城市与日常生活"></a>6.5.2 城市与日常生活</h4><h4 id="6-5-3-地理时空数据"><a href="#6-5-3-地理时空数据" class="headerlink" title="6.5.3 地理时空数据"></a>6.5.3 地理时空数据</h4><blockquote><p>不仅包括了地理空间的位置，也包括了随时间变化的信息</p></blockquote><h4 id="6-5-4-复杂地理数据的可视化"><a href="#6-5-4-复杂地理数据的可视化" class="headerlink" title="6.5.4 复杂地理数据的可视化"></a>6.5.4 复杂地理数据的可视化</h4><h3 id="6-6-地理信息可视化的其他挑战"><a href="#6-6-地理信息可视化的其他挑战" class="headerlink" title="6.6 地理信息可视化的其他挑战"></a>6.6 地理信息可视化的其他挑战</h3><h4 id="6-6-1-地图标注"><a href="#6-6-1-地图标注" class="headerlink" title="6.6.1 地图标注"></a>6.6.1 地图标注</h4><blockquote><p>如何将文字或图形的标识合理放置在地图上</p></blockquote><h4 id="6-6-2-地图综合"><a href="#6-6-2-地图综合" class="headerlink" title="6.6.2 地图综合"></a>6.6.2 地图综合</h4><p>根据不同的需求，需要对同一个区域绘制大尺寸的详图和小尺寸的简图。</p><h2 id="第7章：大规模多变量空间数据场可视化"><a href="#第7章：大规模多变量空间数据场可视化" class="headerlink" title="第7章：大规模多变量空间数据场可视化"></a>第7章：大规模多变量空间数据场可视化</h2><blockquote><p>科学数据可分为：</p><ul><li>多维度：物理空间中独立变量的维数</li><li>多变量：变量和属性的数目</li><li>多模态：获取数据的方法不同，各自对应的数据的组织结构和尺度不同</li><li>多趟</li><li>多模型</li></ul></blockquote><h3 id="7-1-大规模空间标量场数据的实体可视化"><a href="#7-1-大规模空间标量场数据的实体可视化" class="headerlink" title="7.1 大规模空间标量场数据的实体可视化"></a>7.1 大规模空间标量场数据的实体可视化</h3><ol><li>大规模空间标量场数据的单机绘制</li><li>大规模空间标量场数据的并行绘制</li><li>时变空间标量场数据加速绘制方法</li></ol><h3 id="7-2-时变异构空间数据场的特征追踪与可视化"><a href="#7-2-时变异构空间数据场的特征追踪与可视化" class="headerlink" title="7.2 时变异构空间数据场的特征追踪与可视化"></a>7.2 时变异构空间数据场的特征追踪与可视化</h3><blockquote><p>时变标量场数据可视化的两大挑战：</p><ul><li>不规则：科学数据的复杂形态</li><li>多变量：物理空间的本质特征</li></ul></blockquote><h4 id="7-2-1-时变空间标量场数据的特征提取"><a href="#7-2-1-时变空间标量场数据的特征提取" class="headerlink" title="7.2.1 时变空间标量场数据的特征提取"></a>7.2.1 时变空间标量场数据的特征提取</h4><ul><li>可在每个时间步单独提取，但逐帧提取会造成提取的特征在时间维度上没有对应性和连续性</li><li>看做一个四维数据，统一提取时变特征</li></ul><h4 id="7-2-2-异构数据的特征融合"><a href="#7-2-2-异构数据的特征融合" class="headerlink" title="7.2.2 异构数据的特征融合"></a>7.2.2 异构数据的特征融合</h4><ul><li>多维度融合</li></ul><blockquote><p>可采用信息可视化相关方法，如平行坐标、散点图、时间直方图、纹理、影线、图标等</p></blockquote><ul><li>多模态融合</li></ul><blockquote><p>挑战在于融合方式难以定义，空间分布也可能差异很大。因此，这类数据一般需先经过配准，并转化为相同格式后才能进行融合可视化</p></blockquote><h4 id="7-2-3-时变空间标量场数据的特征追踪"><a href="#7-2-3-时变空间标量场数据的特征追踪" class="headerlink" title="7.2.3 时变空间标量场数据的特征追踪"></a>7.2.3 时变空间标量场数据的特征追踪</h4><blockquote><p>结合多视图、用户交互以及可视化分析方法。从时间、数据与表现三个角度出发确定具体的可视化原则</p></blockquote><h3 id="7-3-空间向量场数据可视化"><a href="#7-3-空间向量场数据可视化" class="headerlink" title="7.3 空间向量场数据可视化"></a>7.3 空间向量场数据可视化</h3><blockquote><p>主要目标：展示场的导向趋势信息；表达场中的模式；识别关键特征区域</p><p>流场可视化是向量场可视化中最重要的组成部分。流场可视化将物理工程产生的或与之相关的现象通过可视化以人眼能感知的图像形式显示。</p></blockquote><h4 id="7-3-1-图标法"><a href="#7-3-1-图标法" class="headerlink" title="7.3.1 图标法"></a>7.3.1 图标法</h4><p>采用图标逐个表达变量。主要图标有：线条、箭头和方向标志符</p><p>图标法简单易实现，但对于采样比较密集的数据场，将所有的向量逐点映射为图标常会导致所生成的图像杂乱无章，显示太少又不能准确地把握向量场的变化情况。此外，图标无法揭示数据的内在连续性；流场中一些特征像涡流等结构也很难用图标清晰地表达。</p><h4 id="7-3-2-几何法"><a href="#7-3-2-几何法" class="headerlink" title="7.3.2 几何法"></a>7.3.2 几何法</h4><ol><li><p>基于曲线的可视化</p><ul><li>面向稳定向量场：流线</li></ul><blockquote><p>描述向量场空间中任意一点处向量场的切线方向。</p></blockquote><ul><li>面向不稳定/时变向量场：迹线和脉线</li></ul><blockquote><p>迹线：描述向量场中一个粒子在某一时间段的流动轨迹。流线是假想的曲线，是不存在的；而迹线是实际存在的曲线，随着粒子的运动产生</p><p>脉线：描述一个粒子集合从一个起始点不同时间发射，在之后的某一时刻获取该粒子几何中粒子的位置并连接形成的轨迹。</p></blockquote></li><li><p>基于曲面的可视化</p><ul><li>面向稳定向量场：流面、流球和流形箭头</li><li>面向不稳定/时变向量场：脉面</li></ul></li><li><p>基于体的可视化</p><blockquote><p>流体可视化。将追踪粒子撒入流场，捕获粒子的运动轨迹，形成三维空间内的一个流体，继而将该流体通过特定算法转化为一个四面体的集合。</p></blockquote></li></ol><h4 id="7-3-3-纹理法"><a href="#7-3-3-纹理法" class="headerlink" title="7.3.3 纹理法"></a>7.3.3 纹理法</h4><ol><li><p>点噪声</p><blockquote><p>以单点作为生成纹理的基本单元，将随机位置、随机强度的点混合形成噪声纹理。</p></blockquote></li><li><p>线积分卷积</p><blockquote><p>以随机生成的白噪声作为输入纹理，根据向量场数据对噪声纹理进行低通滤波</p></blockquote></li><li><p>纹理平流</p><blockquote><p>根据向量场方向移动一个纹元或者一组纹元，以达到刻画向量场特征的目的</p></blockquote></li><li><p>拓扑法</p><blockquote><p>任意向量场的拓扑结构由临界点和链接临界点的曲线或曲面组成。</p><ul><li><p>临界点位置的计算与分类</p><p>临界点为向量场中各个分量均为零的点。所有的流线汇聚于这些临界点，因此这些临界点被认为是流线的“交点”。</p></li><li><p>向量场区域边界的计算</p></li></ul></blockquote></li></ol><h3 id="7-4-空间张量场数据可视化"><a href="#7-4-空间张量场数据可视化" class="headerlink" title="7.4 空间张量场数据可视化"></a>7.4 空间张量场数据可视化</h3><blockquote><p>张量：由若干坐标系改变时满足一定坐标转化关系的有序数组成的集合。</p><p>张量场可视化方法可基本分为：几何、纹理、拓扑三大类</p><p>三维二阶张量场数据是一种常见的可视化对象</p></blockquote><h4 id="7-4-1-张量场的数学描述"><a href="#7-4-1-张量场的数学描述" class="headerlink" title="7.4.1 张量场的数学描述"></a>7.4.1 张量场的数学描述</h4><h4 id="7-4-2-基于几何的方法"><a href="#7-4-2-基于几何的方法" class="headerlink" title="7.4.2 基于几何的方法"></a>7.4.2 基于几何的方法</h4><ol><li><p>图标法</p><ul><li>采样张量场，选取一些有代表性的采样点</li><li>遍历每个采样位置，根据张量信息选取合适的几何表达方法，构建张量图标</li></ul></li><li><p>纤维追踪法</p><p>二阶对称张量可分解为三个特征向量，其主特征向量与纤维的走向基本保持一致。纤维追踪算法步骤：</p><ul><li>在主特征向量场中布局种子点</li><li>以种子点为起始追踪位置，沿主特征向量向前向后追踪，直至满足给定的终止条件。</li></ul><p>本质上，纤维追踪是一种基于积分曲线的可视化方法，可从宏观上解释组织结构的连续性。</p></li></ol><h4 id="7-4-3-基于纹理的方法"><a href="#7-4-3-基于纹理的方法" class="headerlink" title="7.4.3 基于纹理的方法"></a>7.4.3 基于纹理的方法</h4><p>将张量的全部或部分属性映射为颜色，进而将张量场看成一张超纹理</p><ol><li><p>直接体可视化</p><p>对原始张量场数据集进行噪声过滤后，可选取其部分属性作为直接体数据可视化的域变量。</p></li><li><p>线积分卷积</p><p>将二阶张量场视为一个连续场，并给予张量的特征向量、特征值等度量对其进行可视化。</p><ul><li>定义与原始张量具有相同拓扑结构的正定度量（该正定度量由原始张量的特征向量与特征值转化而来，因此保证与原始张量具有相同的拓扑结构）</li><li>对该度量进行可视化</li></ul></li><li><p>基于噪声纹理的方法</p><p>生成具有一定位置和强度分布的点集。</p></li></ol><h4 id="7-4-4-基于拓扑的方法"><a href="#7-4-4-基于拓扑的方法" class="headerlink" title="7.4.4 基于拓扑的方法"></a>7.4.4 基于拓扑的方法</h4><p>向量场可视化中的拓扑方法在张量的特征向量场上的一种扩展。</p><ol><li><p>张量不变量法</p><p>采用一个与张量形状相关的标量场描述目标张量场</p></li><li><p>拉格朗日分析法</p><p>将特征向量场视为一个双向向量场，可将向量可视化中采用的拉格朗日相干结构的概念应用于特征向量场</p><blockquote><p>拉格朗日分析法主要思想：量化相邻的虚拟粒子沿着特征向量场所定义的双向向量场流动的行为差异。</p></blockquote></li></ol><h4 id="7-4-5-高阶张量场可视化"><a href="#7-4-5-高阶张量场可视化" class="headerlink" title="7.4.5 高阶张量场可视化"></a>7.4.5 高阶张量场可视化</h4><ol><li><p>图标法</p><blockquote><ul><li>采样高阶张量场</li><li>对每个采样点根据当前的高阶张量构建高阶张量图标</li></ul></blockquote></li><li><p>纤维追踪法</p><blockquote><p>与应用于二阶对称张量的主要区别在于对高阶张量实行张量分解可得到一个或多个方向。当种子点包含两个或两个以上的方向时， 纤维追踪法需要在该种子点处沿着不同方向追踪， 直至满足给定的终止条件。  </p></blockquote></li><li><p>纹理法</p><blockquote><p>将高阶张量场转化为可描述该高阶张量场物理属性的标量场，并将它视为纹理进行可视化</p></blockquote></li></ol><h3 id="7-5-多变量空间数据场可视化"><a href="#7-5-多变量空间数据场可视化" class="headerlink" title="7.5 多变量空间数据场可视化"></a>7.5 多变量空间数据场可视化</h3><blockquote><p>目的：抽取和表达数据场中多个属性及其相互关系</p><p>难点和挑战：克服多变量、类型复合、内在结构复杂且互相交织的数据特征，设计有效的视觉编码辅助用户同步地分析提取和表达这些信息、观察和研究数据属性及其相互之间的关系，发现未知的新特征和新现象</p></blockquote><h4 id="7-5-1-多变量空间数据场的数据分析与表达"><a href="#7-5-1-多变量空间数据场的数据分析与表达" class="headerlink" title="7.5.1 多变量空间数据场的数据分析与表达"></a>7.5.1 多变量空间数据场的数据分析与表达</h4><ul><li>基本手段：采用数据分析和特征抽取方法，获得多变量数据场的内部几何信息、统计特征或信息学特征，并结合投影变换和降维去噪去除冗余信息，减少数据量。</li><li>主要任务：构建和处理多变量数据场的数据结构，提取可视化以及可视表达的对象，即数据属性和衍生特征、相互之间的关系以及变化趋势等</li><li>将处理对象从原始数据空间变换到统计空间，用统计学方法表达原始数据或者抽取的特征，以达到减少数据量，同时保持关键信息、分析变量间关系的目的。</li></ul><h4 id="7-5-2-多变量空间数据场的可视化与交互"><a href="#7-5-2-多变量空间数据场的可视化与交互" class="headerlink" title="7.5.2 多变量空间数据场的可视化与交互"></a>7.5.2 多变量空间数据场的可视化与交互</h4><blockquote><ul><li>可视化：主要指基于图形学技术，对多变量数据的绘制着色和最终成像过程。</li><li>交互：便于用户对数据进行观察和分析的一系列操作，贯穿整个可视化进程。</li></ul></blockquote><ol><li><p>视觉通道与融合</p><blockquote><p>多变量空间数据场可视化的手段分成两类</p><ul><li>用不同的视觉通道映射和编码各个属性及其相互之间的关系和关联</li><li>分别可视化各个数据场的数据属性，在进行融合</li></ul></blockquote></li><li><p>交互探索</p></li></ol><h2 id="第8章：时变数据可视化"><a href="#第8章：时变数据可视化" class="headerlink" title="第8章：时变数据可视化"></a>第8章：时变数据可视化</h2><blockquote><p>时变型数据：随时间变化、带有时间属性的数据</p><ul><li>以时间轴排列的时间序列数据</li><li>不以时间为变量，但具有内在的排列顺序的顺序型数据集</li></ul><p>时变型数据可视化方法：</p><ul><li>采用静态方式展示数据中记录的内容，不随时间变化，但可采用多角度、数据比较等体现数据随时间变化的趋势和规律</li><li>采用动画手法，动态地展示随之间变化的感觉和过程，因而具有更多的表现空间</li></ul></blockquote><h3 id="8-1-时间属性的可视化"><a href="#8-1-时间属性的可视化" class="headerlink" title="8.1 时间属性的可视化"></a>8.1 时间属性的可视化</h3><blockquote><p>对时间属性刻画有三种形式：</p><ul><li>线性时间和周期时间</li><li>时间点和时间间隔</li><li>顺序时间、分支时间和多角度时间</li></ul></blockquote><ol><li><p>线性时间和周期时间可视化</p></li><li><p>日历时间可视化</p></li><li><p>分支和多角度时间可视化</p><blockquote><p>按照时间组织结构，分类：</p><ul><li>线性多角度时间可视化</li><li>流状分支时间主线可视化</li><li>…</li></ul></blockquote></li><li><p>时间属性的动态可视化</p></li></ol><h3 id="8-2-多变量时变型数据可视化"><a href="#8-2-多变量时变型数据可视化" class="headerlink" title="8.2 多变量时变型数据可视化"></a>8.2 多变量时变型数据可视化</h3><h4 id="8-2-1-基于线表示的可视化"><a href="#8-2-1-基于线表示的可视化" class="headerlink" title="8.2.1 基于线表示的可视化"></a>8.2.1 基于线表示的可视化</h4><blockquote><p>将时变序列中的每个数据采样点连接，原时变序列组成一条在高维空间的线，在低维空间可视化这条线可揭示高维空间的时间序列演化趋势</p></blockquote><h4 id="8-2-2-基于图结构的可视化"><a href="#8-2-2-基于图结构的可视化" class="headerlink" title="8.2.2 基于图结构的可视化"></a>8.2.2 基于图结构的可视化</h4><h4 id="8-2-3-时间序列数据的可视化交互"><a href="#8-2-3-时间序列数据的可视化交互" class="headerlink" title="8.2.3 时间序列数据的可视化交互"></a>8.2.3 时间序列数据的可视化交互</h4><blockquote><p>直接可视化大规模的时变型数据难以呈现全部细节，因此需要设计合适的交互方法表现重要的区域。</p><p>常用的一种交互手段：从时变型数据中查询特定的时间序列，以便交互地发现特征和趋势。</p></blockquote><h3 id="8-3-流数据可视化"><a href="#8-3-流数据可视化" class="headerlink" title="8.3 流数据可视化"></a>8.3 流数据可视化</h3><p>输入数据以一个或多个“连续数据流”的形式到达。</p><h4 id="8-3-1-流数据可视化模型"><a href="#8-3-1-流数据可视化模型" class="headerlink" title="8.3.1 流数据可视化模型"></a>8.3.1 流数据可视化模型</h4><blockquote><p>流数据处理并没有一个固定的模型，通常按处理目的和昂发的不同会有不同的模型</p></blockquote><h4 id="8-3-2-流数据处理技术"><a href="#8-3-2-流数据处理技术" class="headerlink" title="8.3.2 流数据处理技术"></a>8.3.2 流数据处理技术</h4><blockquote><p>分类、聚类、频繁模式挖掘、降维等传统数据挖掘算法在流数据中心的改进算法，大数据相关的统计方法、采样算法和哈希算法，以及滑动窗口、数据预测等流数据特有的算法</p></blockquote><ol><li><p>窗口技术</p><ul><li>滑动窗口：在时间轴上滑动的窗口，挖掘技术的对象限定为窗口内的数据</li><li>衰减窗口：将历史数据考虑在内，每个数据项都被赋予一个随时间不断减小的衰减因子，从而达到越历史的数据权重越低的结果</li><li>时间：交互技术，通过时间盒框选部分数据进行联合搜索</li></ul></li><li><p>时序数据相似性计算</p><p>动态时间扭曲：基于形状的相似性算法</p></li><li><p>符号技术</p></li></ol><h4 id="8-3-3-流数据可视化案例"><a href="#8-3-3-流数据可视化案例" class="headerlink" title="8.3.3 流数据可视化案例"></a>8.3.3 流数据可视化案例</h4><blockquote><p>流数据可视化按功能分：</p><ul><li>监控性：用滑动窗口固定一个时间区间，把流数据转化为静态数据，数据更新方式可以是刷新，属于局部分析</li><li>叠加性（历史型）：把新产生的数据可视映射到原来的历史数据可视化结果上，更新方式是渐进式更新，属于全局分析</li></ul></blockquote><ol><li><p>系统日志监控流数据</p></li><li><p>文本流数据</p></li><li><p>并行流计算框架</p><p>流计算强调的是数据流的形式和实时性</p></li></ol><h1 id="非时空数据篇"><a href="#非时空数据篇" class="headerlink" title="非时空数据篇"></a>非时空数据篇</h1><h2 id="第9章：层次和网络数据可视化"><a href="#第9章：层次和网络数据可视化" class="headerlink" title="第9章：层次和网络数据可视化"></a>第9章：层次和网络数据可视化</h2><h3 id="9-1-层次数据"><a href="#9-1-层次数据" class="headerlink" title="9.1 层次数据"></a>9.1 层次数据</h3><blockquote><p>这种关系主要表现为两类：包含和从属</p><p>层次结构可以被抽象成树型结构，它是以分支关系定义的非线性结构</p></blockquote><h4 id="9-1-1-层次数据的可视化"><a href="#9-1-1-层次数据的可视化" class="headerlink" title="9.1.1 层次数据的可视化"></a>9.1.1 层次数据的可视化</h4><ul><li><p>节点-链接：将单个个体绘制成一个节点，节点之间的连线表示个体之间的层次关系。</p><p>代表技术：空间树、圆锥树</p></li><li><p>空间填充：用空间中的分块区域表示数据中的个体，并用上层区域对下层区域的包围表示彼此之间的层次关系。</p><p>代表技术：树图</p></li><li><p>混合前两种</p></li></ul><h4 id="9-1-2-节点-链接法"><a href="#9-1-2-节点-链接法" class="headerlink" title="9.1.2 节点-链接法"></a>9.1.2 节点-链接法</h4><blockquote><p>核心问题：如何在屏幕上放置和绘制节点及节点之间的链接关系</p></blockquote><p>布局算法：</p><ul><li><p>纵横轴布局</p><blockquote><p>自底向上递归计算；对于每个父节点，确保子树已被绘制；采用二维形状的包围盒技术尽可能紧致地包裹子树，并用来指导两棵子树的靠拢；将父节点放在各子树的中心位置</p></blockquote></li><li><p>正交布局</p><blockquote><p>节点放置的时候都按照水平或垂直对齐。</p></blockquote></li><li><p>径向布局</p><blockquote><p>根节点位于圆心，不同层次的节点被放置在半径不同的同心圆上</p><p>扩展：环状径向树、圆锥树</p></blockquote></li></ul><h4 id="9-1-3-空间填充法"><a href="#9-1-3-空间填充法" class="headerlink" title="9.1.3 空间填充法"></a>9.1.3 空间填充法</h4><ul><li><p>树图法：从根节点出发屏幕空间根据相应的子节点数目被分成多个矩形，矩形的面积大小通常对应节点的属性。每个节点又按照相应节点的子节点递归地进行分割，直到叶节点为止。</p><blockquote><p>改进：正等分法（放置一个节点又大量子节点时，出现非常细的条状空间）</p></blockquote></li><li><p>放射状布局</p></li></ul><h4 id="9-1-4-其他方法"><a href="#9-1-4-其他方法" class="headerlink" title="9.1.4 其他方法"></a>9.1.4 其他方法</h4><ul><li><p>相邻层次图：节点-链接法的空间填充的变种</p><blockquote><p>采用填充的区域表达节点，相邻节点之间的位置关系则编码了彼此之间的层次关系。</p></blockquote></li><li><p>混合可视化方法</p><blockquote><p>除了在叶节点呈现数据细节外，中间层次的节点由树图法表达。</p><p>缺点：产生的可视化结构相对复杂</p></blockquote></li></ul><h3 id="9-2-网络数据"><a href="#9-2-网络数据" class="headerlink" title="9.2 网络数据"></a>9.2 网络数据</h3><h4 id="9-2-1-网络与图"><a href="#9-2-1-网络与图" class="headerlink" title="9.2.1 网络与图"></a>9.2.1 网络与图</h4><blockquote><p>网络数据：不具备层次结构的关系数据</p></blockquote><h4 id="9-2-2-网络数据可视化"><a href="#9-2-2-网络数据可视化" class="headerlink" title="9.2.2 网络数据可视化"></a>9.2.2 网络数据可视化</h4><ol><li><p>节点-链接法</p><p>用节点表示对象，用线表示关系的节点-链接布局。</p><blockquote><ul><li><p>力引导布局：减少布局中边的交叉，尽量保持边的长度一致。</p><p>只能达到局部优化，而不能达到全局优化，并且初始位置对最终优化结果影响较大</p><p>优化思路：减少迭代次数、降低每次迭代的时间复杂度</p></li><li><p>多维尺度分析布局</p><p>针对高维数据，用降维方法将数据从高维空间降到低维空间，力求保持数据之间的相对位置不变，同时也保持布局效果的美观性</p></li><li><p>弧长链接图</p><p>采用以为布局方式，即节点沿某个线性轴或环状排列，圆弧表达节点之间的链接关系。</p></li></ul></blockquote></li><li><p>相邻矩阵布局</p><blockquote><p>可显著表达节点之间的直接关系，而对间接关系，也就是关系传递性的可视表达比较薄弱</p><p>好处：完全规避边的交叉，</p><p>缺点：关系传递表达不如节点-链接布局明显</p></blockquote></li><li><p>混合布局方法</p></li></ol><h4 id="9-2-3-网络数据的地图隐喻可视化"><a href="#9-2-3-网络数据的地图隐喻可视化" class="headerlink" title="9.2.3 网络数据的地图隐喻可视化"></a>9.2.3 网络数据的地图隐喻可视化</h4><blockquote><p><strong>GMAP</strong>：将网络图用地图形式表达</p><ol><li>将网络数据布置与二维空间</li><li>用聚类分析的方法将网络图中的节点归类</li><li>根据各个类别中点的分类情况构造Voronoi图（一个Voronoi图代表地图的一个区域）</li><li>给地图的每个Voronoi区域上色</li></ol></blockquote><h4 id="9-2-4-超图及其可视化"><a href="#9-2-4-超图及其可视化" class="headerlink" title="9.2.4 超图及其可视化"></a>9.2.4 超图及其可视化</h4><ol><li><p>超图的定义</p><blockquote><p>超图：起源于离散数学中的集簇，集合的集合。</p></blockquote></li><li><p>超图的可视化</p><ul><li><p>文氏图表达</p><blockquote><p>基于集合的标识方法，将超图中的超边表示成带颜色的简单闭曲线或封闭区域</p><p>优点：表达清晰直观</p><p>缺点：超边之间会产生重叠，表达的效果随着顶点和超边规模的增加急剧下降</p></blockquote></li><li><p>斯坦纳树</p><blockquote><p>每一条超边都表示成一颗斯坦纳树。</p><p>优点：经济节约，用最少的连线就可以表达超图</p><p>缺点：不够直观，不易识别，且求斯坦纳树是一个N-P难度问题，只有一些启发式算法存在</p></blockquote></li><li><p>Zykov表示法</p><blockquote><p>将超图的顶点表示成节点，超边表示成一个曲面片</p><p>优点：非常直观，能在一定程度上应对顶点重复的情况</p><p>缺点：表达规模有限，超边和顶点的数目不能太多</p></blockquote></li><li><p>正交法</p><blockquote><p>正交法边允许垂直弯曲，所有边只能沿x或y两个方向弯曲</p></blockquote></li><li><p>二分图</p><blockquote><p>将顶点和超边均表示成节点，平行放置，在两个部分之间根据超边和顶点的包含关系连线</p><p>优点：简单明了，布局简单，适应规模适中</p><p>缺点：不够直观，需要通过连线来找顶点和超边的对应关系</p></blockquote></li></ul></li></ol><h4 id="9-2-5-动态网络数据可视化"><a href="#9-2-5-动态网络数据可视化" class="headerlink" title="9.2.5 动态网络数据可视化"></a>9.2.5 动态网络数据可视化</h4><h4 id="9-2-6图可视化的视觉效果"><a href="#9-2-6图可视化的视觉效果" class="headerlink" title="9.2.6图可视化的视觉效果"></a>9.2.6图可视化的视觉效果</h4><blockquote><ul><li>根据信息可视化的信息分级原则，对大规模图进行层次化简化</li><li>另一种思路是在尽量不减少原图信息量的前提下，对图进行基于骨架的聚类</li></ul></blockquote><ol><li><p>图的拓扑简化</p><ul><li>边的提取（最小生成树…）</li><li>节点聚类</li></ul></li><li><p>图的边绑定</p><p>核心思想：保持信息量的情况下，将图上互相靠近的边捆绑成束，从而达到去繁就简的效果</p></li></ol><h4 id="9-2-7-图可视化的交互"><a href="#9-2-7-图可视化的交互" class="headerlink" title="9.2.7 图可视化的交互"></a>9.2.7 图可视化的交互</h4><blockquote><p>图的拓扑简化和边绑定目的是解决规模较大的图存在视觉混杂问题</p></blockquote><ol><li><p>基于视点的交互</p><blockquote><p>用交互手段来预测和帮助用户在途中切换视点</p><p>方法：</p><ul><li>界面平移、缩放旋转</li><li>人眼和体感跟踪技术</li></ul></blockquote></li><li><p>基于图元的交互</p><blockquote><p>对于一个可视化映射元素的交互，如节点的选择、高亮、删除、移动、展开与收缩</p></blockquote></li><li><p>基于图结构的交互</p><blockquote><p>“焦点+上下文”技术</p></blockquote></li></ol><h4 id="9-2-8-网络数据可视化挑战"><a href="#9-2-8-网络数据可视化挑战" class="headerlink" title="9.2.8 网络数据可视化挑战"></a>9.2.8 网络数据可视化挑战</h4><blockquote><ol><li>图的规模</li><li>用户对数据的认知能力和感知能力不尽相同</li></ol></blockquote><h2 id="第10章：文本和文档可视化"><a href="#第10章：文本和文档可视化" class="headerlink" title="第10章：文本和文档可视化"></a>第10章：文本和文档可视化</h2><h3 id="10-1-文本可视化释义"><a href="#10-1-文本可视化释义" class="headerlink" title="10.1 文本可视化释义"></a>10.1 文本可视化释义</h3><blockquote><ul><li>文本可视化采用可视表达技术刻画文本和文档，直观地呈现文档中的有效信息</li><li>如何辅助用户准确无误地从文本中提取并简洁直观地展示信息</li></ul></blockquote><h4 id="10-1-1-文本信息的层级"><a href="#10-1-1-文本信息的层级" class="headerlink" title="10.1.1 文本信息的层级"></a>10.1.1 文本信息的层级</h4><ol><li><p>词汇级</p><blockquote><p>指从一连串的文本文字中提取的语义单元信息</p><ul><li>语义单元：由一个或多个字符组成的词元，文本信息的最小单元</li><li>可提取的信息：文本涉及的字、词、短语，以及它们在文章内的分布统计、词根词位等相关信息</li></ul></blockquote></li><li><p>词法级</p><blockquote><p>指基于文本的语言结构对词汇级的语义单元进一步分析和解释而提取的信息</p><ul><li>语义单元的语法属性，例如：词性、单复数、词与词之间的相似性，以及地点、时间、日期、人名等实体信息</li><li>命名实体识别：语法级信息的提取过程</li></ul></blockquote></li><li><p>语义级</p><blockquote><p>研究文本整体所表达的语义内容信息和语义关系，是文本的最高层信息</p><ul><li>深入分析词汇级和语法级所提取的知识在文本中的含义（如：文本的字词、短语等）</li><li>通过文本所传达的信息</li></ul></blockquote></li></ol><h4 id="10-1-2-文本可视化的研究内容"><a href="#10-1-2-文本可视化的研究内容" class="headerlink" title="10.1.2 文本可视化的研究内容"></a>10.1.2 文本可视化的研究内容</h4><p>文本可视化的研究动机：人类理解文本信息的需求</p><blockquote><p>以文本文档的类别：</p><ul><li>单文本可视化</li><li>文本集合可视化</li><li>时序性可视化</li></ul><p>以文本信息特征：</p><ul><li>文本内容可视化</li><li>文本关系可视化</li><li>文本多层面信息的可视化</li></ul></blockquote><h4 id="10-1-3-文本可视化流程"><a href="#10-1-3-文本可视化流程" class="headerlink" title="10.1.3 文本可视化流程"></a>10.1.3 文本可视化流程</h4><ol><li><p>文本信息挖掘</p><blockquote><ul><li>文本数据的预处理</li><li>文本特征的抽取</li><li>文本特征的度量</li></ul></blockquote></li><li><p>视图绘制</p><blockquote><p>将文本挖掘所提炼的信息变换为直观的可视视图</p></blockquote></li><li><p>人机交互</p></li></ol><h3 id="10-2-文本信息分析基础"><a href="#10-2-文本信息分析基础" class="headerlink" title="10.2 文本信息分析基础"></a>10.2 文本信息分析基础</h3><h4 id="10-2-1-分词技术和词干提取"><a href="#10-2-1-分词技术和词干提取" class="headerlink" title="10.2.1 分词技术和词干提取"></a>10.2.1 分词技术和词干提取</h4><p>常用语文本数据的预处理</p><h4 id="10-2-2-向量空间模型"><a href="#10-2-2-向量空间模型" class="headerlink" title="10.2.2 向量空间模型"></a>10.2.2 向量空间模型</h4><blockquote><p>指利用向量符号对文本进行度量的代数模型，指代一系列向量空间的定义、生成、度量和应用的方法与技术，常用于自然语言处理、信息检索等领域</p></blockquote><ol><li><p>词袋模型</p><blockquote><ul><li><p>构造文本向量的常见方法，用来提取词汇级文本信息</p></li><li><p>词袋模型将一个文档的内容总结为在由关键词组成的集合上加权分布向量</p></li></ul></blockquote></li><li><p>文本的相似性度量</p></li><li><p>TF-IDF（权重分配模型）</p><blockquote><p>用以评估一个单词或字对于一个文档集或一个语料库中的其中一份文档的重要程度</p><p>核心思想：字词对于某个文档的重要性随着它在这个文档中出现的次数成正相关增加，但同时会随着它在文档集合中出现的频率而负相关下降</p></blockquote></li></ol><h4 id="10-2-3-主题抽取"><a href="#10-2-3-主题抽取" class="headerlink" title="10.2.3 主题抽取"></a>10.2.3 主题抽取</h4><ol><li><p>基于矩阵分解的非概念模型</p><blockquote><ul><li>词项-文档矩阵被投影到K维空间中，其中每个维度代表一个主题</li><li>每个文档用K个主题的线性组合表达而成</li></ul></blockquote></li><li><p>基于贝叶斯的概率模型</p><blockquote><ul><li>主题被看成多个词项的概率分布，文档理解为多个主题的组合而产生</li><li>一个文档的内容是在主题的概率性分布的基础上，从主题的词项分布中抽取词条而构成</li></ul></blockquote></li></ol><h3 id="10-3-文本内容可视化"><a href="#10-3-文本内容可视化" class="headerlink" title="10.3 文本内容可视化"></a>10.3 文本内容可视化</h3><h4 id="10-3-1-基于关键词的文本内容可视化"><a href="#10-3-1-基于关键词的文本内容可视化" class="headerlink" title="10.3.1 基于关键词的文本内容可视化"></a>10.3.1 基于关键词的文本内容可视化</h4><ul><li><p>标签云</p></li><li><p>文档散</p><blockquote><p>不仅采用关键词可视化文本的内容，还借鉴这些关键词汇在人类词汇中的关系来布局关键词</p></blockquote></li><li><p>文档卡片</p><blockquote><p>采用文章的关键图片和关键词信息表达文本的内容</p><p>将每个文档的关键词和关键图片紧凑地布局在一张卡片上，将其可视化为一张“扑克牌”，这样便于用户在不同尺寸的设备中查看和对比每个文档的信息</p></blockquote></li></ul><h4 id="10-3-2-时序性的文本内容可视化"><a href="#10-3-2-时序性的文本内容可视化" class="headerlink" title="10.3.2 时序性的文本内容可视化"></a>10.3.2 时序性的文本内容可视化</h4><ol><li><p>主题河流</p><blockquote><p>采用河流作为可视原语来编码文档集合中的主题信息，将主题隐喻为时间上不断延续的河流</p></blockquote></li><li><p>历史流</p><blockquote><p>初衷：可视地表达每个版本的维护者他们所做的修改</p></blockquote></li></ol><h4 id="10-3-3-文本特征的分布模式可视化"><a href="#10-3-3-文本特征的分布模式可视化" class="headerlink" title="10.3.3 文本特征的分布模式可视化"></a>10.3.3 文本特征的分布模式可视化</h4><ul><li><p>文本弧</p><blockquote><p>文档的句子按照文字的组织顺序有序地分布在螺线上。螺线开头是文章的首句，末尾是文章的结尾句子，画布中间填充的是文档中出现的单词，字体和颜色饱和度表示对应的词频。</p><p>全文各处出现频繁的词汇靠近画布中心，而局部频繁出现的单词靠近其对应的的螺线区域</p></blockquote></li><li><p>文献指纹：了解某一特征在全文中的分布规律</p></li><li><p>文本特征透镜</p></li></ul><h4 id="10-3-4-情感分析可视化"><a href="#10-3-4-情感分析可视化" class="headerlink" title="10.3.4 情感分析可视化"></a>10.3.4 情感分析可视化</h4><h4 id="10-3-5-文档信息检索可视化"><a href="#10-3-5-文档信息检索可视化" class="headerlink" title="10.3.5 文档信息检索可视化"></a>10.3.5 文档信息检索可视化</h4><h4 id="10-3-6-软件可视化"><a href="#10-3-6-软件可视化" class="headerlink" title="10.3.6 软件可视化"></a>10.3.6 软件可视化</h4><h3 id="10-4-文本关系可视化"><a href="#10-4-文本关系可视化" class="headerlink" title="10.4 文本关系可视化"></a>10.4 文本关系可视化</h3><h4 id="10-4-1-基于图的文本可视化"><a href="#10-4-1-基于图的文本可视化" class="headerlink" title="10.4.1 基于图的文本可视化"></a>10.4.1 基于图的文本可视化</h4><ul><li><p>单词树</p><blockquote><p>树的根节点是用户感兴趣的一个词，子节点时原文中搭配在父节点后面的词或短语。</p><p>字体大小反映词或短语在文中出现的频率</p></blockquote></li><li><p>短语网络</p><blockquote><p>节点表示语义单元，如词或短语；</p><p>边表示用户指定的关系；</p><p>箭头表示关系的有向性</p></blockquote></li></ul><h4 id="10-4-2-文档集合关系可视化"><a href="#10-4-2-文档集合关系可视化" class="headerlink" title="10.4.2 文档集合关系可视化"></a>10.4.2 文档集合关系可视化</h4><ul><li><p>星系视图</p><blockquote><p>采用仿生的方法可视表达文档间的相似性</p><p>每个文档被看成星系中一颗星星， 通过投影的方法将所有文档按照其主题的相似性投影为二维平面的点集， 点之间的二维距离与其主题相似性成正比， 即主题越相似的文本所对应的点位置越相近  </p></blockquote></li><li><p>主题地貌</p><blockquote><p>在其所计算的文档投影位置的基础上， 采用等高线的方式可视表达文档集合中相似文档的分布情况  </p></blockquote></li><li><p>基于范例的大文本集合投影  </p><blockquote><p>先将少量样例文本投影到二维空间， 再根据用户选取的样例， 后续选择一些相关的文本投影在二维空间中  </p></blockquote></li></ul><h3 id="10-5-文本多层面信息的可视表达"><a href="#10-5-文本多层面信息的可视表达" class="headerlink" title="10.5 文本多层面信息的可视表达"></a>10.5 文本多层面信息的可视表达</h3><h3 id="10-6-总结"><a href="#10-6-总结" class="headerlink" title="10.6 总结"></a>10.6 总结</h3><ol><li>文本信息提取技术</li><li>可视表达</li></ol><h2 id="第11章-跨媒体数据可视化"><a href="#第11章-跨媒体数据可视化" class="headerlink" title="第11章 跨媒体数据可视化"></a>第11章 跨媒体数据可视化</h2><h3 id="11-1-图像"><a href="#11-1-图像" class="headerlink" title="11.1 图像"></a>11.1 图像</h3><h4 id="11-1-1-图像网格"><a href="#11-1-1-图像网格" class="headerlink" title="11.1.1 图像网格"></a>11.1.1 图像网格</h4><blockquote><p>根据图像的原信息对图像按二维数组形式排列， 形成一张更大的图像</p></blockquote><h4 id="11-1-2-时空采样"><a href="#11-1-2-时空采样" class="headerlink" title="11.1.2 时空采样"></a>11.1.2 时空采样</h4><blockquote><p>对图像或图像序列的部分内容或区域进行时域或空间域的重采样并呈现的方法统称为基于时空采样的图像可视化  </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据可视化（第二版）陈为-—视物致知&quot;&gt;&lt;a href=&quot;#数据可视化（第二版）陈为-—视物致知&quot; class=&quot;headerlink&quot; title=&quot;数据可视化（第二版）陈为  —视物致知&quot;&gt;&lt;/a&gt;数据可视化（第二版）陈为  —视物致知&lt;/h1&gt;&lt;h2 id=</summary>
      
    
    
    
    <category term="可视化学习笔记" scheme="http://bbstudy.net/categories/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="gra_stu" scheme="http://bbstudy.net/tags/gra-stu/"/>
    
    <category term="可视化" scheme="http://bbstudy.net/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode每日一题】899.有序队列</title>
    <link href="http://bbstudy.net/LeetCode-899-20220803/"/>
    <id>http://bbstudy.net/LeetCode-899-20220803/</id>
    <published>2022-09-07T13:19:54.938Z</published>
    <updated>2022-09-11T12:03:46.685Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接：<a href="https://leetcode.cn/problems/orderly-queue/">https://leetcode.cn/problems/orderly-queue/</a></p><p>题目难度：困难</p></blockquote><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个字符串 s 和一个整数 k 。你可以从 s 的前 k 个字母中选择一个，并把它加到字符串的末尾。</p><p>返回 在应用上述步骤的任意数量的移动后，字典上最小的字符串 。</p><p><strong>示例 1：</strong></p><pre class="language-none"><code class="language-none">输入：s &#x3D; &quot;cba&quot;, k &#x3D; 1输出：&quot;acb&quot;解释：在第一步中，我们将第一个字符（“c”）移动到最后，获得字符串 “bac”。在第二步中，我们将第一个字符（“b”）移动到最后，获得最终结果 “acb”。</code></pre><p><strong>示例 2：</strong></p><pre class="language-none"><code class="language-none">输入：s &#x3D; &quot;baaca&quot;, k &#x3D; 3输出：&quot;aaabc&quot;解释：在第一步中，我们将第一个字符（“b”）移动到最后，获得字符串 “aacab”。在第二步中，我们将第三个字符（“c”）移动到最后，获得最终结果 “aaabc”。</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= S.length &lt;= 1000</code></li><li>s 只由小写字母组成。</li></ul><h3 id="题解：数学"><a href="#题解：数学" class="headerlink" title="题解：数学"></a>题解：数学</h3><p>分类讨论。根据题意可以简单划分为$k=1$和$k\gt1$两种情况</p><ul><li>$k=1$，即依次将所有元素插入到字符串最后，选择这n个字符串中字典序最小的那个</li><li>$k\gt1$，可以通过数学证明，通过若干次操作后能将当前字符串转化为与之对应的字典序最小的字符串。至于如何获得字典序最小的字符串：直接对该字符串从小到大排序即可。（具体数学证明见官方题解：<a href="https://leetcode.cn/problems/orderly-queue/solution/you-xu-dui-lie-by-leetcode-solution-p6gv/）">https://leetcode.cn/problems/orderly-queue/solution/you-xu-dui-lie-by-leetcode-solution-p6gv/）</a></li></ul><h4 id="C-代码："><a href="#C-代码：" class="headerlink" title="C++代码："></a>C++代码：</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">orderlyQueue</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string min_str<span class="token operator">=</span>s<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> c<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token operator">+=</span>c<span class="token punctuation">;</span>                min_str<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>min_str<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> min_str<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode.cn/problems/orderly-queue/&quot;&gt;https://leetcode.cn/problems/orderly-queue/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目难度：困难&lt;/p</summary>
      
    
    
    
    <category term="LeetCode每日一题" scheme="http://bbstudy.net/categories/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode2022年每日一题4月打卡汇总</title>
    <link href="http://bbstudy.net/LeetCode-April-2022/"/>
    <id>http://bbstudy.net/LeetCode-April-2022/</id>
    <published>2022-09-07T13:19:54.938Z</published>
    <updated>2022-09-11T12:04:22.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode2022年每日一题4月打卡汇总"><a href="#LeetCode2022年每日一题4月打卡汇总" class="headerlink" title="LeetCode2022年每日一题4月打卡汇总"></a>LeetCode2022年每日一题4月打卡汇总</h2><blockquote><p>点击题目即可跳转至LeetCode题目</p></blockquote><h3 id="4-1：二倍数对数组"><a href="#4-1：二倍数对数组" class="headerlink" title="4.1：二倍数对数组"></a><a href="https://leetcode-cn.com/problems/array-of-doubled-pairs/">4.1：二倍数对数组</a></h3><p>给定一个长度为偶数的整数数组 arr，只有对 arr 进行重组后可以满足 “对于每个 0 &lt;= i &lt; len(arr) / 2，都有 arr[2 <em> i + 1] = 2 </em> arr[2 * i]” 时，返回 true；否则，返回 false。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：arr &#x3D; [3,1,3,6]输出：false</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：arr &#x3D; [2,1,2,6]输出：false</code></pre><p><strong>示例3：</strong></p><pre class="language-none"><code class="language-none">输入：arr &#x3D; [4,-2,2,-4]输出：true解释：可以用 [-2,-4] 和 [2,4] 这两组组成 [-2,-4,2,4] 或是 [2,4,-2,-4]</code></pre><p><strong>提示：</strong></p><ul><li>$0 &lt;= arr.length &lt;= 3 * 10^4$</li><li><code>arr.length</code> 是偶数</li><li>$-10^5 &lt;= arr[i] &lt;= 10^5$</li></ul><h4 id="题解：哈希-排序"><a href="#题解：哈希-排序" class="headerlink" title="题解：哈希+排序"></a>题解：哈希+排序</h4><p>首先将数组中所有元素出现的次数存入哈希表中，通过题意我们不难发现，只需要判断下标为奇数（下标从0开始）的数是前面数字的两倍即可。</p><p>于是自定义排序：按照绝对值的大小从大到小排序</p><p>遍历排好序的数组，只需判断当前数字是否还存在（可能是前面数字的两倍）以及它乘以两倍的数字是否存在即可。</p><p>如果存在n/2对数对，则返回true，否则返回false。</p><p>注意：需要特判下0</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">canReorderDoubled</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> mp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>mp<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>mp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">--</span>mp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">--</span>mp<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="4-3：寻找比目标字母大的最小字母"><a href="#4-3：寻找比目标字母大的最小字母" class="headerlink" title="4.3：寻找比目标字母大的最小字母"></a><a href="https://leetcode-cn.com/problems/find-smallest-letter-greater-than-target/">4.3：寻找比目标字母大的最小字母</a></h3><p>给你一个排序后的字符列表 letters ，列表中只包含小写英文字母。另给出一个目标字母 target，请你寻找在这一有序列表里比目标字母大的最小字母。</p><p>在比较时，字母是依序循环出现的。举个例子：</p><p>如果目标字母 target = ‘z’ 并且字符列表为 letters = [‘a’, ‘b’]，则答案返回 ‘a’</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入: letters &#x3D; [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]，target &#x3D; &quot;a&quot;输出: &quot;c&quot;</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入: letters &#x3D; [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target &#x3D; &quot;c&quot;输出: &quot;f&quot;</code></pre><p><strong>示例3：</strong></p><pre class="language-none"><code class="language-none">输入: letters &#x3D; [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target &#x3D; &quot;d&quot;输出: &quot;f&quot;</code></pre><p><strong>提示：</strong></p><ul><li>$2 &lt;= letters.length &lt;= 10^4$</li><li>letters[i] 是一个小写字母</li><li>letters 按非递减顺序排序</li><li>letters 最少包含两个不同的字母</li><li>target 是一个小写字母</li></ul><h4 id="题解：模拟"><a href="#题解：模拟" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>直接遍历列表，判断是否存在大于target的字母，若不存在则输出列表中第一个字符即可。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> <span class="token function">nextGreatestLetter</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token operator">&amp;</span> letters<span class="token punctuation">,</span> <span class="token keyword">char</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>letters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>letters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> letters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> letters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="4-11：统计各位数字都不同的数字个数"><a href="#4-11：统计各位数字都不同的数字个数" class="headerlink" title="4.11：统计各位数字都不同的数字个数"></a><a href="https://leetcode-cn.com/problems/count-numbers-with-unique-digits/">4.11：统计各位数字都不同的数字个数</a></h3><h4 id="题解一：暴力DFS"><a href="#题解一：暴力DFS" class="headerlink" title="题解一：暴力DFS"></a>题解一：暴力DFS</h4><p>n最大为8，比较容易想到的思路便是直接通过dfs遍历每一位数字，如果各位数字都不同则记录数+1，最终统计满足条件的个数即可。</p><p>注意：前导0的情况需要特判下。</p><p>缺点：费时</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cnt<span class="token punctuation">,</span><span class="token keyword">int</span>  n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>ans<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//前面全是前导0</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">countNumbersWithUniqueDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="题解二：排列组合"><a href="#题解二：排列组合" class="headerlink" title="题解二：排列组合"></a>题解二：排列组合</h4><p>官方提供的思路。</p><ul><li>n=0时：$0&lt;=x&lt;1$，满足条件个数为：1个</li><li>n=1时：$0&lt;=x&lt;10$，满足条件个数为：0~9，10个</li><li><p>n=2时：$0&lt;=x&lt;100$，可以由两部分构成：只有一位数的情况和两位数的情况。其中</p><ul><li>只有一位数的情况由上述可得x有10种；</li><li>有两位数的情况：第一位可以取1~9（9种）， 第二位可以取0~9除了和第一位不同的数字（9种），于是就有：9*9=81种。</li></ul></li><li><p>n=3时，可以分为三部分：一位数、两位数、三位数</p><ul><li>一位数：10种（0~9）</li><li>两位数：9*9=81种</li><li>三位数：9*9*8</li></ul></li><li>扩展至n&gt;=2：含有n位数字的情况，可以表示为：9*$A_{9}^{n-1}$</li></ul><p>于是代码如下：</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countNumbersWithUniqueDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num<span class="token operator">*=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//9*9*8*....</span>            ans<span class="token operator">+=</span>num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>当然，还有其他的解法，比如：n最大为8，可以直接打表（存储n为0~8的结果）；还可以用dp等等，此处并不一一列举。</p><h3 id="4-12：写字符串需要的行数"><a href="#4-12：写字符串需要的行数" class="headerlink" title="4.12：写字符串需要的行数"></a><a href="https://leetcode-cn.com/problems/number-of-lines-to-write-string/">4.12：写字符串需要的行数</a></h3><h4 id="题解：模拟-1"><a href="#题解：模拟-1" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>直接根据题意模拟即可，如果当前行已有的宽度+当前遍历字符的宽度&gt;100，则直接换行即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">numberOfLines</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> widths<span class="token punctuation">,</span> string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">+</span>widths<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>num<span class="token operator">=</span>widths<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                num<span class="token operator">+=</span>widths<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="4-13：O-1-时间插入、删除和获取随机元素"><a href="#4-13：O-1-时间插入、删除和获取随机元素" class="headerlink" title="4.13：O(1) 时间插入、删除和获取随机元素"></a><a href="https://leetcode-cn.com/problems/insert-delete-getrandom-o1/">4.13：O(1) 时间插入、删除和获取随机元素</a></h3><h4 id="题解：哈希表"><a href="#题解：哈希表" class="headerlink" title="题解：哈希表"></a>题解：哈希表</h4><p>对于获取随机元素，数组可以在O(1)时间做到，但是对于插入和删除操作，数组却无能为力。</p><p>对于插入和删除操作，哈希表可以在O(1)时间做到，但是对于获取随机元素操作，哈希表却又不可奈何。</p><p>于是思考：能否将两者结合，实现O(1)时间：插入、删除和获取随机元素。</p><ul><li>用一可变数组num：存储集合中的元素</li><li>哈希表中：key存储num中的元素，value存储对应的索引</li></ul><p>当执行插入操作（插入元素在集合中未出现）时：</p><ol><li>num数组直接在末尾添加</li><li>哈希表则把插入的元素和对应的末尾下标存入其中</li></ol><p>当执行删除操作（待删除元素在集合中）时：</p><ol><li>将num数组中末尾元素移动至当前需要删除元素的索引处</li><li>在哈希表中更新num数组中末尾对应的value值（即索引）</li><li>num数组删除最后一个元素，哈希表删除待删除的元素</li></ol><p>借此巩固下Java集合类的使用，于是提供C++和Java代码：</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">RandomizedSet</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>   <span class="token comment">//key->num,value->index</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>  num<span class="token punctuation">;</span>    <span class="token function">RandomizedSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//随机数种子</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">bool</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">bool</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//将num数组中最后一个元素填入到此位置</span>        <span class="token keyword">int</span> index<span class="token operator">=</span>mp<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span>num<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>index<span class="token punctuation">;</span>        num<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token comment">//在num数组中删除最后一个元素，同时mp中也删除需要删除的元素</span>        num<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mp<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">int</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * Your RandomizedSet object will be instantiated and called as such: * RandomizedSet* obj = new RandomizedSet(); * bool param_1 = obj->insert(val); * bool param_2 = obj->remove(val); * int param_3 = obj->getRandom(); */</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RandomizedSet</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RandomizedSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//将num最后一个元素移动至当前位置</span>        <span class="token keyword">int</span> index<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> last<span class="token operator">=</span>num<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//删除num最后一个元素，删除map中需要删除的元素</span>        num<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Random</span> rand<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index<span class="token operator">=</span>rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-14：最富有客户的资产总量"><a href="#4-14：最富有客户的资产总量" class="headerlink" title="4.14：最富有客户的资产总量"></a><a href="https://leetcode-cn.com/problems/richest-customer-wealth/">4.14：最富有客户的资产总量</a></h3><h4 id="题解：模拟-2"><a href="#题解：模拟-2" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>直接按照题意，计算每位客户的资产总量，在选出最大的资产总量即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maximumWealth</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> accounts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>accounts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>accounts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                num<span class="token operator">+=</span>accounts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="4-15：迷你语法分析器"><a href="#4-15：迷你语法分析器" class="headerlink" title="4.15：迷你语法分析器"></a><a href="https://leetcode-cn.com/problems/mini-parser/">4.15：迷你语法分析器</a></h3><h4 id="题解：dfs或栈"><a href="#题解：dfs或栈" class="headerlink" title="题解：dfs或栈"></a>题解：dfs或栈</h4><p>今天题目可能有点小复杂，但难度不大，可以理解为模拟。</p><p>可以使用dfs和栈来实现，dfs思路比较简单，但是相比于栈比较复杂，于是在此用栈来模拟实现。</p><p>栈中元素保存的是NestedInteger对象。</p><p>每一个NestedInteger对象存在两个元素：整数 或 列表</p><ul><li>当出现 $[$ 字符时，则表示创建新的NestedInteger对象</li><li>当出现 $,$ 或 $]$ 字符时，表示要创建新的元素或对象<ul><li>如果是 $,$ 则表示此时是一个列表，把上一个整数添加至栈顶元素的列表中</li><li>如果是 $]$ ，则此时NestedInteger对象已经结束，添加至栈顶</li></ul></li></ul><p>最后只需要返回栈顶元素即可。具体见代码。</p><p>注意：如果只有一个整数表示的情况，如示例1，则需要特判下。</p><p><strong>C++代码</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * // This is the interface that allows for creating nested lists. * // You should not implement it, or speculate about its implementation * class NestedInteger &#123; *   public: *     // Constructor initializes an empty nested list. *     NestedInteger(); * *     // Constructor initializes a single integer. *     NestedInteger(int value); * *     // Return true if this NestedInteger holds a single integer, rather than a nested list. *     bool isInteger() const; * *     // Return the single integer that this NestedInteger holds, if it holds a single integer *     // The result is undefined if this NestedInteger holds a nested list *     int getInteger() const; * *     // Set this NestedInteger to hold a single integer. *     void setInteger(int value); * *     // Set this NestedInteger to hold a nested list and adds a nested integer to it. *     void add(const NestedInteger &amp;ni); * *     // Return the nested list that this NestedInteger holds, if it holds a nested list *     // The result is undefined if this NestedInteger holds a single integer *     const vector&lt;NestedInteger> &amp;getList() const; * &#125;; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    NestedInteger <span class="token function">deserialize</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'['</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//只有一个数字的情况，如示例1</span>            <span class="token keyword">return</span> <span class="token function">NestedInteger</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//stoi()：c++内置string to int函数</span>        <span class="token punctuation">&#125;</span>        stack<span class="token operator">&lt;</span>NestedInteger<span class="token operator">></span> sta<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//记录正负</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// c++内置判断是否为数字函数</span>                num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'['</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//创建一个新的对象</span>                sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">NestedInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">','</span><span class="token operator">||</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">']'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//新的元素或对象</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> num<span class="token operator">=</span><span class="token operator">-</span>num<span class="token punctuation">;</span>                    sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">NestedInteger</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">']'</span><span class="token operator">&amp;&amp;</span>sta<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    NestedInteger ni<span class="token operator">=</span>sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ni<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="4-16：最大回文数乘积"><a href="#4-16：最大回文数乘积" class="headerlink" title="4.16：最大回文数乘积"></a><a href="https://leetcode-cn.com/problems/largest-palindrome-product/">4.16：最大回文数乘积</a></h3><h4 id="题解：数学-枚举"><a href="#题解：数学-枚举" class="headerlink" title="题解：数学+枚举"></a>题解：数学+枚举</h4><p>由于需要计算两位n位整数乘积的<strong>最大回文整数</strong>。于是可以直接枚举所有的回文数（由于是求最大值，所有从大到小枚举）</p><p>两位n位整数最多也只能产生$10^{2n}$位的数字。又由于是回文数，我们可以只枚举一半，于是可以从$10^n-1$开始枚举回文数的一半。</p><p>然后再遍历它的因子，如果两个因子都是n位整数，则找到答案，即可结束循环。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">largestPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//枚举回文数左边</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> p<span class="token operator">=</span>i<span class="token punctuation">;</span>   <span class="token comment">//p表示回文数</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                p<span class="token operator">=</span>p<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>num<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                      <span class="token comment">//遍历它的因子</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> j<span class="token operator">=</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">*</span>j<span class="token operator">>=</span>p<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">%</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>j<span class="token operator">></span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ans<span class="token operator">=</span>p<span class="token operator">%</span><span class="token number">1337</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="4-17：最常见的单词"><a href="#4-17：最常见的单词" class="headerlink" title="4.17：最常见的单词"></a><a href="https://leetcode-cn.com/problems/most-common-word/">4.17：最常见的单词</a></h3><h4 id="题解：模拟-3"><a href="#题解：模拟-3" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><ol><li>首先将所有字母转化为小写字母</li><li>截取段落中所有的单词存储到一个哈希表中，key存储单词，value存储单词出现的次数</li><li>在哈希表中找出出现次数最多，且不在禁用列表中的单词</li></ol><p><strong>注意：截取段落中的所有单词可能会存在一些小细节，需要留意下（例如最后一个单词末尾可能是字母或者是其他字符等）</strong></p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token char">' '</span><span class="token punctuation">,</span><span class="token char">'!'</span><span class="token punctuation">,</span><span class="token char">'?'</span><span class="token punctuation">,</span><span class="token char">'\''</span><span class="token punctuation">,</span><span class="token char">','</span><span class="token punctuation">,</span><span class="token char">';'</span><span class="token punctuation">,</span><span class="token char">'.'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">get_minpos</span><span class="token punctuation">(</span>string paragraph<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>paragraph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>pos<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    res<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">!=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    string <span class="token function">mostCommonWord</span><span class="token punctuation">(</span>string paragraph<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> banned<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>paragraph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先将字符串中所有字母转化为小写</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token char">'A'</span><span class="token operator">&amp;&amp;</span>paragraph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token punctuation">)</span> paragraph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// cout&lt;&lt;paragraph&lt;&lt;endl;</span>        map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">get_minpos</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>            string str<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token char">'a'</span><span class="token operator">&amp;&amp;</span>paragraph<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">'z'</span><span class="token punctuation">)</span> str<span class="token operator">=</span>paragraph<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>p<span class="token operator">-</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> str<span class="token operator">=</span>paragraph<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>p<span class="token operator">-</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// cout&lt;&lt;pos&lt;&lt;"--"&lt;&lt;p&lt;&lt;"---"&lt;&lt;str&lt;&lt;endl;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span> mp<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            pos<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> maxnum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>string ans<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">:</span>mp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>banned<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>banned<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>it<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>second<span class="token operator">></span>maxnum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                maxnum<span class="token operator">=</span>it<span class="token punctuation">.</span>second<span class="token punctuation">;</span>ans<span class="token operator">=</span>it<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="4-18：字典序排数"><a href="#4-18：字典序排数" class="headerlink" title="4.18：字典序排数"></a><a href="https://leetcode-cn.com/problems/lexicographical-numbers/">4.18：字典序排数</a></h3><h4 id="题解：DFS"><a href="#题解：DFS" class="headerlink" title="题解：DFS"></a>题解：DFS</h4><p>题目要求按照字典序返回[1,n]中的所有数字。时间复杂度要求为$O(n)$，空间复杂度要求为：$O(1)$</p><p>例如：n=13时，输出为：[1,10,11,12,13,2,3,4,5,6,7,8,9]。</p><p>思考能否直接从1开始遍历出第一位数字为1且小于等于n的所有数字；然后再遍历2,3,…9。这样便可在$O(n)$时间复杂度条件下实现题目要求。</p><p>显然dfs可以实现上述思路：</p><ul><li>最高位从1到9</li><li>次高为从1到9</li><li>….</li></ul><p>期间如果遍历的数字超过了n则直接结果此轮的dfs。</p><p>代码如下：</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">,</span>num<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">></span>n<span class="token operator">||</span>cnt<span class="token operator">></span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token operator">++</span>cnt<span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>now<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">lexicalOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="4-19：字符的最短距离"><a href="#4-19：字符的最短距离" class="headerlink" title=" 4.19：字符的最短距离"></a><a href="https://leetcode-cn.com/problems/shortest-distance-to-a-character/"> 4.19：字符的最短距离</a></h3><h4 id="题解一：暴力"><a href="#题解一：暴力" class="headerlink" title="题解一：暴力"></a>题解一：暴力</h4><p>首先将字符串s中所有字符c的位置存入数组中，然后遍历字符串s，假设当前遍历位置为i，再二重循环遍历所有字符c的位置，找出两个下标之间的最小距离。</p><p>时间复杂度：$O(n^2)$</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shortestToChar</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> pos_arr<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>c<span class="token punctuation">)</span> pos_arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> j<span class="token operator">:</span>pos_arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="题解二：两次遍历"><a href="#题解二：两次遍历" class="headerlink" title="题解二：两次遍历"></a>题解二：两次遍历</h4><ul><li>第一次遍历，从左到右遍历，找出s[i]到左侧最近的字符c的距离</li><li>第二次遍历，从右到左遍历，找出s[i]到右侧最近的字符c的距离</li></ul><p>然后选择其中的最小值即可。</p><p>注意：可能存在此时并没出现过字符c的情况（例如：从左到右遍历时，左侧并没有字符c，从右到左遍历同理）所以需要初始化一个最大值，为方便处理：</p><ul><li>从左开始遍历时，我们可以初始字符c的位置为：$pos=-n$，如果未出现则取：i-pos&gt;=n，显然可行</li><li>从右开始遍历时，我们可以初始字符c的位置为：$pos=2n$，如果未出现则取：pos-i&gt;n，显然可行</li></ul><p>当然也可以直接初始化非常大的值。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shortestToChar</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token operator">-</span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>c<span class="token punctuation">)</span> pos<span class="token operator">=</span>i<span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">-</span>pos<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pos<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>c<span class="token punctuation">)</span> pos<span class="token operator">=</span>i<span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pos<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="4-20：文件的最长绝对路径"><a href="#4-20：文件的最长绝对路径" class="headerlink" title="4.20：文件的最长绝对路径"></a><a href="https://leetcode-cn.com/problems/longest-absolute-file-path/">4.20：文件的最长绝对路径</a></h3><h4 id="题解：模拟-4"><a href="#题解：模拟-4" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p><strong>注意</strong>：题目给出的换行符$\n$和制表符$\t$，都只是字符，而不是由两个字符组成。</p><p>上述理解后，这题就不难了，对于每一个文件file：</p><ul><li>要么是由上一层的文件夹所得到，此时路径长度为：文件名长度+上一层路径长度+1（表示/）</li><li>要么直接为根目录下的文件，此时路径长度直接为：文件名长度</li></ul><p>判断当前遍历的为文件还是文件夹 ，于是只需要判断是否存在字符 $.$ 即可。</p><p>又由于只需要计算文件的最长绝对路径，于是我们只需要存储每一层的绝对路径的长度，然后按照上述规则不断更新结结果即可。</p><p>具体见代码注释。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lengthLongestPath</span><span class="token punctuation">(</span>string input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//遍历字符串</span>        <span class="token keyword">int</span> dep<span class="token punctuation">;</span>   <span class="token comment">//遍历文件的层数</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//记录每一层的路径长度</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//当前层数</span>            dep<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>input<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                pos<span class="token operator">++</span><span class="token punctuation">;</span>dep<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//记录当前文件/文件夹的长度</span>            <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//判断是否为文件</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>input<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'.'</span><span class="token punctuation">)</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                pos<span class="token operator">++</span><span class="token punctuation">;</span>len<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 不是根目录</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> len<span class="token operator">+=</span>f<span class="token punctuation">[</span>dep<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//is file</span>                ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//is folder</span>                f<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token operator">=</span>len<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//跳过换行符</span>            pos<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="4-21：山羊拉丁文"><a href="#4-21：山羊拉丁文" class="headerlink" title="4.21：山羊拉丁文"></a><a href="https://leetcode-cn.com/problems/goat-latin/">4.21：山羊拉丁文</a></h3><h4 id="题解：模拟-5"><a href="#题解：模拟-5" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>直接按照题意模拟即可。通过一次遍历便可按照题意输出想要的结果</p><ul><li>元音字母包含大小写10个</li><li>如果此时遍历的是单词的第一个字母，且为辅音字母，则直接跳过（因为该字母需要加入到单词末尾）</li><li>如果此时遍历的空格，则表示此时已经遍历了一个单词，按照题目要求进行相应的操作（如果单词第一个字母为辅音字母则加入到末尾；然后加入对应数量的字母a）</li></ul><p>可以发现，这样处理对于最后一个单词不是很友好，因为末尾没有空格，为了方便处理，可以在末尾加入一个空格，直接一步到位。</p><p>官方题解时间复杂度为$O(n^2)$，此思路时间复杂度为$O(n)$</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string str<span class="token operator">=</span><span class="token string">"aeiouAEIOU"</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    string <span class="token function">toGoatLatin</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//为了方便处理最后一个单词，所以在字符串末尾添加' '</span>        s<span class="token operator">+=</span><span class="token char">' '</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//记录单词在句子中的索引</span>        <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//记录当前遍历的单词第一个字母位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>pos <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//单词以辅音字母开头</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span>s<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//如果第一个字母是辅音字母则加入到末尾</span>                ans<span class="token operator">+=</span><span class="token string">"ma"</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span><span class="token char">'a'</span><span class="token punctuation">;</span>                pos<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//更新pos</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="4-22：旋转函数"><a href="#4-22：旋转函数" class="headerlink" title="4.22：旋转函数"></a><a href="https://leetcode-cn.com/problems/rotate-function/">4.22：旋转函数</a></h3><h4 id="题解：迭代-思维"><a href="#题解：迭代-思维" class="headerlink" title="题解：迭代+思维"></a>题解：迭代+思维</h4><p>通过具体示例进行讲解：例如nums = [4, 3, 2, 6]</p><pre class="language-none"><code class="language-none">F[0] &#x3D; (0*4) + (1*3) + (2*2) + (3*6)F[1] &#x3D; (1*4) + (2*3) + (3*2) + (0*6) &#x3D; F[0] + sum - n*nums[n-1]（其中sum表示数组nums所有元素总和）F[2] &#x3D; (2*4) + (3*3) + (0*2) + (1*6) &#x3D; F[1] + sum - n*nums[n-2]</code></pre><p>进而推广至$k(1&lt;k&lt;n)$：$F[k]=f[k-1]+sum-n*nums[n-k]$</p><p>从F[]数组中选择最大值即为答案。</p><p><strong>C++代码</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxRotateFunction</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//数组元素的和</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+=</span>i<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token operator">-</span>n<span class="token operator">*</span>nums<span class="token punctuation">[</span>n<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>当然可以通过变量存储每一次旋转函数的值，从而降低空间复杂度。</p><h3 id="4-25：随机数索引"><a href="#4-25：随机数索引" class="headerlink" title="4.25：随机数索引"></a><a href="https://leetcode-cn.com/problems/random-pick-index/">4.25：随机数索引</a></h3><h4 id="题解：哈希表-1"><a href="#题解：哈希表-1" class="headerlink" title="题解：哈希表"></a>题解：哈希表</h4><p>题目给定数组长度最大为$2*10^4$，同时最多调用pick函数$10^4$次，于是可以直接通过哈希表存储数组中的元素对应的下标，即：</p><ul><li>key为数组元素</li><li>value为数组元素对应下标的列表</li></ul><p>对于随机数，直接使用C++ rand()函数即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> mp<span class="token punctuation">;</span>    <span class="token function">Solution</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mp<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">int</span> <span class="token function">pick</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>mp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * Your Solution object will be instantiated and called as such: * Solution* obj = new Solution(nums); * int param_1 = obj->pick(target); */</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode2022年每日一题4月打卡汇总&quot;&gt;&lt;a href=&quot;#LeetCode2022年每日一题4月打卡汇总&quot; class=&quot;headerlink&quot; title=&quot;LeetCode2022年每日一题4月打卡汇总&quot;&gt;&lt;/a&gt;LeetCode2022年每日一题</summary>
      
    
    
    
    <category term="LeetCode每日一题" scheme="http://bbstudy.net/categories/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode2022年每日一题8月打卡汇总</title>
    <link href="http://bbstudy.net/LeetCode-August-2022/"/>
    <id>http://bbstudy.net/LeetCode-August-2022/</id>
    <published>2022-09-07T13:19:54.938Z</published>
    <updated>2022-09-11T12:04:27.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode2022年每日一题8月打卡汇总"><a href="#LeetCode2022年每日一题8月打卡汇总" class="headerlink" title="LeetCode2022年每日一题8月打卡汇总"></a>LeetCode2022年每日一题8月打卡汇总</h2><h3 id="8-1：【LeetCode-1374】生成每种字符都是奇数个的字符串"><a href="#8-1：【LeetCode-1374】生成每种字符都是奇数个的字符串" class="headerlink" title="8.1：【LeetCode 1374】生成每种字符都是奇数个的字符串"></a><a href="https://leetcode.cn/problems/generate-a-string-with-characters-that-have-odd-counts/">8.1：【LeetCode 1374】生成每种字符都是奇数个的字符串</a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode2022年每日一题8月打卡汇总&quot;&gt;&lt;a href=&quot;#LeetCode2022年每日一题8月打卡汇总&quot; class=&quot;headerlink&quot; title=&quot;LeetCode2022年每日一题8月打卡汇总&quot;&gt;&lt;/a&gt;LeetCode2022年每日一题</summary>
      
    
    
    
    <category term="LeetCode每日一题" scheme="http://bbstudy.net/categories/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode2022年每日一题2月打卡汇总</title>
    <link href="http://bbstudy.net/LeetCode-February-2022/"/>
    <id>http://bbstudy.net/LeetCode-February-2022/</id>
    <published>2022-09-07T13:19:54.938Z</published>
    <updated>2022-09-11T12:04:34.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode2022年每日一题2月打卡汇总"><a href="#LeetCode2022年每日一题2月打卡汇总" class="headerlink" title="LeetCode2022年每日一题2月打卡汇总"></a>LeetCode2022年每日一题2月打卡汇总</h2><p>不能再鸽了…</p><h3 id="2-11：学生分数的最小差值"><a href="#2-11：学生分数的最小差值" class="headerlink" title="2.11：学生分数的最小差值"></a><a href="https://leetcode-cn.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/">2.11：学生分数的最小差值</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给你一个 下标从 0 开始 的整数数组 nums ，其中 nums[i] 表示第 i 名学生的分数。另给你一个整数 k 。</p><p>从数组中选出任意 k 名学生的分数，使这 k 个分数间 最高分 和 最低分 的 差值 达到 最小化 。</p><p>返回可能的 最小差值 。</p><p><strong>提示：</strong></p><ul><li>$1 &lt;= k &lt;= nums.length &lt;= 1000$</li><li>$0 &lt;= nums[i] &lt;= 10^5$</li></ul><p><strong>示例1：</strong></p><blockquote><p>输入：nums = [90], k = 1<br>输出：0<br>解释：选出 1 名学生的分数，仅有 1 种方法：</p><ul><li>[90] 最高分和最低分之间的差值是 90 - 90 = 0<br>可能的最小差值是 0</li></ul></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：nums = [9,4,1,7], k = 2<br>输出：2<br>解释：选出 2 名学生的分数，有 6 种方法：</p><ul><li>[9,4,1,7] 最高分和最低分之间的差值是 9 - 4 = 5</li><li>[9,4,1,7] 最高分和最低分之间的差值是 9 - 1 = 8</li><li>[9,4,1,7] 最高分和最低分之间的差值是 9 - 7 = 2</li><li>[9,4,1,7] 最高分和最低分之间的差值是 4 - 1 = 3</li><li>[9,4,1,7] 最高分和最低分之间的差值是 7 - 4 = 3</li><li>[9,4,1,7] 最高分和最低分之间的差值是 7 - 1 = 6<br>可能的最小差值是 2</li></ul></blockquote><h4 id="题解：模拟"><a href="#题解：模拟" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>题目要求k个数中最高分与最低分差值的最小值，可以先排序，然后依次比较k个数值之间最高分与最低分差值，保存最小值即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimumDifference</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minimumDifference</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-13“气球”-的最大数量"><a href="#2-13“气球”-的最大数量" class="headerlink" title="2.13“气球” 的最大数量"></a><a href="https://leetcode-cn.com/problems/maximum-number-of-balloons/">2.13“气球” 的最大数量</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 “balloon”（气球）。</p><p>字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 “balloon”。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：text &#x3D; &quot;nlaebolko&quot;输出：1</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：text &#x3D; &quot;loonbalxballpoon&quot;输出：2</code></pre><p><strong>示例3</strong></p><pre class="language-none"><code class="language-none">输入：text &#x3D; &quot;leetcode&quot;输出：0</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= text.length &lt;= 10^4$</li><li><code>text</code> 全部由小写英文字母组成</li></ul><h4 id="题解：暴力"><a href="#题解：暴力" class="headerlink" title="题解：暴力"></a>题解：暴力</h4><p>直接见代码</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxNumberOfBalloons</span><span class="token punctuation">(</span>string text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mp<span class="token punctuation">[</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span>mp<span class="token punctuation">[</span><span class="token char">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>mp<span class="token punctuation">[</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>mp<span class="token punctuation">[</span><span class="token char">'l'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>mp<span class="token punctuation">[</span><span class="token char">'o'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>mp<span class="token punctuation">[</span><span class="token char">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxNumberOfBalloons</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> mp<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> mp<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> mp<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> mp<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> mp<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> mp<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token char">'n'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-14：有序数组中的单一元素"><a href="#2-14：有序数组中的单一元素" class="headerlink" title="2.14：有序数组中的单一元素"></a><a href="https://leetcode-cn.com/problems/single-element-in-a-sorted-array/">2.14：有序数组中的单一元素</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。</p><p>请你找出并返回只出现一次的那个数。</p><p>你设计的解决方案必须满足 O(log n) 时间复杂度和 O(1) 空间复杂度。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入: nums &#x3D; [1,1,2,3,3,4,4,8,8]输出: 2</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入: nums &#x3D;  [3,3,7,7,10,11,11]输出: 10</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums.length &lt;= 10^5$</li><li>$0 &lt;= nums[i] &lt;= 10^5$</li></ul><h4 id="题解：二分"><a href="#题解：二分" class="headerlink" title="题解：二分"></a>题解：二分</h4><p>时间复杂度O(logn)秒想<strong>二分</strong>。由于是有序数组，假设我们需要查找的下标为x，当前二分中心点为mid，则：</p><ul><li>如果mid为奇数下标，且a[mid]==a[mid-1]</li><li>如果mid为偶数下标，且a[mid]==a[mid+1]</li></ul><p>上述满足则x在mid的右侧，调整l，否则x在mid的左侧调整r</p><blockquote><p>注意：下标从0开始</p></blockquote><p>当然可以用异或优化，这里省略。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">,</span>ans<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-15：矩阵中的幸运数"><a href="#2-15：矩阵中的幸运数" class="headerlink" title="2.15：矩阵中的幸运数"></a><a href="https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix/">2.15：矩阵中的幸运数</a></h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。</p><p>幸运数是指矩阵中满足同时下列两个条件的元素：</p><ul><li>在同一行的所有元素中最小</li><li>在同一列的所有元素中最大</li></ul><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：matrix &#x3D; [[3,7,8],[9,11,13],[15,16,17]]输出：[15]解释：15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：matrix &#x3D; [[1,10,4,2],[9,3,8,7],[15,16,17,12]]输出：[12]解释：12 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。</code></pre><p><strong>示例3：</strong></p><pre class="language-none"><code class="language-none">输入：matrix &#x3D; [[7,8],[1,2]]输出：[7]</code></pre><p><strong>提示：</strong></p><ul><li>$m == mat.length$</li><li>$n == mat[i].length$</li><li>$1 &lt;= n, m &lt;= 50$</li><li>$1 &lt;= matrix[i][j] &lt;= 10^5$</li><li>矩阵中的所有元素都是不同的</li></ul><h4 id="题解：模拟-1"><a href="#题解：模拟-1" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>由于数据量比较小，可以直接先遍历整个矩阵，存储每行最小值和每列最大值。再遍历一次矩阵找出符合条件的元素即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">luckyNumbers</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rmin</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">cmax</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                rmin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>rmin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cmax<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>cmax<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>rmin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>cmax<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">luckyNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> rmin<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> cmax<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>rmin<span class="token punctuation">,</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>cmax<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>rmin<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>rmin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cmax<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>cmax<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> rmin<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> cmax<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-17：骑士在棋盘上的概率"><a href="#2-17：骑士在棋盘上的概率" class="headerlink" title="2.17：骑士在棋盘上的概率"></a><a href="https://leetcode-cn.com/problems/knight-probability-in-chessboard/">2.17：骑士在棋盘上的概率</a></h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>在一个 n x n 的国际象棋棋盘上，一个骑士从单元格 (row, column) 开始，并尝试进行 k 次移动。行和列是 从 0 开始 的，所以左上单元格是 (0,0) ，右下单元格是 (n - 1, n - 1) 。</p><p>象棋骑士有8种可能的走法，如下图所示。每次移动在基本方向上是两个单元格，然后在正交方向上是一个单元格。</p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/knight.png" alt="img" loading="lazy"></p><p>每次骑士要移动时，它都会随机从8种可能的移动中选择一种(即使棋子会离开棋盘)，然后移动到那里。</p><p>骑士继续移动，直到它走了 k 步或离开了棋盘。</p><p>返回 骑士在棋盘停止移动后仍留在棋盘上的概率 。</p><p><strong>示例1：</strong></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">输入: n = 3, k = 2, row = 0, column = 0输出: 0.0625解释: 有两步(到(1,2)，(2,1))可以让骑士留在棋盘上。在每一个位置上，也有两种移动可以让骑士留在棋盘上。骑士留在棋盘上的总概率是0.0625。</code></pre><p><strong>示例2：</strong></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">输入: n = 1, k = 0, row = 0, column = 0输出: 1.00000</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 25</code></li><li><code>0 &lt;= k &lt;= 100</code></li><li><code>0 &lt;= row, column &lt;= n</code></li></ul><h4 id="题解：dp"><a href="#题解：dp" class="headerlink" title="题解：dp"></a>题解：dp</h4><p>$dp[i][j][k]为从位置(i,j)出发，使用步数不超过k步，最后仍在棋盘内的概率$</p><p>状态方程转移，对下一步落点$(fx,fy)$进行分情况讨论：</p><ul><li>对于$(fx,fy)$在棋盘外的情况，无需考虑</li><li>若下一步落点$(fx,fy)$在棋盘内，其剩余可用步数为k-1，则最后仍在棋盘的概率为$f[fx][fy][k-1]$，则落点$(fx,fy)$对$f[i][j][k]$的贡献为$f[fx][fy][k-1]<em>\frac{1}{8}$，其中$\frac{1}{8}$为事件 <strong>从(i,j)走到(fx,fy)</strong>的概率，该事件与<em>*到达(fx,fy)后进行后续移动并留在棋盘</em></em>为相互独立事件。</li></ul><p>最终$f[i][j][k]$为 <strong>八连通</strong>落点概率之和，即：</p><script type="math/tex; mode=display">f[i][j][k]=\Sigma f[fx][fy][k-1]*\frac{1}{8}</script><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">knightProbability</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>p<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>d<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>d<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">int</span> fx<span class="token operator">=</span>i<span class="token operator">+</span>dir<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fy<span class="token operator">=</span>j<span class="token operator">+</span>dir<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>fx<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>fx<span class="token operator">>=</span>n<span class="token operator">||</span>fy<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>fy<span class="token operator">>=</span>n<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token punctuation">[</span>fy<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">knightProbability</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> dp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>p<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d<span class="token operator">:</span>dir<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> fx<span class="token operator">=</span>i<span class="token operator">+</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fy<span class="token operator">=</span>j<span class="token operator">+</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fx<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>fx<span class="token operator">>=</span>n<span class="token operator">||</span>fy<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>fy<span class="token operator">>=</span>n<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token punctuation">[</span>fy<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-18：找出星型图的中心节点"><a href="#2-18：找出星型图的中心节点" class="headerlink" title="2.18：找出星型图的中心节点"></a><a href="https://leetcode-cn.com/problems/find-center-of-star-graph/">2.18：找出星型图的中心节点</a></h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><p>有一个无向的 星型 图，由 n 个编号从 1 到 n 的节点组成。星型图有一个 中心 节点，并且恰有 n - 1 条边将中心节点与其他每个节点连接起来。</p><p>给你一个二维整数数组 edges ，其中 edges[i] = [ui, vi] 表示在节点 ui 和 vi 之间存在一条边。请你找出并返回 edges 所表示星型图的中心节点。</p><p><strong>示例1：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/star_graph.png" alt="img" loading="lazy"></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">输入：edges = [[1,2],[2,3],[4,2]]输出：2解释：如上图所示，节点 2 与其他每个节点都相连，所以节点 2 是中心节点。</code></pre><p><strong>示例2：</strong></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">输入：edges = [[1,2],[5,1],[1,3],[1,4]]输出：1</code></pre><p><strong>提示：</strong></p><ul><li>$3 &lt;= n &lt;= 10^5$</li><li>$edges.length == n - 1$</li><li>$edges[i].length == 2$</li><li>$1 &lt;= ui, vi &lt;= n$</li><li>$ui != vi$</li><li>题目数据给出的 edges 表示一个有效的星型图</li></ul><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>简单题，由于是星型图，所以中间结点有n-1（n为结点个数）条边，直接用数组存储每个节点边的条数，然后遍历n个结点，判断是否存在n-1条边的结点即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">findCenter</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>edges<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findCenter</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>edges<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-20：1比特与2比特字符"><a href="#2-20：1比特与2比特字符" class="headerlink" title="2.20：1比特与2比特字符"></a><a href="https://leetcode-cn.com/problems/1-bit-and-2-bit-characters/">2.20：1比特与2比特字符</a></h3><h4 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h4><p>有两种特殊字符：</p><ul><li>第一种字符可以用一个比特 0 来表示</li><li>第二种字符可以用两个比特(10 或 11)来表示、</li></ul><p>给定一个以 0 结尾的二进制数组 bits ，如果最后一个字符必须是一位字符，则返回 true 。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入: bits &#x3D; [1, 0, 0]输出: true解释: 唯一的编码方式是一个两比特字符和一个一比特字符。所以最后一个字符是一比特字符。</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入: bits &#x3D; [1, 1, 1, 0]输出: false解释: 唯一的编码方式是两比特字符和两比特字符。所以最后一个字符不是一比特字符。</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= bits.length &lt;= 1000</code></li><li><code>bits[i] == 0 or 1</code></li></ul><h4 id="题解：简单模拟"><a href="#题解：简单模拟" class="headerlink" title="题解：简单模拟"></a>题解：简单模拟</h4><p>判断最后一个字符是否为一位字符需要满足两个条件：</p><ul><li>最后一个字符必须为0</li><li>最后一个字符0不能与前面的匹配</li></ul><p>于是只需遍历数组，如果当前遍历的字符为1，则需要和后面的字符组成一个二位字符；如果当前遍历的字符为0，则只需要组成一位字符即可。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isOneBitCharacter</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> bits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>bits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>bits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>bits<span class="token punctuation">[</span>bits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOneBitCharacter</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>bits<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>bits<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-21：推多米诺"><a href="#2-21：推多米诺" class="headerlink" title="2.21：推多米诺"></a><a href="https://leetcode-cn.com/problems/push-dominoes/">2.21：推多米诺</a></h3><h4 id="题意-7"><a href="#题意-7" class="headerlink" title="题意"></a>题意</h4><p>n 张多米诺骨牌排成一行，将每张多米诺骨牌垂直竖立。在开始时，同时把一些多米诺骨牌向左或向右推。</p><p>每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。</p><p>如果一张垂直竖立的多米诺骨牌的两侧同时有多米诺骨牌倒下时，由于受力平衡， 该骨牌仍然保持不变。</p><p>就这个问题而言，我们会认为一张正在倒下的多米诺骨牌不会对其它正在倒下或已经倒下的多米诺骨牌施加额外的力。</p><p>给你一个字符串 dominoes 表示这一行多米诺骨牌的初始状态，其中：</p><ul><li>dominoes[i] = ‘L’，表示第 i 张多米诺骨牌被推向左侧，</li><li>dominoes[i] = ‘R’，表示第 i 张多米诺骨牌被推向右侧，</li><li>dominoes[i] = ‘.’，表示没有推动第 i 张多米诺骨牌。</li></ul><p>返回表示最终状态的字符串。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：dominoes &#x3D; &quot;RR.L&quot;输出：&quot;RR.L&quot;解释：第一张多米诺骨牌没有给第二张施加额外的力。</code></pre><p><strong>示例2：</strong></p><p><img src="https://gitee.com/serendipity_LB/img/raw/master/domino.png" alt="img" loading="lazy"></p><pre class="language-none"><code class="language-none">输入：dominoes &#x3D; &quot;.L.R...LR..L..&quot;输出：&quot;LL.RR.LLRRLL..&quot;</code></pre><p><strong>提示：</strong></p><ul><li>$n == dominoes.length$</li><li>$1 &lt;= n &lt;= 10^5$</li><li><code>dominoes[i]</code> 为 <code>&#39;L&#39;</code>、<code>&#39;R&#39;</code> 或 <code>&#39;.&#39;</code></li></ul><h4 id="题解：模拟-2"><a href="#题解：模拟-2" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>枚举所有连续的没有被推动的骨牌，</p><ul><li>如果两侧方向相同，则倒向同一侧</li><li>如果两侧方向相对，则从两侧往中间倒</li><li>如果两侧方向相反，则保持竖立</li></ul><p>如果左侧没有被推倒的骨牌，则假设有一个向左倒的牌；如果右侧没有被推倒的骨牌，则假设有一个向右倒的骨牌。这样假设不会影响最终形态，也避免的边界情况特判。于是代码如下：</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">pushDominoes</span><span class="token punctuation">(</span>string dominoes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string s<span class="token operator">=</span>dominoes<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> l<span class="token operator">=</span><span class="token char">'L'</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'.'</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> r<span class="token operator">=</span>j<span class="token operator">&lt;</span>n<span class="token operator">?</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">:</span><span class="token char">'R'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//如果方向相同，则倒向同一侧</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">,</span>i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span><span class="token char">'R'</span><span class="token operator">&amp;&amp;</span>r<span class="token operator">==</span><span class="token char">'L'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//如果方向相对，则从两侧往中间倒</span>                <span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span>                    s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            l<span class="token operator">=</span>r<span class="token punctuation">;</span>i<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pushDominoes</span><span class="token punctuation">(</span><span class="token class-name">String</span> dominoes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token operator">=</span>dominoes<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> l<span class="token operator">=</span><span class="token char">'L'</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> r<span class="token operator">=</span>j<span class="token operator">&lt;</span>n<span class="token operator">?</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">:</span><span class="token char">'R'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果方向相同，则倒向同一侧</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span><span class="token char">'R'</span><span class="token operator">&amp;&amp;</span>r<span class="token operator">==</span><span class="token char">'L'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//如果方向相对，则从两侧往中间倒</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>l<span class="token operator">=</span>r<span class="token punctuation">;</span>i<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-23：仅仅反转字母"><a href="#2-23：仅仅反转字母" class="headerlink" title="2.23：仅仅反转字母"></a><a href="https://leetcode-cn.com/problems/reverse-only-letters/">2.23：仅仅反转字母</a></h3><h4 id="题意-8"><a href="#题意-8" class="headerlink" title="题意"></a>题意</h4><p>给你一个字符串 <code>s</code> ，根据下述规则反转字符串：</p><ul><li>所有非英文字母保留在原有位置。</li><li>所有英文字母（小写或大写）位置反转。</li></ul><p>返回反转后的 <code>s</code> 。</p><p><strong>示例1：</strong></p><pre class="language-none"><code class="language-none">输入：s &#x3D; &quot;ab-cd&quot;输出：&quot;dc-ba&quot;</code></pre><p><strong>示例2：</strong></p><pre class="language-none"><code class="language-none">输入：s &#x3D; &quot;a-bC-dEf-ghIj&quot;输出：&quot;j-Ih-gfE-dCba&quot;</code></pre><p><strong>示例3：</strong></p><pre class="language-none"><code class="language-none">输入：s &#x3D; &quot;Test1ng-Leet&#x3D;code-Q!&quot;输出：&quot;Qedo1ct-eeLg&#x3D;ntse-T!&quot;</code></pre><p><strong>提示：</strong></p><ul><li>$1 &lt;= s.length &lt;= 100$</li><li><code>s</code> 仅由 ASCII 值在范围 <code>[33, 122]</code> 的字符组成</li><li><code>s</code> 不含 <code>&#39;\&quot;&#39;</code> 或 <code>&#39;\\&#39;</code></li></ul><h4 id="题解：模拟-3"><a href="#题解：模拟-3" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><p>用两变量表示当前需要反转的两个字母的下标l,r，如果$l&gt;=r$，则证明已经反转完成。</p><p><strong>C++代码：</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">checkEng</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">>=</span><span class="token char">'a'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token char">'z'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">>=</span><span class="token char">'A'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    string <span class="token function">reverseOnlyLetters</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkEng</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkEng</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><strong>Java代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkEng</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token char">'a'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">'z'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">'Z'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseOnlyLetters</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkEng</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkEng</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>str<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>str<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>r<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode2022年每日一题2月打卡汇总&quot;&gt;&lt;a href=&quot;#LeetCode2022年每日一题2月打卡汇总&quot; class=&quot;headerlink&quot; title=&quot;LeetCode2022年每日一题2月打卡汇总&quot;&gt;&lt;/a&gt;LeetCode2022年每日一题</summary>
      
    
    
    
    <category term="LeetCode每日一题" scheme="http://bbstudy.net/categories/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="LeetCode" scheme="http://bbstudy.net/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="http://bbstudy.net/tags/Algorithm/"/>
    
  </entry>
  
</feed>
